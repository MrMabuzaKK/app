import type { ChannelState, MessageResponse } from 'stream-chat';
import type { DefaultStreamChatGenerics } from '../../../types/types';
export declare type UseMessageListParams = {
    deletedMessagesVisibilityType?: 'always' | 'never' | 'receiver' | 'sender';
    inverted?: boolean;
    noGroupByUser?: boolean;
    threadList?: boolean;
};
export declare type GroupType = 'bottom' | 'middle' | 'single' | 'top';
export declare type MessagesWithStylesReadByAndDateSeparator<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = MessageResponse<StreamChatGenerics> & {
    groupStyles: GroupType[];
    readBy: boolean | number;
    dateSeparator?: Date;
};
export declare type MessageType<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = ReturnType<ChannelState<StreamChatGenerics>['formatMessage']> | MessagesWithStylesReadByAndDateSeparator<StreamChatGenerics>;
export declare const isMessageWithStylesReadByAndDateSeparator: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(message: MessageType<StreamChatGenerics>) => message is MessagesWithStylesReadByAndDateSeparator<StreamChatGenerics>;
export declare const useMessageList: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(params: UseMessageListParams) => MessageType<StreamChatGenerics>[];
