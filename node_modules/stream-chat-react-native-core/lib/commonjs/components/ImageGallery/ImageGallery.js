var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clamp = exports.IsSwiping = exports.ImageGallery = exports.HasPinched = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _bottomSheet = require("@gorhom/bottom-sheet");

var _AnimatedGalleryImage = require("./components/AnimatedGalleryImage");

var _AnimatedGalleryVideo = require("./components/AnimatedGalleryVideo");

var _ImageGalleryFooter = require("./components/ImageGalleryFooter");

var _ImageGalleryHeader = require("./components/ImageGalleryHeader");

var _ImageGalleryOverlay = require("./components/ImageGalleryOverlay");

var _ImageGrid = require("./components/ImageGrid");

var _ImageGridHandle = require("./components/ImageGridHandle");

var _useImageGalleryGestures = require("./hooks/useImageGalleryGestures");

var _ImageGalleryContext = require("../../contexts/imageGalleryContext/ImageGalleryContext");

var _OverlayContext = require("../../contexts/overlayContext/OverlayContext");

var _ThemeContext = require("../../contexts/themeContext/ThemeContext");

var _native = require("../../native");

var _getResizedImageUrl = require("../../utils/getResizedImageUrl");

var _getUrlOfImageAttachment = require("../../utils/getUrlOfImageAttachment");

var _utils = require("../../utils/utils");

var _this = this,
    _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/ImageGallery/ImageGallery.tsx";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var isAndroid = _reactNative.Platform.OS === 'android';

var fullScreenHeight = _reactNative.Dimensions.get('screen').height;

var measuredScreenHeight = (0, _utils.vh)(100);
var screenWidth = (0, _utils.vw)(100);
var halfScreenWidth = (0, _utils.vw)(50);
var MARGIN = 32;
var HasPinched;
exports.HasPinched = HasPinched;

(function (HasPinched) {
  HasPinched[HasPinched["FALSE"] = 0] = "FALSE";
  HasPinched[HasPinched["TRUE"] = 1] = "TRUE";
})(HasPinched || (exports.HasPinched = HasPinched = {}));

var IsSwiping;
exports.IsSwiping = IsSwiping;

(function (IsSwiping) {
  IsSwiping[IsSwiping["UNDETERMINED"] = 0] = "UNDETERMINED";
  IsSwiping[IsSwiping["TRUE"] = 1] = "TRUE";
  IsSwiping[IsSwiping["FALSE"] = 2] = "FALSE";
})(IsSwiping || (exports.IsSwiping = IsSwiping = {}));

var ImageGallery = function ImageGallery(props) {
  var _StatusBar$currentHei, _photos$selectedIndex;

  var _props$giphyVersion = props.giphyVersion,
      giphyVersion = _props$giphyVersion === void 0 ? 'fixed_height' : _props$giphyVersion,
      imageGalleryCustomComponents = props.imageGalleryCustomComponents,
      imageGalleryGridHandleHeight = props.imageGalleryGridHandleHeight,
      imageGalleryGridSnapPoints = props.imageGalleryGridSnapPoints,
      numberOfImageGalleryGridColumns = props.numberOfImageGalleryGridColumns,
      overlayOpacity = props.overlayOpacity;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      paused = _useState2[0],
      setPaused = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      progress = _useState4[0],
      setProgress = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      duration = _useState6[0],
      setDuration = _useState6[1];

  var _useTheme = (0, _ThemeContext.useTheme)(),
      _useTheme$theme = _useTheme.theme,
      white_snow = _useTheme$theme.colors.white_snow,
      _useTheme$theme$image = _useTheme$theme.imageGallery,
      backgroundColor = _useTheme$theme$image.backgroundColor,
      pager = _useTheme$theme$image.pager,
      slide = _useTheme$theme$image.slide;

  var _useState7 = (0, _react.useState)([]),
      _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
      gridPhotos = _useState8[0],
      setGridPhotos = _useState8[1];

  var _useOverlayContext = (0, _OverlayContext.useOverlayContext)(),
      overlay = _useOverlayContext.overlay,
      translucentStatusBar = _useOverlayContext.translucentStatusBar;

  var _useImageGalleryConte = (0, _ImageGalleryContext.useImageGalleryContext)(),
      image = _useImageGalleryConte.image,
      images = _useImageGalleryConte.images,
      setImage = _useImageGalleryConte.setImage;

  var statusBarHeight = (_StatusBar$currentHei = _reactNative.StatusBar.currentHeight) != null ? _StatusBar$currentHei : 0;
  var bottomBarHeight = fullScreenHeight - measuredScreenHeight - statusBarHeight;
  var androidScreenHeightAdjustment = translucentStatusBar ? bottomBarHeight === statusBarHeight || bottomBarHeight < 0 ? 0 : statusBarHeight : bottomBarHeight === statusBarHeight || bottomBarHeight < 0 ? -statusBarHeight : 0;
  var screenHeight = isAndroid ? _reactNative.Dimensions.get('window').height + androidScreenHeightAdjustment : (0, _utils.vh)(100);
  var halfScreenHeight = screenHeight / 2;
  var quarterScreenHeight = screenHeight / 4;

  var snapPoints = _react["default"].useMemo(function () {
    return [screenHeight * 3 / 4, screenHeight - (imageGalleryGridHandleHeight != null ? imageGalleryGridHandleHeight : 40)];
  }, []);

  var bottomSheetModalRef = (0, _react.useRef)(null);

  var _useState9 = (0, _react.useState)(0),
      _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
      currentBottomSheetIndex = _useState10[0],
      setCurrentBottomSheetIndex = _useState10[1];

  var animatedBottomSheetIndex = (0, _reactNativeReanimated.useSharedValue)(0);
  var screenTranslateY = (0, _reactNativeReanimated.useSharedValue)(screenHeight);

  var showScreen = function showScreen() {
    'worklet';

    screenTranslateY.value = (0, _reactNativeReanimated.withTiming)(0, {
      duration: 250,
      easing: _reactNativeReanimated.Easing.out(_reactNativeReanimated.Easing.ease)
    });
  };

  (0, _react.useEffect)(function () {
    _reactNative.Keyboard.dismiss();

    showScreen();
  }, []);

  var _useState11 = (0, _react.useState)(screenHeight),
      _useState12 = (0, _slicedToArray2["default"])(_useState11, 2),
      currentImageHeight = _useState12[0],
      setCurrentImageHeight = _useState12[1];

  var _useState13 = (0, _react.useState)(0),
      _useState14 = (0, _slicedToArray2["default"])(_useState13, 2),
      selectedIndex = _useState14[0],
      setSelectedIndex = _useState14[1];

  var index = (0, _reactNativeReanimated.useSharedValue)(0);
  var headerFooterVisible = (0, _reactNativeReanimated.useSharedValue)(1);
  var doubleTapRef = (0, _react.useRef)(null);
  var panRef = (0, _react.useRef)(null);
  var pinchRef = (0, _react.useRef)(null);
  var singleTapRef = (0, _react.useRef)(null);
  var translateX = (0, _reactNativeReanimated.useSharedValue)(0);
  var translateY = (0, _reactNativeReanimated.useSharedValue)(0);
  var offsetScale = (0, _reactNativeReanimated.useSharedValue)(1);
  var scale = (0, _reactNativeReanimated.useSharedValue)(1);
  var translationX = (0, _reactNativeReanimated.useSharedValue)(0);
  var photos = images.reduce(function (acc, cur) {
    var _cur$attachments;

    var attachmentImages = ((_cur$attachments = cur.attachments) == null ? void 0 : _cur$attachments.filter(function (attachment) {
      var _attachment$giphy, _attachment$giphy$gip;

      return attachment.type === 'giphy' && (((_attachment$giphy = attachment.giphy) == null ? void 0 : (_attachment$giphy$gip = _attachment$giphy[giphyVersion]) == null ? void 0 : _attachment$giphy$gip.url) || attachment.thumb_url || attachment.image_url) || attachment.type === 'image' && !attachment.title_link && !attachment.og_scrape_url && (0, _getUrlOfImageAttachment.getUrlOfImageAttachment)(attachment) || (0, _native.isVideoPackageAvailable)() && attachment.type === 'video';
    })) || [];
    var attachmentPhotos = attachmentImages.map(function (a) {
      var imageUrl = (0, _getUrlOfImageAttachment.getUrlOfImageAttachment)(a);
      return {
        channelId: cur.cid,
        created_at: cur.created_at,
        id: "photoId-" + cur.id + "-" + imageUrl,
        messageId: cur.id,
        mime_type: a.mime_type,
        original_height: a.original_height,
        original_width: a.original_width,
        type: a.type,
        uri: (0, _getResizedImageUrl.getResizedImageUrl)({
          height: screenHeight,
          url: imageUrl,
          width: screenWidth
        }),
        user: cur.user,
        user_id: cur.user_id
      };
    });
    return [].concat((0, _toConsumableArray2["default"])(acc), (0, _toConsumableArray2["default"])(attachmentPhotos));
  }, []);
  var photoLength = photos.length;
  (0, _react.useEffect)(function () {
    var updatePosition = function updatePosition(newIndex) {
      'worklet';

      if (newIndex > -1) {
        index.value = newIndex;
        translationX.value = -(screenWidth + MARGIN) * newIndex;
        (0, _reactNativeReanimated.runOnJS)(setSelectedIndex)(newIndex);
      }
    };

    var newIndex = photos.findIndex(function (photo) {
      return photo.messageId === (image == null ? void 0 : image.messageId) && photo.uri === (image == null ? void 0 : image.url);
    });

    if (photoLength > 1) {
      setPaused(true);
    }

    (0, _reactNativeReanimated.runOnUI)(updatePosition)(newIndex);
  }, [image, photoLength]);
  var uriForCurrentImage = (_photos$selectedIndex = photos[selectedIndex]) == null ? void 0 : _photos$selectedIndex.uri;
  (0, _react.useEffect)(function () {
    setCurrentImageHeight(screenHeight);
    var photo = photos[index.value];
    var height = photo == null ? void 0 : photo.original_height;
    var width = photo == null ? void 0 : photo.original_width;

    if (height && width) {
      var imageHeight = Math.floor(height * (screenWidth / width));
      setCurrentImageHeight(imageHeight > screenHeight ? screenHeight : imageHeight);
    } else if (photo != null && photo.uri) {
      if (photo.type === 'image') {
        _reactNative.Image.getSize(photo.uri, function (width, height) {
          var imageHeight = Math.floor(height * (screenWidth / width));
          setCurrentImageHeight(imageHeight > screenHeight ? screenHeight : imageHeight);
        });
      }
    }
  }, [uriForCurrentImage]);

  var _useImageGalleryGestu = (0, _useImageGalleryGestures.useImageGalleryGestures)({
    currentImageHeight: currentImageHeight,
    halfScreenHeight: halfScreenHeight,
    halfScreenWidth: halfScreenWidth,
    headerFooterVisible: headerFooterVisible,
    offsetScale: offsetScale,
    overlayOpacity: overlayOpacity,
    photoLength: photoLength,
    scale: scale,
    screenHeight: screenHeight,
    screenWidth: screenWidth,
    setSelectedIndex: setSelectedIndex,
    translateX: translateX,
    translateY: translateY,
    translationX: translationX
  }),
      onDoubleTap = _useImageGalleryGestu.onDoubleTap,
      onPan = _useImageGalleryGestu.onPan,
      onPinch = _useImageGalleryGestu.onPinch,
      onSingleTap = _useImageGalleryGestu.onSingleTap;

  var headerFooterOpacity = (0, _reactNativeReanimated.useDerivedValue)(function () {
    return currentImageHeight * scale.value < screenHeight && translateY.value > 0 ? 1 - translateY.value / quarterScreenHeight : currentImageHeight * scale.value > screenHeight && translateY.value > currentImageHeight / 2 * scale.value - halfScreenHeight ? 1 - (translateY.value - (currentImageHeight / 2 * scale.value - halfScreenHeight)) / quarterScreenHeight : 1;
  }, [currentImageHeight]);
  var pagerStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      transform: [{
        scaleX: -1
      }, {
        translateX: translationX.value
      }]
    };
  }, []);
  var containerBackground = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      backgroundColor: backgroundColor || white_snow,
      opacity: headerFooterOpacity.value
    };
  }, [headerFooterOpacity]);
  var showScreenStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      transform: [{
        translateY: screenTranslateY.value
      }]
    };
  }, []);

  var closeGridView = function closeGridView() {
    var _bottomSheetModalRef$;

    if ((_bottomSheetModalRef$ = bottomSheetModalRef.current) != null && _bottomSheetModalRef$.close) {
      bottomSheetModalRef.current.close();
      setGridPhotos([]);
    }
  };

  var openGridView = function openGridView() {
    var _bottomSheetModalRef$2;

    if ((_bottomSheetModalRef$2 = bottomSheetModalRef.current) != null && _bottomSheetModalRef$2.present) {
      bottomSheetModalRef.current.present();
      setGridPhotos(photos);
    }
  };

  var videoRef = (0, _react.useRef)(null);

  var handleEnd = function handleEnd() {
    setPaused(true);
    setProgress(1);
  };

  var handleLoad = function handleLoad(payload) {
    if (payload.duration) setDuration(payload.duration);
  };

  var handleProgress = function handleProgress(data) {
    if (data.currentTime && data.seekableDuration) {
      setProgress(data.currentTime / data.seekableDuration);
    }
  };

  var handlePlayPause = function handlePlayPause() {
    if (progress === 1 && videoRef.current && videoRef.current.seek) {
      videoRef.current.seek(0);
    }

    if (progress === 1 && videoRef.current && videoRef.current.replayAsync) {
      videoRef.current.replayAsync();
    }

    setPaused(function (state) {
      return !state;
    });
  };

  var onProgressDrag = function onProgressDrag(progress) {
    if (videoRef.current && videoRef.current.seek) {
      videoRef.current.seek(progress);
    }

    if (videoRef.current && videoRef.current.setPositionAsync) {
      videoRef.current.setPositionAsync(progress * 1000);
    }
  };

  return _react["default"].createElement(_reactNativeReanimated["default"].View, {
    pointerEvents: 'auto',
    style: [_reactNative.StyleSheet.absoluteFillObject, showScreenStyle],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 496,
      columnNumber: 5
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: [_reactNative.StyleSheet.absoluteFillObject, containerBackground],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 497,
      columnNumber: 7
    }
  }), _react["default"].createElement(_reactNativeGestureHandler.TapGestureHandler, {
    minPointers: 1,
    numberOfTaps: 1,
    onGestureEvent: onSingleTap,
    ref: singleTapRef,
    waitFor: [panRef, pinchRef, doubleTapRef],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 498,
      columnNumber: 7
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: _reactNative.StyleSheet.absoluteFillObject,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 505,
      columnNumber: 9
    }
  }, _react["default"].createElement(_reactNativeGestureHandler.TapGestureHandler, {
    maxDeltaX: 8,
    maxDeltaY: 8,
    maxDist: 8,
    minPointers: 1,
    numberOfTaps: 2,
    onGestureEvent: onDoubleTap,
    ref: doubleTapRef,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 506,
      columnNumber: 11
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: _reactNative.StyleSheet.absoluteFillObject,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 515,
      columnNumber: 13
    }
  }, _react["default"].createElement(_reactNativeGestureHandler.PinchGestureHandler, {
    onGestureEvent: onPinch,
    ref: pinchRef,
    simultaneousHandlers: [panRef],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 516,
      columnNumber: 15
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: _reactNative.StyleSheet.absoluteFill,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 521,
      columnNumber: 17
    }
  }, _react["default"].createElement(_reactNativeGestureHandler.PanGestureHandler, {
    enabled: overlay === 'gallery',
    maxPointers: isAndroid ? undefined : 1,
    minDist: 10,
    onGestureEvent: onPan,
    ref: panRef,
    simultaneousHandlers: [pinchRef],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 522,
      columnNumber: 19
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: _reactNative.StyleSheet.absoluteFill,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 530,
      columnNumber: 21
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: [styles.animatedContainer, pagerStyle, pager, {
      transform: [{
        scaleX: -1
      }, {
        translateX: translationX.value
      }]
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 531,
      columnNumber: 23
    }
  }, photos.map(function (photo, i) {
    return photo.type === 'video' ? _react["default"].createElement(_AnimatedGalleryVideo.AnimatedGalleryVideo, {
      handleEnd: handleEnd,
      handleLoad: handleLoad,
      handleProgress: handleProgress,
      index: i,
      key: photo.uri + "-" + i,
      offsetScale: offsetScale,
      paused: paused,
      previous: selectedIndex > i,
      scale: scale,
      screenHeight: screenHeight,
      selected: selectedIndex === i,
      shouldRender: Math.abs(selectedIndex - i) < 4,
      source: {
        uri: photo.uri
      },
      style: [{
        height: screenHeight * 8,
        marginRight: MARGIN,
        width: screenWidth * 8
      }, slide],
      translateX: translateX,
      translateY: translateY,
      videoRef: videoRef,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 548,
        columnNumber: 29
      }
    }) : _react["default"].createElement(_AnimatedGalleryImage.AnimatedGalleryImage, {
      index: i,
      key: photo.uri + "-" + i,
      offsetScale: offsetScale,
      photo: photo,
      previous: selectedIndex > i,
      scale: scale,
      screenHeight: screenHeight,
      selected: selectedIndex === i,
      shouldRender: Math.abs(selectedIndex - i) < 4,
      style: [{
        height: screenHeight * 8,
        marginRight: MARGIN,
        width: screenWidth * 8
      }, slide],
      translateX: translateX,
      translateY: translateY,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 575,
        columnNumber: 29
      }
    });
  })))))))))), _react["default"].createElement(_ImageGalleryHeader.ImageGalleryHeader, (0, _extends2["default"])({
    opacity: headerFooterOpacity,
    photo: photos[selectedIndex],
    visible: headerFooterVisible
  }, imageGalleryCustomComponents == null ? void 0 : imageGalleryCustomComponents.header, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 607,
      columnNumber: 7
    }
  })), _react["default"].createElement(_ImageGalleryFooter.ImageGalleryFooter, (0, _extends2["default"])({
    duration: duration,
    onPlayPause: handlePlayPause,
    onProgressDrag: onProgressDrag,
    opacity: headerFooterOpacity,
    openGridView: openGridView,
    paused: paused,
    photo: photos[selectedIndex],
    photoLength: photoLength,
    progress: progress,
    selectedIndex: selectedIndex,
    visible: headerFooterVisible
  }, imageGalleryCustomComponents == null ? void 0 : imageGalleryCustomComponents.footer, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 613,
      columnNumber: 7
    }
  })), _react["default"].createElement(_ImageGalleryOverlay.ImageGalleryOverlay, {
    animatedBottomSheetIndex: animatedBottomSheetIndex,
    closeGridView: closeGridView,
    currentBottomSheetIndex: currentBottomSheetIndex,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 628,
      columnNumber: 7
    }
  }), _react["default"].createElement(_bottomSheet.BottomSheetModalProvider, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 633,
      columnNumber: 7
    }
  }, _react["default"].createElement(_bottomSheet.BottomSheetModal, {
    animatedIndex: animatedBottomSheetIndex,
    enablePanDownToClose: true,
    handleComponent: function handleComponent() {
      return _react["default"].createElement(_ImageGridHandle.ImageGridHandle, (0, _extends2["default"])({
        closeGridView: closeGridView
      }, imageGalleryCustomComponents == null ? void 0 : imageGalleryCustomComponents.gridHandle, {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 638,
          columnNumber: 13
        }
      }));
    },
    handleHeight: imageGalleryGridHandleHeight != null ? imageGalleryGridHandleHeight : 40,
    index: 0,
    onChange: function onChange(index) {
      return setCurrentBottomSheetIndex(index);
    },
    ref: bottomSheetModalRef,
    snapPoints: imageGalleryGridSnapPoints || snapPoints,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 634,
      columnNumber: 9
    }
  }, _react["default"].createElement(_ImageGrid.ImageGrid, (0, _extends2["default"])({
    closeGridView: closeGridView,
    numberOfImageGalleryGridColumns: numberOfImageGalleryGridColumns,
    photos: gridPhotos,
    setImage: setImage
  }, imageGalleryCustomComponents == null ? void 0 : imageGalleryCustomComponents.grid, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 649,
      columnNumber: 11
    }
  })))));
};

exports.ImageGallery = ImageGallery;

var clamp = function clamp(value, lowerBound, upperBound) {
  'worklet';

  return Math.min(Math.max(lowerBound, value), upperBound);
};

exports.clamp = clamp;

var styles = _reactNative.StyleSheet.create({
  animatedContainer: {
    alignItems: 'center',
    flexDirection: 'row'
  }
});

ImageGallery.displayName = 'ImageGallery{imageGallery}';
//# sourceMappingURL=ImageGallery.js.map