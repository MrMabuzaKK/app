var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressControl = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _ThemeContext = require("../../../contexts/themeContext/ThemeContext");

var _this = this,
    _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/ImageGallery/components/ProgressControl.tsx";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var width = 180;
var height = 2;

var styles = _reactNative.StyleSheet.create({
  containerStyle: {
    borderRadius: 50,
    height: height,
    width: width
  },
  innerStyle: {
    height: height
  },
  progressControlThumbStyle: {
    backgroundColor: '#fff',
    borderRadius: 5,
    height: 20,
    top: -11,
    width: 4
  }
});

var ProgressControlThumb = function ProgressControlThumb() {
  return _react["default"].createElement(_reactNative.View, {
    style: styles.progressControlThumbStyle,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 41,
      columnNumber: 36
    }
  });
};

var ProgressControl = _react["default"].memo(function (props) {
  var duration = props.duration,
      onPlayPause = props.onPlayPause,
      onProgressDrag = props.onProgressDrag,
      progress = props.progress;

  var _useTheme = (0, _ThemeContext.useTheme)(),
      _useTheme$theme$color = _useTheme.theme.colors,
      grey_dark = _useTheme$theme$color.grey_dark,
      white_snow = _useTheme$theme$color.white_snow;

  var state = (0, _reactNativeReanimated.useSharedValue)(0);
  var translateX = (0, _reactNativeReanimated.useSharedValue)(0);
  (0, _react.useEffect)(function () {
    state.value = progress * width;
    translateX.value = progress * width;
  }, [progress]);
  var animatedStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      backgroundColor: white_snow,
      width: state.value
    };
  });
  var thumbStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      transform: [{
        translateX: state.value
      }]
    };
  });
  var onGestureEvent = (0, _reactNativeReanimated.useAnimatedGestureHandler)({
    onActive: function onActive(event) {
      state.value = translateX.value + event.translationX;
      if (state.value > width) state.value = width;else if (state.value < 0) state.value = 0;
    },
    onFinish: function onFinish() {
      translateX.value = state.value;
      var dragFinishLocationInSeconds = state.value / width * duration;
      (0, _reactNativeReanimated.runOnJS)(onProgressDrag)(dragFinishLocationInSeconds);
      (0, _reactNativeReanimated.runOnJS)(onPlayPause)();
    },
    onStart: function onStart() {
      (0, _reactNativeReanimated.runOnJS)(onPlayPause)();
      (0, _reactNativeReanimated.cancelAnimation)(translateX);
      state.value = translateX.value;
    }
  }, [duration]);
  return _react["default"].createElement(_reactNative.View, {
    style: [styles.containerStyle, {
      backgroundColor: grey_dark
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91,
      columnNumber: 7
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: [styles.innerStyle, animatedStyles],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 92,
      columnNumber: 9
    }
  }), _react["default"].createElement(_reactNativeGestureHandler.PanGestureHandler, {
    maxPointers: 1,
    onGestureEvent: onGestureEvent,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 94,
      columnNumber: 9
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: [thumbStyles],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 95,
      columnNumber: 11
    }
  }, _react["default"].createElement(ProgressControlThumb, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96,
      columnNumber: 13
    }
  }))));
}, function (prevProps, nextProps) {
  if (prevProps.duration === nextProps.duration && prevProps.progress === nextProps.progress) return true;else return false;
});

exports.ProgressControl = ProgressControl;
//# sourceMappingURL=ProgressControl.js.map