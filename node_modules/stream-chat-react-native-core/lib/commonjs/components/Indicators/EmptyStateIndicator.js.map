{"version":3,"sources":["EmptyStateIndicator.tsx"],"names":["width","styles","StyleSheet","create","channelContainer","alignItems","flex","justifyContent","channelDetails","fontSize","textAlign","channelTitle","paddingBottom","paddingTop","EmptyStateIndicator","listType","theme","colors","black","grey","grey_gainsboro","emptyStateIndicator","color"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;AAEA,IAAMA,KAAK,GAAG,eAAG,EAAH,CAAd;;AAEA,IAAMC,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,UAAU,EAAE,QADI;AAEhBC,IAAAA,IAAI,EAAE,CAFU;AAGhBC,IAAAA,cAAc,EAAE;AAHA,GADa;AAM/BC,EAAAA,cAAc,EAAE;AACdC,IAAAA,QAAQ,EAAE,EADI;AAEdC,IAAAA,SAAS,EAAE,QAFG;AAGdV,IAAAA,KAAK,EAAE,eAAG,EAAH;AAHO,GANe;AAW/BW,EAAAA,YAAY,EAAE;AACZF,IAAAA,QAAQ,EAAE,EADE;AAEZG,IAAAA,aAAa,EAAE,CAFH;AAGZC,IAAAA,UAAU,EAAE;AAHA;AAXiB,CAAlB,CAAf;;AAsBO,IAAMC,mBAA8C,GAAG,SAAjDA,mBAAiD,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC9E,kBAKI,6BALJ;AAAA,kCACEC,KADF;AAAA,8CAEIC,MAFJ;AAAA,MAEcC,KAFd,yBAEcA,KAFd;AAAA,MAEqBC,IAFrB,yBAEqBA,IAFrB;AAAA,MAE2BC,cAF3B,yBAE2BA,cAF3B;AAAA,8CAGIC,mBAHJ;AAAA,MAG2BjB,gBAH3B,yBAG2BA,gBAH3B;AAAA,MAG6CI,cAH7C,yBAG6CA,cAH7C;AAAA,MAG6DG,YAH7D,yBAG6DA,YAH7D;;AAOA,UAAQI,QAAR;AACE,SAAK,SAAL;AACE,aACE,gCAAC,iBAAD;AAAM,QAAA,KAAK,EAAE,CAACd,MAAM,CAACG,gBAAR,EAA0BA,gBAA1B,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,gCAAC,wBAAD;AAAa,QAAA,MAAM,EAAEJ,KAArB;AAA4B,QAAA,QAAQ,EAAEoB,cAAtC;AAAsD,QAAA,KAAK,EAAEpB,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,gCAAC,iBAAD;AACE,QAAA,KAAK,EAAE,CAACC,MAAM,CAACU,YAAR,EAAsB;AAAEW,UAAAA,KAAK,EAAEJ;AAAT,SAAtB,EAAwCP,YAAxC,CADT;AAEE,QAAA,MAAM,EAAC,2BAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,uBAJH,CAFF,EAQE,gCAAC,iBAAD;AACE,QAAA,KAAK,EAAE,CAACV,MAAM,CAACO,cAAR,EAAwB;AAAEc,UAAAA,KAAK,EAAEH;AAAT,SAAxB,EAAyCX,cAAzC,CADT;AAEE,QAAA,MAAM,EAAC,6BAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,mDAJH,CARF,CADF;;AAiBF,SAAK,SAAL;AACE,aAAO,IAAP;;AACF;AACE,aAAO,gCAAC,iBAAD;AAAM,QAAA,KAAK,EAAE;AAAEc,UAAAA,KAAK,EAAEJ;AAAT,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AAtBJ;AAwBD,CAhCM","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { MessageIcon } from '../../icons/MessageIcon';\nimport { vw } from '../../utils/utils';\n\nconst width = vw(33);\n\nconst styles = StyleSheet.create({\n  channelContainer: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  channelDetails: {\n    fontSize: 14,\n    textAlign: 'center',\n    width: vw(66),\n  },\n  channelTitle: {\n    fontSize: 16,\n    paddingBottom: 8,\n    paddingTop: 16,\n  },\n});\n\nexport type EmptyStateProps = {\n  listType?: 'channel' | 'message' | 'default';\n};\n\nexport const EmptyStateIndicator: React.FC<EmptyStateProps> = ({ listType }) => {\n  const {\n    theme: {\n      colors: { black, grey, grey_gainsboro },\n      emptyStateIndicator: { channelContainer, channelDetails, channelTitle },\n    },\n  } = useTheme();\n\n  switch (listType) {\n    case 'channel':\n      return (\n        <View style={[styles.channelContainer, channelContainer]}>\n          <MessageIcon height={width} pathFill={grey_gainsboro} width={width} />\n          <Text\n            style={[styles.channelTitle, { color: black }, channelTitle]}\n            testID='empty-channel-state-title'\n          >\n            {\"Let's start chatting!\"}\n          </Text>\n          <Text\n            style={[styles.channelDetails, { color: grey }, channelDetails]}\n            testID='empty-channel-state-details'\n          >\n            {'How about sending your first message to a friend?'}\n          </Text>\n        </View>\n      );\n    case 'message':\n      return null;\n    default:\n      return <Text style={{ color: black }}>No items exist</Text>;\n  }\n};\n"]}