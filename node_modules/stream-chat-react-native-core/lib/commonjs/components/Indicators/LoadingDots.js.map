{"version":3,"sources":["LoadingDots.tsx"],"names":["LoadingDots","props","diameter","duration","numberOfDots","spacingProp","spacing","style","theme","loadingDots","container","halfSpacing","offsetLength","flexDirection","Array","from","map","_item","index","marginRight","marginLeft","marginHorizontal"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;;;;AAUO,IAAMA,WAA4B,GAAG,SAA/BA,WAA+B,CAACC,KAAD,EAAW;AACrD,wBAAyFA,KAAzF,CAAQC,QAAR;AAAA,MAAQA,QAAR,gCAAmB,CAAnB;AAAA,wBAAyFD,KAAzF,CAAsBE,QAAtB;AAAA,MAAsBA,QAAtB,gCAAiC,IAAjC;AAAA,4BAAyFF,KAAzF,CAAuCG,YAAvC;AAAA,MAAuCA,YAAvC,oCAAsD,CAAtD;AAAA,MAAkEC,WAAlE,GAAyFJ,KAAzF,CAAyDK,OAAzD;AAAA,MAA+EC,KAA/E,GAAyFN,KAAzF,CAA+EM,KAA/E;;AAEA,kBAII,6BAJJ;AAAA,wCACEC,KADF,CAEIC,WAFJ;AAAA,MAEmBC,SAFnB,yBAEmBA,SAFnB;AAAA,MAE8BJ,OAF9B,yBAE8BA,OAF9B;;AAMA,MAAMK,WAAW,GAAGN,WAAW,GAAGA,WAAW,GAAG,CAAjB,GAAqBC,OAAO,GAAG,CAA9D;AACA,MAAMM,YAAY,GAAGT,QAAQ,GAAGC,YAAhC;AAEA,SACE,gCAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAAC;AAAES,MAAAA,aAAa,EAAE;AAAjB,KAAD,EAA2BH,SAA3B,EAAsCH,KAAtC,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACV,YAAD,CAAhB,EAAgCY,GAAhC,CAAoC,UAACC,KAAD,EAAQC,KAAR;AAAA,WACnC,gCAAC,sBAAD;AACE,MAAA,QAAQ,EAAEhB,QADZ;AAEE,MAAA,QAAQ,EAAEC,QAFZ;AAGE,MAAA,GAAG,EAAEe,KAHP;AAIE,MAAA,MAAM,EAAEf,QAAQ,GAAGS,YAAY,IAAIM,KAAK,GAAG,CAAZ,CAJjC;AAKE,MAAA,KAAK,EACHA,KAAK,KAAK,CAAV,GACI;AAAEC,QAAAA,WAAW,EAAER;AAAf,OADJ,GAEIO,KAAK,KAAKd,YAAY,GAAG,CAAzB,GACA;AAAEgB,QAAAA,UAAU,EAAET;AAAd,OADA,GAEA;AAAEU,QAAAA,gBAAgB,EAAEV;AAApB,OAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADmC;AAAA,GAApC,CADH,CADF;AAmBD,CA/BM","sourcesContent":["import React from 'react';\nimport { StyleProp, View, ViewStyle } from 'react-native';\n\nimport { LoadingDot } from './LoadingDot';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\n\ntype Props = {\n  diameter?: number;\n  duration?: number;\n  numberOfDots?: number;\n  spacing?: number;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const LoadingDots: React.FC<Props> = (props) => {\n  const { diameter = 4, duration = 1500, numberOfDots = 3, spacing: spacingProp, style } = props;\n\n  const {\n    theme: {\n      loadingDots: { container, spacing },\n    },\n  } = useTheme();\n\n  const halfSpacing = spacingProp ? spacingProp / 2 : spacing / 2;\n  const offsetLength = duration / numberOfDots;\n\n  return (\n    <View style={[{ flexDirection: 'row' }, container, style]}>\n      {Array.from(Array(numberOfDots)).map((_item, index) => (\n        <LoadingDot\n          diameter={diameter}\n          duration={duration}\n          key={index}\n          offset={duration - offsetLength * (index + 1)}\n          style={\n            index === 0\n              ? { marginRight: halfSpacing }\n              : index === numberOfDots - 1\n              ? { marginLeft: halfSpacing }\n              : { marginHorizontal: halfSpacing }\n          }\n        />\n      ))}\n    </View>\n  );\n};\n"]}