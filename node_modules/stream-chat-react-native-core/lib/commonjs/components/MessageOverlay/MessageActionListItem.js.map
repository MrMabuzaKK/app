{"version":3,"sources":["MessageActionListItem.tsx"],"names":["styles","StyleSheet","create","bottomBorder","borderBottomWidth","container","borderRadius","marginTop","maxWidth","row","alignItems","flexDirection","justifyContent","minWidth","paddingHorizontal","paddingVertical","titleStyle","paddingLeft","MessageActionListItemWithContext","props","action","actionType","icon","index","length","title","theme","colors","black","border","messageActions","overlay","animatedStyle","onTap","borderBottomColor","actionContainer","color","messageActionIsEqual","prevProps","nextProps","MemoizedMessageActionListItem","React","memo","MessageActionListItem"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, Text, TextStyle, View } from 'react-native';\nimport { TapGestureHandler } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\n\nimport { useMessageActionAnimation } from './hooks/useMessageActionAnimation';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport { vw } from '../../utils/utils';\nimport type { MessageOverlayPropsWithContext } from '../MessageOverlay/MessageOverlay';\n\nconst styles = StyleSheet.create({\n  bottomBorder: {\n    borderBottomWidth: 1,\n  },\n  container: {\n    borderRadius: 16,\n    marginTop: 8,\n    maxWidth: 275,\n  },\n  row: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    minWidth: vw(65),\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  titleStyle: {\n    paddingLeft: 20,\n  },\n});\n\nexport type ActionType =\n  | 'blockUser'\n  | 'copyMessage'\n  | 'deleteMessage'\n  | 'editMessage'\n  | 'flagMessage'\n  | 'muteUser'\n  | 'pinMessage'\n  | 'selectReaction'\n  | 'reply'\n  | 'retry'\n  | 'quotedReply'\n  | 'threadReply'\n  | 'unpinMessage';\n\nexport type MessageActionType = {\n  action: () => void;\n  actionType: ActionType;\n  title: string;\n  icon?: React.ReactElement;\n  titleStyle?: StyleProp<TextStyle>;\n};\n\nexport type MessageActionListItemProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = MessageActionType &\n  Pick<\n    MessageOverlayPropsWithContext<StreamChatGenerics>,\n    'error' | 'isMyMessage' | 'isThreadMessage' | 'message' | 'messageReactions'\n  > & {\n    index: number;\n    length: number;\n  };\n\nconst MessageActionListItemWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageActionListItemProps<StreamChatGenerics>,\n) => {\n  const { action, actionType, icon, index, length, title, titleStyle } = props;\n\n  const {\n    theme: {\n      colors: { black, border },\n      overlay: { messageActions },\n    },\n  } = useTheme();\n\n  const { animatedStyle, onTap } = useMessageActionAnimation({ action });\n\n  return (\n    <TapGestureHandler onHandlerStateChange={onTap}>\n      <Animated.View\n        style={[\n          styles.row,\n          index !== length - 1 ? { ...styles.bottomBorder, borderBottomColor: border } : {},\n          animatedStyle,\n          messageActions.actionContainer,\n        ]}\n        testID={`${actionType}-list-item`}\n      >\n        <View style={messageActions.icon}>{icon}</View>\n        <Text style={[styles.titleStyle, messageActions.title, { color: black }, titleStyle]}>\n          {title}\n        </Text>\n      </Animated.View>\n    </TapGestureHandler>\n  );\n};\n\nconst messageActionIsEqual = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  prevProps: MessageActionListItemProps<StreamChatGenerics>,\n  nextProps: MessageActionListItemProps<StreamChatGenerics>,\n) => prevProps.length === nextProps.length;\n\nexport const MemoizedMessageActionListItem = React.memo(\n  MessageActionListItemWithContext,\n  messageActionIsEqual,\n) as typeof MessageActionListItemWithContext;\n\n/**\n * MessageActionListItem - A high-level component that implements all the logic required for a `MessageAction` in a `MessageActionList`\n */\nexport const MessageActionListItem = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageActionListItemProps<StreamChatGenerics>,\n) => <MemoizedMessageActionListItem {...props} />;\n"]}