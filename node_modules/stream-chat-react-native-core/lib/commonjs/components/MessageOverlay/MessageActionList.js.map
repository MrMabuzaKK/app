{"version":3,"sources":["MessageActionList.tsx"],"names":["styles","StyleSheet","create","bottomBorder","borderBottomWidth","container","borderRadius","marginTop","maxWidth","row","alignItems","flexDirection","justifyContent","minWidth","paddingHorizontal","paddingVertical","titleStyle","paddingLeft","MessageActionListWithContext","props","alignment","messageActions","showScreen","MessageActionListItem","DefaultMessageActionListItem","isMyMessage","message","messageReactions","error","isThreadMessage","messageActionProps","white_snow","theme","colors","height","width","showScreenStyle","transform","translateY","value","translateX","scale","layout","nativeEvent","backgroundColor","map","messageAction","index","title","length","areEqual","prevProps","nextProps","prevAlignment","prevMessageActions","nextAlignment","nextMessageActions","messageActionsEqual","alignmentEqual","MemoizedMessageActionList","React","memo","MessageActionList","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, ViewStyle } from 'react-native';\nimport Animated, { interpolate, useAnimatedStyle, useSharedValue } from 'react-native-reanimated';\n\nimport { MessageActionListItem as DefaultMessageActionListItem } from './MessageActionListItem';\n\nimport {\n  MessageOverlayData,\n  useMessageOverlayContext,\n} from '../../contexts/messageOverlayContext/MessageOverlayContext';\nimport type { OverlayProviderProps } from '../../contexts/overlayContext/OverlayContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport { vw } from '../../utils/utils';\n\nconst styles = StyleSheet.create({\n  bottomBorder: {\n    borderBottomWidth: 1,\n  },\n  container: {\n    borderRadius: 16,\n    marginTop: 8,\n    maxWidth: 275,\n  },\n  row: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    minWidth: vw(65),\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  titleStyle: {\n    paddingLeft: 20,\n  },\n});\n\nexport type MessageActionListPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<\n  OverlayProviderProps<StreamChatGenerics>,\n  | 'MessageActionListItem'\n  | 'error'\n  | 'isMyMessage'\n  | 'isThreadMessage'\n  | 'message'\n  | 'messageReactions'\n> &\n  Pick<MessageOverlayData<StreamChatGenerics>, 'alignment' | 'messageActions'> & {\n    showScreen: Animated.SharedValue<number>;\n  };\n\nconst MessageActionListWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageActionListPropsWithContext<StreamChatGenerics>,\n) => {\n  const {\n    alignment,\n    messageActions,\n    showScreen,\n    MessageActionListItem = DefaultMessageActionListItem,\n    isMyMessage,\n    message,\n    messageReactions,\n    error,\n    isThreadMessage,\n  } = props;\n\n  const messageActionProps = {\n    error,\n    isMyMessage,\n    isThreadMessage,\n    message,\n    messageReactions,\n  };\n\n  const {\n    theme: {\n      colors: { white_snow },\n    },\n  } = useTheme();\n\n  const height = useSharedValue(0);\n  const width = useSharedValue(0);\n\n  const showScreenStyle = useAnimatedStyle<ViewStyle>(\n    () => ({\n      transform: [\n        {\n          translateY: interpolate(showScreen.value, [0, 1], [-height.value / 2, 0]),\n        },\n        {\n          translateX: interpolate(\n            showScreen.value,\n            [0, 1],\n            [alignment === 'left' ? -width.value / 2 : width.value / 2, 0],\n          ),\n        },\n        {\n          scale: showScreen.value,\n        },\n      ],\n    }),\n    [alignment],\n  );\n\n  return (\n    <Animated.View\n      onLayout={({ nativeEvent: { layout } }) => {\n        width.value = layout.width;\n        height.value = layout.height;\n      }}\n      style={[styles.container, { backgroundColor: white_snow }, showScreenStyle]}\n      testID='message-action-list'\n    >\n      {messageActions?.map((messageAction, index) => (\n        <MessageActionListItem\n          key={messageAction.title}\n          {...messageActionProps}\n          {...{ ...messageAction, index, length: messageActions.length }}\n        />\n      ))}\n    </Animated.View>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: MessageActionListPropsWithContext<StreamChatGenerics>,\n  nextProps: MessageActionListPropsWithContext<StreamChatGenerics>,\n) => {\n  const { alignment: prevAlignment, messageActions: prevMessageActions } = prevProps;\n  const { alignment: nextAlignment, messageActions: nextMessageActions } = nextProps;\n\n  const messageActionsEqual = prevMessageActions?.length === nextMessageActions?.length;\n  if (!messageActionsEqual) return false;\n\n  const alignmentEqual = prevAlignment === nextAlignment;\n  if (!alignmentEqual) return false;\n\n  return true;\n};\n\nconst MemoizedMessageActionList = React.memo(\n  MessageActionListWithContext,\n  areEqual,\n) as typeof MessageActionListWithContext;\n\nexport type MessageActionListProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<Omit<MessageActionListPropsWithContext<StreamChatGenerics>, 'showScreen'>> &\n  Pick<\n    MessageActionListPropsWithContext<StreamChatGenerics>,\n    'showScreen' | 'message' | 'isMyMessage' | 'error' | 'isThreadMessage' | 'messageReactions'\n  >;\n\n/**\n * MessageActionList - A high level component which implements all the logic required for MessageActions\n */\nexport const MessageActionList = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageActionListProps<StreamChatGenerics>,\n) => {\n  const { data } = useMessageOverlayContext<StreamChatGenerics>();\n\n  const { alignment, messageActions } = data || {};\n\n  return <MemoizedMessageActionList {...{ alignment, messageActions }} {...props} />;\n};\n"]}