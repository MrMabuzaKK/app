{"version":3,"sources":["InlineDateSeparator.tsx"],"names":["styles","StyleSheet","create","container","alignItems","alignSelf","borderRadius","height","justifyContent","marginVertical","paddingHorizontal","text","fontSize","textAlign","textAlignVertical","InlineDateSeparator","date","theme","colors","overlay","white","inlineDateSeparator","tDateTimeParser","dateFormat","getFullYear","Date","tDate","dateString","format","toDateString","backgroundColor","color"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;AAKA,IAAMA,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,SAAS,EAAE,QAFF;AAGTC,IAAAA,YAAY,EAAE,CAHL;AAITC,IAAAA,MAAM,EAAE,EAJC;AAKTC,IAAAA,cAAc,EAAE,QALP;AAMTC,IAAAA,cAAc,EAAE,CANP;AAOTC,IAAAA,iBAAiB,EAAE;AAPV,GADoB;AAU/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,EADN;AAEJC,IAAAA,SAAS,EAAE,QAFP;AAGJC,IAAAA,iBAAiB,EAAE;AAHf;AAVyB,CAAlB,CAAf;;AAqBO,IAAMC,mBAAuD,GAAG,SAA1DA,mBAA0D,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AACnF,kBAKI,6BALJ;AAAA,kCACEC,KADF;AAAA,8CAEIC,MAFJ;AAAA,MAEcC,OAFd,yBAEcA,OAFd;AAAA,MAEuBC,KAFvB,yBAEuBA,KAFvB;AAAA,8CAGIC,mBAHJ;AAAA,MAG2BlB,SAH3B,yBAG2BA,SAH3B;AAAA,MAGsCQ,IAHtC,yBAGsCA,IAHtC;;AAMA,8BAA4B,gDAA5B;AAAA,MAAQW,eAAR,yBAAQA,eAAR;;AAEA,MAAI,CAACN,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,MAAMO,UAAU,GAAGP,IAAI,CAACQ,WAAL,OAAuB,IAAIC,IAAJ,GAAWD,WAAX,EAAvB,GAAkD,OAAlD,GAA4D,aAA/E;AACA,MAAME,KAAK,GAAGJ,eAAe,CAACN,IAAD,CAA7B;AACA,MAAMW,UAAU,GAAG,uCAAcD,KAAd,IACfA,KAAK,CAACE,MAAN,CAAaL,UAAb,CADe,GAEf,IAAIE,IAAJ,CAASC,KAAT,EAAgBG,YAAhB,EAFJ;AAIA,SACE,gCAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CAAC7B,MAAM,CAACG,SAAR,EAAmB;AAAE2B,MAAAA,eAAe,EAAEX;AAAnB,KAAnB,EAAiDhB,SAAjD,CADT;AAEE,IAAA,MAAM,EAAC,gBAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,gCAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACH,MAAM,CAACW,IAAR,EAAc;AAAEoB,MAAAA,KAAK,EAAEX;AAAT,KAAd,EAAgCT,IAAhC,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqDgB,UAArD,CAJF,CADF;AAQD,CA3BM","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport {\n  isDayOrMoment,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    borderRadius: 8,\n    height: 16,\n    justifyContent: 'center',\n    marginVertical: 4,\n    paddingHorizontal: 8,\n  },\n  text: {\n    fontSize: 12,\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport type InlineDateSeparatorProps = {\n  date?: Date;\n};\n\nexport const InlineDateSeparator: React.FC<InlineDateSeparatorProps> = ({ date }) => {\n  const {\n    theme: {\n      colors: { overlay, white },\n      inlineDateSeparator: { container, text },\n    },\n  } = useTheme();\n  const { tDateTimeParser } = useTranslationContext();\n\n  if (!date) {\n    return null;\n  }\n\n  const dateFormat = date.getFullYear() === new Date().getFullYear() ? 'MMM D' : 'MMM D, YYYY';\n  const tDate = tDateTimeParser(date);\n  const dateString = isDayOrMoment(tDate)\n    ? tDate.format(dateFormat)\n    : new Date(tDate).toDateString();\n\n  return (\n    <View\n      style={[styles.container, { backgroundColor: overlay }, container]}\n      testID='date-separator'\n    >\n      <Text style={[styles.text, { color: white }, text]}>{dateString}</Text>\n    </View>\n  );\n};\n"]}