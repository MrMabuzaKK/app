{"version":3,"sources":["MessageSystem.tsx"],"names":["styles","StyleSheet","create","container","alignItems","flexDirection","justifyContent","marginBottom","line","flex","height","text","fontSize","fontWeight","textAlign","textContainer","marginTop","MessageSystem","props","formatDate","message","style","theme","colors","grey","grey_whisper","messageList","messageSystem","dateText","tDateTimeParser","createdAt","created_at","parsedDate","date","calendar","toUpperCase","backgroundColor","color","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, Text, View, ViewStyle } from 'react-native';\n\nimport type { MessageType } from './hooks/useMessageList';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport {\n  isDayOrMoment,\n  TDateTimeParserInput,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: 10,\n  },\n  line: {\n    flex: 1,\n    height: 0.5,\n  },\n  text: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  textContainer: {\n    flex: 3,\n    marginTop: 10,\n  },\n});\n\nexport type MessageSystemProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  /** Current [message object](https://getstream.io/chat/docs/#message_format) */\n  message: MessageType<StreamChatGenerics>;\n  /**\n   * Formatter function for date object.\n   *\n   * @param date TDateTimeParserInput object of message\n   * @returns string\n   */\n  formatDate?: (date: TDateTimeParserInput) => string;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to display system message. e.g, when someone updates the channel,\n * they can attach a message with that update. That message will be available\n * in message list as (type) system message.\n */\nexport const MessageSystem = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageSystemProps<StreamChatGenerics>,\n) => {\n  const { formatDate, message, style } = props;\n\n  const {\n    theme: {\n      colors: { grey, grey_whisper },\n      messageList: {\n        messageSystem: { container, dateText, line, text, textContainer },\n      },\n    },\n  } = useTheme();\n  const { tDateTimeParser } = useTranslationContext();\n\n  const createdAt = message.created_at;\n  const parsedDate = tDateTimeParser(createdAt);\n  const date =\n    formatDate && createdAt\n      ? formatDate(createdAt)\n      : parsedDate && isDayOrMoment(parsedDate)\n      ? parsedDate.calendar().toUpperCase()\n      : parsedDate;\n\n  return (\n    <View style={[styles.container, style, container]} testID='message-system'>\n      <View style={[styles.line, { backgroundColor: grey_whisper }, line]} />\n      <View style={[styles.textContainer, textContainer]}>\n        <Text style={[styles.text, { color: grey }, text]}>\n          {message.text?.toUpperCase() || ''}\n        </Text>\n        <Text style={[styles.text, { color: grey }, dateText]}>{date}</Text>\n      </View>\n      <View style={[styles.line, { backgroundColor: grey_whisper }, line]} />\n    </View>\n  );\n};\n\nMessageSystem.displayName = 'MessageSystem{messageList{messageSystem}}';\n"]}