{"version":3,"sources":["useMessageList.ts"],"names":["isMessageWithStylesReadByAndDateSeparator","message","readBy","undefined","useMessageList","params","deletedMessagesVisibilityType","inverted","noGroupByUser","threadList","client","hideDateSeparators","maxTimeBetweenGroupedMessages","read","messages","threadMessages","messageList","readList","dateSeparators","userId","userID","messageGroupStyles","readData","messagesWithStylesReadByAndDateSeparator","filter","msg","isMessageTypeDeleted","type","user","id","map","dateSeparator","groupStyles","reverse"],"mappings":"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","sourcesContent":["import type { ChannelState, MessageResponse } from 'stream-chat';\n\nimport {\n  ChannelContextValue,\n  useChannelContext,\n} from '../../../contexts/channelContext/ChannelContext';\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\nimport { usePaginatedMessageListContext } from '../../../contexts/paginatedMessageListContext/PaginatedMessageListContext';\nimport { useThreadContext } from '../../../contexts/threadContext/ThreadContext';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\nimport { getDateSeparators } from '../utils/getDateSeparators';\nimport { getGroupStyles } from '../utils/getGroupStyles';\nimport { getReadStates } from '../utils/getReadStates';\n\nexport type UseMessageListParams = {\n  deletedMessagesVisibilityType?: 'always' | 'never' | 'receiver' | 'sender';\n  inverted?: boolean;\n  noGroupByUser?: boolean;\n  threadList?: boolean;\n};\n\nexport type GroupType = 'bottom' | 'middle' | 'single' | 'top';\n\nexport type MessagesWithStylesReadByAndDateSeparator<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = MessageResponse<StreamChatGenerics> & {\n  groupStyles: GroupType[];\n  readBy: boolean | number;\n  dateSeparator?: Date;\n};\n\nexport type MessageType<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> =\n  | ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>\n  | MessagesWithStylesReadByAndDateSeparator<StreamChatGenerics>;\n\n// Type guards to check MessageType\nexport const isMessageWithStylesReadByAndDateSeparator = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  message: MessageType<StreamChatGenerics>,\n): message is MessagesWithStylesReadByAndDateSeparator<StreamChatGenerics> =>\n  (message as MessagesWithStylesReadByAndDateSeparator<StreamChatGenerics>).readBy !== undefined;\n\nexport const useMessageList = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  params: UseMessageListParams,\n) => {\n  const { deletedMessagesVisibilityType, inverted, noGroupByUser, threadList } = params;\n  const { client } = useChatContext<StreamChatGenerics>();\n  const { hideDateSeparators, maxTimeBetweenGroupedMessages, read } =\n    useChannelContext<StreamChatGenerics>();\n  const { messages } = usePaginatedMessageListContext<StreamChatGenerics>();\n  const { threadMessages } = useThreadContext<StreamChatGenerics>();\n\n  const messageList = threadList ? threadMessages : messages;\n  const readList: ChannelContextValue<StreamChatGenerics>['read'] | undefined = threadList\n    ? undefined\n    : read;\n\n  const dateSeparators = getDateSeparators<StreamChatGenerics>({\n    hideDateSeparators,\n    messages: messageList,\n    userId: client.userID,\n  });\n\n  const messageGroupStyles = getGroupStyles<StreamChatGenerics>({\n    dateSeparators,\n    hideDateSeparators,\n    maxTimeBetweenGroupedMessages,\n    messages: messageList,\n    noGroupByUser,\n    userId: client.userID,\n  });\n\n  const readData = getReadStates(client.userID, messageList, readList);\n\n  const messagesWithStylesReadByAndDateSeparator = messageList\n    .filter((msg) => {\n      const isMessageTypeDeleted = msg.type === 'deleted';\n      if (deletedMessagesVisibilityType === 'sender') {\n        return !isMessageTypeDeleted || msg.user?.id === client.userID;\n      } else if (deletedMessagesVisibilityType === 'receiver') {\n        return !isMessageTypeDeleted || msg.user?.id !== client.userID;\n      } else if (deletedMessagesVisibilityType === 'never') {\n        return !isMessageTypeDeleted;\n      } else {\n        return msg;\n      }\n    })\n    .map((msg) => ({\n      ...msg,\n      dateSeparator: dateSeparators[msg.id] || undefined,\n      groupStyles: messageGroupStyles[msg.id] || ['single'],\n      readBy: msg.id ? readData[msg.id] || false : false,\n    }));\n\n  return (\n    inverted\n      ? messagesWithStylesReadByAndDateSeparator.reverse()\n      : messagesWithStylesReadByAndDateSeparator\n  ) as MessageType<StreamChatGenerics>[];\n};\n"]}