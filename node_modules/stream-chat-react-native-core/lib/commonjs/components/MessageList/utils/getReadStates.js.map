{"version":3,"sources":["getReadStates.ts"],"names":["getReadStates","clientUserId","messages","read","readData","reduce","acc","cur","id","filteredMessagesReversed","filter","msg","updated_at","reverse","members","Object","values","memberReadCount","message","length","member","last_read","numberOfReads","keys","currentMessageReadData","userIndex","findIndex","user","splice"],"mappings":";;;;;;;;;;;AAKO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAG3BC,YAH2B,EAI3BC,QAJ2B,EAO3BC,IAP2B,EAQxB;AACH,MAAMC,QAAQ,GAAGF,QAAQ,CAACG,MAAT,CAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7C,QAAIA,GAAG,CAACC,EAAR,EAAY;AACVF,MAAAA,GAAG,CAACC,GAAG,CAACC,EAAL,CAAH,GAAc,KAAd;AACD;;AACD,WAAOF,GAAP;AACD,GALgB,EAKd,EALc,CAAjB;AAOA,MAAMG,wBAAwB,GAAGP,QAAQ,CAACQ,MAAT,CAAgB,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,UAAb;AAAA,GAAhB,EAAyCC,OAAzC,EAAjC;;AAEA,MAAIV,IAAJ,EAAU;AAIR,QAAIF,YAAJ,EAAkB;AAChB,aAAOE,IAAI,CAACF,YAAD,CAAX;AACD;;AACD,QAAMa,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcb,IAAd,CAAhB;AAKA,QAAIc,eAAe,GAAG,CAAtB;;AASA,yDAAsBR,wBAAtB,wCAAgD;AAAA,UAArCS,OAAqC;;AAM9C,UAAI,CAACJ,OAAO,CAACK,MAAb,EAAqB;AACnBf,QAAAA,QAAQ,CAACc,OAAO,CAACV,EAAT,CAAR,GAAuBS,eAAe,IAAI,IAA1C;AACD,OAFD,MAEO;AAAA,mCACMG,MADN;AAOH,cAAI,CAACA,MAAM,CAACC,SAAZ,EAAuB;AACrB;AACD;;AAOD,cAAIH,OAAO,CAACN,UAAR,GAAqBQ,MAAM,CAACC,SAAhC,EAA2C;AAKzC,gBAAMC,aAAa,GAAGP,MAAM,CAACQ,IAAP,CAAYpB,IAAZ,EAAkBgB,MAAxC;;AACA,gBAAIG,aAAa,KAAK,CAAtB,EAAyB;AACvBlB,cAAAA,QAAQ,CAACc,OAAO,CAACV,EAAT,CAAR,GAAuB,IAAvB;AACD,aAFD,MAEO;AACL,kBAAMgB,sBAAsB,GAAGpB,QAAQ,CAACc,OAAO,CAACV,EAAT,CAAvC;AACAJ,cAAAA,QAAQ,CAACc,OAAO,CAACV,EAAT,CAAR,GACE,OAAOgB,sBAAP,KAAkC,SAAlC,GACIP,eAAe,GAAG,CADtB,GAEIO,sBAAsB,GAAG,CAH/B;AAID;;AACD,gBAAMC,SAAS,GAAGX,OAAO,CAACY,SAAR,CAAkB;AAAA;;AAAA,kBAAGC,IAAH,QAAGA,IAAH;AAAA,qBAAcA,IAAI,CAACnB,EAAL,sBAAYY,MAAM,CAACO,IAAnB,qBAAY,aAAanB,EAAzB,CAAd;AAAA,aAAlB,CAAlB;;AACA,gBAAIiB,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACpBX,cAAAA,OAAO,CAACc,MAAR,CAAeH,SAAf,EAA0B,CAA1B;;AACA,kBAAIH,aAAa,GAAG,CAApB,EAAuB;AACrBL,gBAAAA,eAAe,IAAI,CAAnB;AACD;AACF;AACF;AAtCE;;AACL,8DAAqBH,OAArB,2CAA8B;AAAA,cAAnBM,MAAmB;;AAAA,2BAAnBA,MAAmB;;AAAA,mCAO1B;AA+BH;;AAOD,YAAIhB,QAAQ,CAACc,OAAO,CAACV,EAAT,CAAR,KAAyB,KAA7B,EAAoC;AAClCJ,UAAAA,QAAQ,CAACc,OAAO,CAACV,EAAT,CAAR,GAAuBS,eAAe,IAAI,KAA1C;AACD;AACF;AACF;AACF;;AAED,SAAOb,QAAP;AACD,CArGM","sourcesContent":["import type { ChannelContextValue } from '../../../contexts/channelContext/ChannelContext';\nimport type { PaginatedMessageListContextValue } from '../../../contexts/paginatedMessageListContext/PaginatedMessageListContext';\nimport type { ThreadContextValue } from '../../../contexts/threadContext/ThreadContext';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\nexport const getReadStates = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  clientUserId: string | undefined,\n  messages:\n    | PaginatedMessageListContextValue<StreamChatGenerics>['messages']\n    | ThreadContextValue<StreamChatGenerics>['threadMessages'],\n  read?: ChannelContextValue<StreamChatGenerics>['read'],\n) => {\n  const readData = messages.reduce((acc, cur) => {\n    if (cur.id) {\n      acc[cur.id] = false;\n    }\n    return acc;\n  }, {} as { [key: string]: boolean | number });\n\n  const filteredMessagesReversed = messages.filter((msg) => msg.updated_at).reverse();\n\n  if (read) {\n    /**\n     * Channel read state is stored by user and we only care about users who aren't the client\n     */\n    if (clientUserId) {\n      delete read[clientUserId];\n    }\n    const members = Object.values(read);\n\n    /**\n     * Track number of members who have read previous messages\n     */\n    let memberReadCount = 0;\n\n    /**\n     * Array is in reverse order so newest message is at 0,\n     * we find the index of the first message that is older\n     * than the last read and then set last read to that, or\n     * if there are no newer messages, the first message is\n     * last read message.\n     */\n    for (const message of filteredMessagesReversed) {\n      /**\n       * If all members are removed then they have read these\n       * messages. We do not increment memberReadCount for 1:1\n       * chats, so this should be true, not a number in that case.\n       */\n      if (!members.length) {\n        readData[message.id] = memberReadCount || true;\n      } else {\n        for (const member of members) {\n          /**\n           * If no last read continue, we can't remove the user\n           * because this would mark all messages in a new channel\n           * true until at least one other user reads a message.\n           */\n          if (!member.last_read) {\n            continue;\n          }\n\n          /**\n           * If there there is a last read message add the user\n           * to the array of last reads for that message and remove\n           * the user from the list of users being checked\n           */\n          if (message.updated_at < member.last_read) {\n            /**\n             * if this is a direct message the length will be 1\n             * as we already deleted the current user from the object\n             */\n            const numberOfReads = Object.keys(read).length;\n            if (numberOfReads === 1) {\n              readData[message.id] = true;\n            } else {\n              const currentMessageReadData = readData[message.id];\n              readData[message.id] =\n                typeof currentMessageReadData === 'boolean'\n                  ? memberReadCount + 1\n                  : currentMessageReadData + 1;\n            }\n            const userIndex = members.findIndex(({ user }) => user.id === member.user?.id);\n            if (userIndex !== -1) {\n              members.splice(userIndex, 1);\n              if (numberOfReads > 1) {\n                memberReadCount += 1;\n              }\n            }\n          }\n        }\n\n        /**\n         * If this is not the last message for a user this will still be\n         * set to false. But if other users have read further the number\n         * should be how many have read beyond this message.\n         */\n        if (readData[message.id] === false) {\n          readData[message.id] = memberReadCount || false;\n        }\n      }\n    }\n  }\n\n  return readData;\n};\n"]}