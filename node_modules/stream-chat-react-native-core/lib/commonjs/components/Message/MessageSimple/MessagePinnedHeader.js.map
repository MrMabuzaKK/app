{"version":3,"sources":["MessagePinnedHeader.tsx"],"names":["styles","StyleSheet","create","container","display","flexDirection","marginBottom","marginLeft","marginTop","label","MessagePinnedHeaderWithContext","props","alignment","message","theme","grey","colors","pinnedHeader","messageSimple","t","client","justifyContent","color","pinned_by","id","user","name","areEqual","prevProps","nextProps","prevMessage","nextMessage","messageEqual","deleted_at","status","type","text","pinned","MemoizedMessagePinnedHeader","React","memo","MessagePinnedHeader","lastGroupMessage","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\nimport {\n  MessageContextValue,\n  useMessageContext,\n} from '../../../contexts/messageContext/MessageContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\nimport { useTranslationContext } from '../../../contexts/translationContext/TranslationContext';\nimport { PinHeader } from '../../../icons';\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginBottom: 8,\n    marginLeft: 30,\n    marginTop: 5,\n  },\n  label: {},\n});\n\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\nexport type MessagePinnedHeaderPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<MessageContextValue<StreamChatGenerics>, 'alignment' | 'message'>;\n\nconst MessagePinnedHeaderWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessagePinnedHeaderPropsWithContext<StreamChatGenerics>,\n) => {\n  const { alignment, message } = props;\n  const {\n    theme: {\n      colors: { grey },\n      messageSimple: { pinnedHeader },\n    },\n  } = useTheme();\n  const { container, label } = pinnedHeader;\n  const { t } = useTranslationContext();\n  const { client } = useChatContext();\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          justifyContent: alignment === 'left' ? 'flex-start' : 'flex-end',\n        },\n        container,\n      ]}\n      testID='message-pinned'\n    >\n      <PinHeader pathFill={grey} />\n      <Text style={[{ color: grey }, styles.label, label]}>\n        Pinned by{' '}\n        {message?.pinned_by?.id === client?.user?.id ? t('You') : message?.pinned_by?.name}\n      </Text>\n    </View>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: MessagePinnedHeaderPropsWithContext<StreamChatGenerics>,\n  nextProps: MessagePinnedHeaderPropsWithContext<StreamChatGenerics>,\n) => {\n  const { message: prevMessage } = prevProps;\n  const { message: nextMessage } = nextProps;\n  const messageEqual =\n    prevMessage.deleted_at === nextMessage.deleted_at &&\n    prevMessage.status === nextMessage.status &&\n    prevMessage.type === nextMessage.type &&\n    prevMessage.text === nextMessage.text &&\n    prevMessage.pinned === nextMessage.pinned;\n  if (!messageEqual) return false;\n  return true;\n};\n\nconst MemoizedMessagePinnedHeader = React.memo(\n  MessagePinnedHeaderWithContext,\n  areEqual,\n) as typeof MessagePinnedHeaderWithContext;\n\nexport type MessagePinnedHeaderProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<MessagePinnedHeaderPropsWithContext<StreamChatGenerics>>;\n\nexport const MessagePinnedHeader = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessagePinnedHeaderProps<StreamChatGenerics>,\n) => {\n  const { alignment, lastGroupMessage, message } = useMessageContext<StreamChatGenerics>();\n\n  return (\n    <MemoizedMessagePinnedHeader\n      {...{\n        alignment,\n        lastGroupMessage,\n        message,\n      }}\n      {...props}\n    />\n  );\n};\n\nMessagePinnedHeader.displayName = 'MessagePinnedHeader{messageSimple{pinned}}';\n"]}