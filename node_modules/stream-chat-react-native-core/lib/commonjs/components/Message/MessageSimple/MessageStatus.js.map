{"version":3,"sources":["MessageStatus.tsx"],"names":["styles","StyleSheet","create","readByCount","fontSize","fontWeight","paddingRight","statusContainer","alignItems","flexDirection","justifyContent","MessageStatusWithContext","props","message","threadList","theme","colors","accent_blue","grey_dark","messageSimple","status","checkAllIcon","checkIcon","timeIcon","MessageStatusTypes","SENDING","readBy","color","RECEIVED","type","areEqual","prevProps","nextProps","prevMessage","prevThreadList","nextMessage","nextThreadList","threadListEqual","messageEqual","MemoizedMessageStatus","React","memo","MessageStatus","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport {\n  MessageContextValue,\n  useMessageContext,\n} from '../../../contexts/messageContext/MessageContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\nimport { Check } from '../../../icons/Check';\nimport { CheckAll } from '../../../icons/CheckAll';\nimport { Time } from '../../../icons/Time';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\nimport { MessageStatusTypes } from '../../../utils/utils';\n\nimport { isMessageWithStylesReadByAndDateSeparator } from '../../MessageList/hooks/useMessageList';\n\nconst styles = StyleSheet.create({\n  readByCount: {\n    fontSize: 11,\n    fontWeight: '700',\n    paddingRight: 3,\n  },\n  statusContainer: {\n    alignItems: 'flex-end',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    paddingRight: 3,\n  },\n});\n\nexport type MessageStatusPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<MessageContextValue<StreamChatGenerics>, 'message' | 'threadList'>;\n\nconst MessageStatusWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageStatusPropsWithContext<StreamChatGenerics>,\n) => {\n  const { message, threadList } = props;\n\n  const {\n    theme: {\n      colors: { accent_blue, grey_dark },\n      messageSimple: {\n        status: { checkAllIcon, checkIcon, readByCount, statusContainer, timeIcon },\n      },\n    },\n  } = useTheme();\n\n  if (message.status === MessageStatusTypes.SENDING) {\n    return (\n      <View style={[styles.statusContainer, statusContainer]} testID='sending-container'>\n        <Time {...timeIcon} />\n      </View>\n    );\n  }\n\n  if (isMessageWithStylesReadByAndDateSeparator(message) && !threadList) {\n    return (\n      <View style={[styles.statusContainer, statusContainer]}>\n        {typeof message.readBy === 'number' ? (\n          <Text\n            style={[styles.readByCount, { color: accent_blue }, readByCount]}\n            testID='read-by-container'\n          >\n            {message.readBy}\n          </Text>\n        ) : null}\n        {typeof message.readBy === 'number' || message.readBy === true ? (\n          <CheckAll pathFill={accent_blue} {...checkAllIcon} />\n        ) : (\n          <Check pathFill={grey_dark} {...checkIcon} />\n        )}\n      </View>\n    );\n  }\n\n  if (\n    message.status === MessageStatusTypes.RECEIVED &&\n    message.type !== 'ephemeral' &&\n    !threadList\n  ) {\n    return (\n      <View style={[styles.statusContainer, statusContainer]} testID='delivered-container'>\n        <Check pathFill={grey_dark} {...checkIcon} />\n      </View>\n    );\n  }\n\n  return null;\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: MessageStatusPropsWithContext<StreamChatGenerics>,\n  nextProps: MessageStatusPropsWithContext<StreamChatGenerics>,\n) => {\n  const { message: prevMessage, threadList: prevThreadList } = prevProps;\n  const { message: nextMessage, threadList: nextThreadList } = nextProps;\n\n  const threadListEqual = prevThreadList === nextThreadList;\n  if (!threadListEqual) return false;\n\n  const messageEqual =\n    prevMessage.status === nextMessage.status &&\n    prevMessage.type === nextMessage.type &&\n    (isMessageWithStylesReadByAndDateSeparator(prevMessage) && prevMessage.readBy) ===\n      (isMessageWithStylesReadByAndDateSeparator(nextMessage) && nextMessage.readBy);\n  if (!messageEqual) return false;\n\n  return true;\n};\n\nconst MemoizedMessageStatus = React.memo(\n  MessageStatusWithContext,\n  areEqual,\n) as typeof MessageStatusWithContext;\n\nexport type MessageStatusProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<MessageStatusPropsWithContext<StreamChatGenerics>>;\n\nexport const MessageStatus = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageStatusProps<StreamChatGenerics>,\n) => {\n  const { message, threadList } = useMessageContext<StreamChatGenerics>();\n\n  return <MemoizedMessageStatus {...{ message, threadList }} {...props} />;\n};\n\nMessageStatus.displayName = 'MessageStatus{messageSimple{status}}';\n"]}