{"version":3,"sources":["MessageTextContainer.tsx"],"names":["styles","StyleSheet","create","textContainer","maxWidth","paddingHorizontal","MessageTextContainerWithContext","props","theme","markdownRules","markdownStyles","markdownStylesProp","message","messageOverlay","MessageText","messageTextNumberOfLines","onLongPress","onlyEmojis","onPress","preventPress","stylesProp","colors","messageSimple","content","markdown","onlyEmojiMarkdown","text","renderText","areEqual","prevProps","nextProps","prevMessage","prevOnlyEmojis","nextMessage","nextOnlyEmojis","messageTextEqual","onlyEmojisEqual","mentionedUsersEqual","mentioned_users","length","name","MemoizedMessageTextContainer","React","memo","MessageTextContainer","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { renderText, RenderTextParams } from './utils/renderText';\n\nimport {\n  MessageContextValue,\n  useMessageContext,\n} from '../../../contexts/messageContext/MessageContext';\nimport {\n  MessagesContextValue,\n  useMessagesContext,\n} from '../../../contexts/messagesContext/MessagesContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\n\nimport type { MarkdownStyle, Theme } from '../../../contexts/themeContext/utils/theme';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\nconst styles = StyleSheet.create({\n  textContainer: { maxWidth: 250, paddingHorizontal: 16 },\n});\n\nexport type MessageTextProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = MessageTextContainerProps<StreamChatGenerics> & {\n  renderText: (params: RenderTextParams<StreamChatGenerics>) => JSX.Element | null;\n  theme: { theme: Theme };\n};\n\nexport type MessageTextContainerPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<\n  MessageContextValue<StreamChatGenerics>,\n  'message' | 'onLongPress' | 'onlyEmojis' | 'onPress' | 'preventPress'\n> &\n  Pick<MessagesContextValue<StreamChatGenerics>, 'markdownRules' | 'MessageText'> & {\n    markdownStyles?: MarkdownStyle;\n    messageOverlay?: boolean;\n    messageTextNumberOfLines?: number;\n    styles?: Partial<{\n      textContainer: StyleProp<ViewStyle>;\n    }>;\n  };\n\nconst MessageTextContainerWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageTextContainerPropsWithContext<StreamChatGenerics>,\n) => {\n  const theme = useTheme();\n\n  const {\n    markdownRules,\n    markdownStyles: markdownStylesProp = {},\n    message,\n    messageOverlay,\n    MessageText,\n    messageTextNumberOfLines,\n    onLongPress,\n    onlyEmojis,\n    onPress,\n    preventPress,\n    styles: stylesProp = {},\n  } = props;\n\n  const {\n    theme: {\n      colors,\n      messageSimple: {\n        content: {\n          markdown,\n          textContainer: { onlyEmojiMarkdown, ...textContainer },\n        },\n      },\n    },\n  } = theme;\n\n  if (!message.text) return null;\n\n  const markdownStyles = { ...markdown, ...markdownStylesProp };\n\n  return (\n    <View\n      style={[styles.textContainer, textContainer, stylesProp.textContainer]}\n      testID='message-text-container'\n    >\n      {MessageText ? (\n        <MessageText {...props} renderText={renderText} theme={theme} />\n      ) : (\n        renderText<StreamChatGenerics>({\n          colors,\n          markdownRules,\n          markdownStyles: {\n            ...markdownStyles,\n            ...(onlyEmojis ? onlyEmojiMarkdown : {}),\n          },\n          message,\n          messageOverlay,\n          messageTextNumberOfLines,\n          onLongPress,\n          onlyEmojis,\n          onPress,\n          preventPress,\n        })\n      )}\n    </View>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: MessageTextContainerPropsWithContext<StreamChatGenerics>,\n  nextProps: MessageTextContainerPropsWithContext<StreamChatGenerics>,\n) => {\n  const { message: prevMessage, onlyEmojis: prevOnlyEmojis } = prevProps;\n  const { message: nextMessage, onlyEmojis: nextOnlyEmojis } = nextProps;\n\n  const messageTextEqual = prevMessage.text === nextMessage.text;\n  if (!messageTextEqual) return false;\n\n  const onlyEmojisEqual = prevOnlyEmojis === nextOnlyEmojis;\n  if (!onlyEmojisEqual) return false;\n\n  const mentionedUsersEqual =\n    prevMessage.mentioned_users?.length === nextMessage.mentioned_users?.length &&\n    (nextMessage.mentioned_users?.length === 0 ||\n      (prevMessage.mentioned_users?.length &&\n        nextMessage.mentioned_users?.length &&\n        prevMessage.mentioned_users[0].name === nextMessage.mentioned_users[0].name));\n  if (!mentionedUsersEqual) return false;\n\n  return true;\n};\n\nconst MemoizedMessageTextContainer = React.memo(\n  MessageTextContainerWithContext,\n  areEqual,\n) as typeof MessageTextContainerWithContext;\n\nexport type MessageTextContainerProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<MessageTextContainerPropsWithContext<StreamChatGenerics>>;\n\nexport const MessageTextContainer = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageTextContainerProps<StreamChatGenerics>,\n) => {\n  const { message, onLongPress, onlyEmojis, onPress, preventPress } =\n    useMessageContext<StreamChatGenerics>();\n  const { markdownRules, MessageText } = useMessagesContext<StreamChatGenerics>();\n  const { messageTextNumberOfLines } = props;\n\n  return (\n    <MemoizedMessageTextContainer\n      {...{\n        markdownRules,\n        message,\n        MessageText,\n        messageTextNumberOfLines,\n        onLongPress,\n        onlyEmojis,\n        onPress,\n        preventPress,\n      }}\n      {...props}\n    />\n  );\n};\n\nMessageTextContainer.displayName = 'MessageTextContainer{messageSimple{content}}';\n"]}