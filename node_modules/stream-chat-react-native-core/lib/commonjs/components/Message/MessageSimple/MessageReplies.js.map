{"version":3,"sources":["MessageReplies.tsx"],"names":["styles","StyleSheet","create","container","alignItems","flexDirection","marginTop","curveContainer","leftMessageRepliesCurve","borderBottomLeftRadius","borderRightColor","Platform","select","android","borderRightWidth","messageRepliesCurve","borderTopColor","borderTopWidth","borderWidth","height","width","messageRepliesText","fontSize","fontWeight","paddingBottom","paddingLeft","rightMessageRepliesCurve","borderBottomRightRadius","borderLeftColor","borderLeftWidth","MessageRepliesWithContext","props","alignment","message","MessageRepliesAvatars","noBorder","onLongPress","onOpenThread","onPress","onPressIn","preventPress","repliesCurveColor","t","threadList","theme","accent_blue","colors","messageSimple","replies","leftCurve","rightCurve","reply_count","borderColor","event","emitter","defaultHandler","color","replyCount","areEqual","prevProps","nextProps","prevMessage","prevNoBorder","prevOnOpenThread","prevT","prevThreadList","nextMessage","nextNoBorder","nextOnOpenThread","nextT","nextThreadList","threadListEqual","messageReplyCountEqual","noBorderEqual","tEqual","onOpenThreadEqual","MemoizedMessageReplies","React","memo","MessageReplies","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ColorValue, Platform, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport {\n  MessageContextValue,\n  useMessageContext,\n} from '../../../contexts/messageContext/MessageContext';\nimport {\n  MessagesContextValue,\n  useMessagesContext,\n} from '../../../contexts/messagesContext/MessagesContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\nimport {\n  TranslationContextValue,\n  useTranslationContext,\n} from '../../../contexts/translationContext/TranslationContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    marginTop: 8,\n  },\n  curveContainer: {\n    flexDirection: 'row',\n  },\n  leftMessageRepliesCurve: {\n    borderBottomLeftRadius: 16,\n    borderRightColor: 'transparent',\n    ...Platform.select({\n      android: {\n        borderRightWidth: 0,\n      },\n    }),\n  },\n  messageRepliesCurve: {\n    borderTopColor: 'transparent',\n    borderTopWidth: 0,\n    borderWidth: 1,\n    height: 16,\n    width: 16,\n  },\n  messageRepliesText: {\n    fontSize: 12,\n    fontWeight: '700',\n    paddingBottom: 5,\n    paddingLeft: 8,\n  },\n  rightMessageRepliesCurve: {\n    borderBottomRightRadius: 16,\n    borderLeftColor: 'transparent',\n    ...Platform.select({\n      android: {\n        borderLeftWidth: 0,\n      },\n    }),\n  },\n});\n\nexport type MessageRepliesPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<\n  MessageContextValue<StreamChatGenerics>,\n  | 'alignment'\n  | 'message'\n  | 'onLongPress'\n  | 'onPress'\n  | 'onPressIn'\n  | 'onOpenThread'\n  | 'preventPress'\n  | 'threadList'\n> &\n  Pick<MessagesContextValue<StreamChatGenerics>, 'MessageRepliesAvatars'> &\n  Pick<TranslationContextValue, 't'> & {\n    noBorder?: boolean;\n    repliesCurveColor?: ColorValue;\n  };\n\nconst MessageRepliesWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageRepliesPropsWithContext<StreamChatGenerics>,\n) => {\n  const {\n    alignment,\n    message,\n    MessageRepliesAvatars,\n    noBorder,\n    onLongPress,\n    onOpenThread,\n    onPress,\n    onPressIn,\n    preventPress,\n    repliesCurveColor,\n    t,\n    threadList,\n  } = props;\n\n  const {\n    theme: {\n      colors: { accent_blue },\n      messageSimple: {\n        replies: { container, leftCurve, messageRepliesText, rightCurve },\n      },\n    },\n  } = useTheme();\n\n  if (threadList || !message.reply_count) return null;\n\n  return (\n    <View style={styles.curveContainer}>\n      {alignment === 'left' && (\n        <View testID='message-replies-left'>\n          {!noBorder && (\n            <View\n              style={[\n                { borderColor: repliesCurveColor },\n                styles.messageRepliesCurve,\n                styles.leftMessageRepliesCurve,\n                leftCurve,\n              ]}\n            />\n          )}\n          <MessageRepliesAvatars alignment={alignment} message={message} />\n        </View>\n      )}\n      <TouchableOpacity\n        disabled={preventPress}\n        onLongPress={(event) => {\n          if (onLongPress) {\n            onLongPress({\n              emitter: 'messageReplies',\n              event,\n            });\n          }\n        }}\n        onPress={(event) => {\n          if (onPress) {\n            onPress({\n              defaultHandler: onOpenThread,\n              emitter: 'messageReplies',\n              event,\n            });\n          }\n        }}\n        onPressIn={(event) => {\n          if (onPressIn) {\n            onPressIn({\n              defaultHandler: onOpenThread,\n              emitter: 'messageReplies',\n              event,\n            });\n          }\n        }}\n        style={[styles.container, container]}\n        testID='message-replies'\n      >\n        <Text style={[styles.messageRepliesText, { color: accent_blue }, messageRepliesText]}>\n          {message.reply_count === 1\n            ? t('1 Thread Reply')\n            : t('{{ replyCount }} Thread Replies', {\n                replyCount: message.reply_count,\n              })}\n        </Text>\n      </TouchableOpacity>\n      {alignment === 'right' && (\n        <View testID='message-replies-right'>\n          <MessageRepliesAvatars alignment={alignment} message={message} />\n          {!noBorder && (\n            <View\n              style={[\n                { borderColor: repliesCurveColor },\n                styles.messageRepliesCurve,\n                styles.rightMessageRepliesCurve,\n                rightCurve,\n              ]}\n            />\n          )}\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: MessageRepliesPropsWithContext<StreamChatGenerics>,\n  nextProps: MessageRepliesPropsWithContext<StreamChatGenerics>,\n) => {\n  const {\n    message: prevMessage,\n    noBorder: prevNoBorder,\n    onOpenThread: prevOnOpenThread,\n    t: prevT,\n    threadList: prevThreadList,\n  } = prevProps;\n  const {\n    message: nextMessage,\n    noBorder: nextNoBorder,\n    onOpenThread: nextOnOpenThread,\n    t: nextT,\n    threadList: nextThreadList,\n  } = nextProps;\n\n  const threadListEqual = prevThreadList === nextThreadList;\n  if (!threadListEqual) return false;\n\n  const messageReplyCountEqual = prevMessage.reply_count === nextMessage.reply_count;\n  if (!messageReplyCountEqual) return false;\n\n  const noBorderEqual = prevNoBorder === nextNoBorder;\n  if (!noBorderEqual) return false;\n\n  const tEqual = prevT === nextT;\n  if (!tEqual) return false;\n\n  const onOpenThreadEqual = prevOnOpenThread === nextOnOpenThread;\n  if (!onOpenThreadEqual) return false;\n\n  return true;\n};\n\nconst MemoizedMessageReplies = React.memo(\n  MessageRepliesWithContext,\n  areEqual,\n) as typeof MessageRepliesWithContext;\n\nexport type MessageRepliesProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<MessageRepliesPropsWithContext<StreamChatGenerics>>;\n\nexport const MessageReplies = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageRepliesProps<StreamChatGenerics>,\n) => {\n  const {\n    alignment,\n    message,\n    onLongPress,\n    onOpenThread,\n    onPress,\n    onPressIn,\n    preventPress,\n    threadList,\n  } = useMessageContext<StreamChatGenerics>();\n  const { MessageRepliesAvatars } = useMessagesContext<StreamChatGenerics>();\n  const { t } = useTranslationContext();\n\n  return (\n    <MemoizedMessageReplies\n      {...{\n        alignment,\n        message,\n        MessageRepliesAvatars,\n        onLongPress,\n        onOpenThread,\n        onPress,\n        onPressIn,\n        preventPress,\n        t,\n        threadList,\n      }}\n      {...props}\n    />\n  );\n};\n\nMessageReplies.displayName = 'MessageReplies{messageSimple{replies}}';\n"]}