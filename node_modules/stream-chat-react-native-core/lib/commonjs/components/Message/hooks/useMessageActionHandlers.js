var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMessageActionHandlers = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("../../../utils/utils");

var useMessageActionHandlers = function useMessageActionHandlers(_ref) {
  var channel = _ref.channel,
      client = _ref.client,
      enforceUniqueReaction = _ref.enforceUniqueReaction,
      message = _ref.message,
      removeMessage = _ref.removeMessage,
      retrySendMessage = _ref.retrySendMessage,
      setEditingState = _ref.setEditingState,
      setQuotedMessageState = _ref.setQuotedMessageState,
      supportedReactions = _ref.supportedReactions,
      updateMessage = _ref.updateMessage;

  var handleResendMessage = function handleResendMessage() {
    return retrySendMessage(message);
  };

  var handleQuotedReplyMessage = function handleQuotedReplyMessage() {
    setQuotedMessageState(message);
  };

  var isMuted = (client.mutedUsers || []).some(function (mute) {
    var _message$user;

    return mute.user.id === client.userID && mute.target.id === ((_message$user = message.user) == null ? void 0 : _message$user.id);
  });

  var handleDeleteMessage = function () {
    var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
      var data;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(message.status === _utils.MessageStatusTypes.FAILED)) {
                _context.next = 4;
                break;
              }

              removeMessage(message);
              _context.next = 8;
              break;

            case 4:
              _context.next = 6;
              return client.deleteMessage(message.id);

            case 6:
              data = _context.sent;
              updateMessage(data.message);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function handleDeleteMessage() {
      return _ref2.apply(this, arguments);
    };
  }();

  var handleToggleMuteUser = function () {
    var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {
      var _message$user2;

      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if ((_message$user2 = message.user) != null && _message$user2.id) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              if (!isMuted) {
                _context2.next = 7;
                break;
              }

              _context2.next = 5;
              return client.unmuteUser(message.user.id);

            case 5:
              _context2.next = 9;
              break;

            case 7:
              _context2.next = 9;
              return client.muteUser(message.user.id);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function handleToggleMuteUser() {
      return _ref3.apply(this, arguments);
    };
  }();

  var handleToggleBanUser = function () {
    var _ref4 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {
      var messageUser;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              messageUser = message.user;

              if (messageUser) {
                _context3.next = 3;
                break;
              }

              return _context3.abrupt("return");

            case 3:
              if (!messageUser.banned) {
                _context3.next = 8;
                break;
              }

              _context3.next = 6;
              return client.unbanUser(messageUser.id);

            case 6:
              _context3.next = 10;
              break;

            case 8:
              _context3.next = 10;
              return client.banUser(messageUser.id);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function handleToggleBanUser() {
      return _ref4.apply(this, arguments);
    };
  }();

  var handleTogglePinMessage = function () {
    var _ref5 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {
      var MessagePinnedHeaderStatus;
      return _regenerator["default"].wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              MessagePinnedHeaderStatus = message.pinned;

              if (MessagePinnedHeaderStatus) {
                _context4.next = 6;
                break;
              }

              _context4.next = 4;
              return client.pinMessage(message, null);

            case 4:
              _context4.next = 8;
              break;

            case 6:
              _context4.next = 8;
              return client.unpinMessage(message);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function handleTogglePinMessage() {
      return _ref5.apply(this, arguments);
    };
  }();

  var handleEditMessage = function handleEditMessage() {
    setEditingState(message);
  };

  var clientId = client.userID;
  var isMessageTypeDeleted = message.type === 'deleted';
  var hasReactions = !isMessageTypeDeleted && !!message.latest_reactions && message.latest_reactions.length > 0;
  var reactions = hasReactions ? supportedReactions.reduce(function (acc, cur) {
    var _message$latest_react;

    var reactionType = cur.type;
    var reactionsOfReactionType = (_message$latest_react = message.latest_reactions) == null ? void 0 : _message$latest_react.filter(function (reaction) {
      return reaction.type === reactionType;
    });

    if (reactionsOfReactionType != null && reactionsOfReactionType.length) {
      var hasOwnReaction = reactionsOfReactionType.some(function (reaction) {
        return reaction.user_id === clientId;
      });
      acc.push({
        own: hasOwnReaction,
        type: reactionType
      });
    }

    return acc;
  }, []) : [];

  var handleToggleReaction = function () {
    var _ref6 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(reactionType) {
      var messageId, ownReaction;
      return _regenerator["default"].wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              messageId = message.id;
              ownReaction = !!reactions.find(function (reaction) {
                return reaction.own && reaction.type === reactionType;
              });
              _context5.prev = 2;

              if (!(channel && messageId)) {
                _context5.next = 11;
                break;
              }

              if (!ownReaction) {
                _context5.next = 9;
                break;
              }

              _context5.next = 7;
              return channel.deleteReaction(messageId, reactionType);

            case 7:
              _context5.next = 11;
              break;

            case 9:
              _context5.next = 11;
              return channel.sendReaction(messageId, {
                type: reactionType
              }, {
                enforce_unique: enforceUniqueReaction
              });

            case 11:
              _context5.next = 16;
              break;

            case 13:
              _context5.prev = 13;
              _context5.t0 = _context5["catch"](2);
              console.log(_context5.t0);

            case 16:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, null, [[2, 13]]);
    }));

    return function handleToggleReaction(_x) {
      return _ref6.apply(this, arguments);
    };
  }();

  return {
    handleDeleteMessage: handleDeleteMessage,
    handleEditMessage: handleEditMessage,
    handleQuotedReplyMessage: handleQuotedReplyMessage,
    handleResendMessage: handleResendMessage,
    handleToggleBanUser: handleToggleBanUser,
    handleToggleMuteUser: handleToggleMuteUser,
    handleTogglePinMessage: handleTogglePinMessage,
    handleToggleReaction: handleToggleReaction
  };
};

exports.useMessageActionHandlers = useMessageActionHandlers;
//# sourceMappingURL=useMessageActionHandlers.js.map