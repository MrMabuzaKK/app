{"version":3,"sources":["useChannelVisible.ts"],"names":["useChannelVisible","onChannelVisible","setChannels","client","handleEvent","event","channel_id","channel_type","id","type","channel","channels","on","off"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAIA;;AAGA;;AAWO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,OAKK;AAAA,MAFpCC,gBAEoC,QAFpCA,gBAEoC;AAAA,MADpCC,WACoC,QADpCA,WACoC;;AACpC,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,wBAAU,YAAM;AACd,QAAMC,WAAW;AAAA,kFAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACd,OAAOJ,gBAAP,KAA4B,UADd;AAAA;AAAA;AAAA;;AAEhBA,gBAAAA,gBAAgB,CAACC,WAAD,EAAcG,KAAd,CAAhB;AAFgB;AAAA;;AAAA;AAAA,sBAIZA,KAAK,CAACC,UAAN,IAAoBD,KAAK,CAACE,YAJd;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKQ,uBAA+B;AACnDJ,kBAAAA,MAAM,EAANA,MADmD;AAEnDK,kBAAAA,EAAE,EAAEH,KAAK,CAACC,UAFyC;AAGnDG,kBAAAA,IAAI,EAAEJ,KAAK,CAACE;AAHuC,iBAA/B,CALR;;AAAA;AAKRG,gBAAAA,OALQ;AAUdR,gBAAAA,WAAW,CAAC,UAACS,QAAD;AAAA,yBAAc,yBAAQD,OAAR,6CAAoBC,QAApB,IAA+B,KAA/B,CAAd;AAAA,iBAAD,CAAX;;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAXP,WAAW;AAAA;AAAA;AAAA,OAAjB;;AAeAD,IAAAA,MAAM,CAACS,EAAP,CAAU,iBAAV,EAA6BR,WAA7B;AACA,WAAO;AAAA,aAAMD,MAAM,CAACU,GAAP,CAAW,iBAAX,EAA8BT,WAA9B,CAAN;AAAA,KAAP;AACD,GAlBD,EAkBG,EAlBH;AAmBD,CA3BM","sourcesContent":["import { useEffect } from 'react';\n\nimport uniqBy from 'lodash/uniqBy';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\nimport { getChannel } from '../../utils';\n\ntype Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  {\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>;\n    onChannelVisible?: (\n      setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n      event: Event<StreamChatGenerics>,\n    ) => void;\n  };\n\nexport const useChannelVisible = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  onChannelVisible,\n  setChannels,\n}: Parameters<StreamChatGenerics>) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  useEffect(() => {\n    const handleEvent = async (event: Event<StreamChatGenerics>) => {\n      if (typeof onChannelVisible === 'function') {\n        onChannelVisible(setChannels, event);\n      } else {\n        if (event.channel_id && event.channel_type) {\n          const channel = await getChannel<StreamChatGenerics>({\n            client,\n            id: event.channel_id,\n            type: event.channel_type,\n          });\n          setChannels((channels) => uniqBy([channel, ...channels], 'cid'));\n        }\n      }\n    };\n\n    client.on('channel.visible', handleEvent);\n    return () => client.off('channel.visible', handleEvent);\n  }, []);\n};\n"]}