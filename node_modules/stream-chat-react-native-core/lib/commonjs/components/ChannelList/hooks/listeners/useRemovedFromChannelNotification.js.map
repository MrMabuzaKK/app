{"version":3,"sources":["useRemovedFromChannelNotification.ts"],"names":["useRemovedFromChannelNotification","onRemovedFromChannel","setChannels","client","handleEvent","event","channels","newChannels","filter","channel","cid","on","off"],"mappings":";;;;;;;;;AAAA;;AAIA;;AAaO,IAAMA,iCAAiC,GAAG,SAApCA,iCAAoC,OAKX;AAAA,MAFpCC,oBAEoC,QAFpCA,oBAEoC;AAAA,MADpCC,WACoC,QADpCA,WACoC;;AACpC,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,wBAAU,YAAM;AACd,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAsC;AACxD,UAAI,OAAOJ,oBAAP,KAAgC,UAApC,EAAgD;AAC9CA,QAAAA,oBAAoB,CAACC,WAAD,EAAcG,KAAd,CAApB;AACD,OAFD,MAEO;AACLH,QAAAA,WAAW,CAAC,UAACI,QAAD,EAAc;AACxB,cAAMC,WAAW,GAAGD,QAAQ,CAACE,MAAT,CAAgB,UAACC,OAAD;AAAA;;AAAA,mBAAaA,OAAO,CAACC,GAAR,wBAAgBL,KAAK,CAACI,OAAtB,qBAAgB,eAAeC,GAA/B,CAAb;AAAA,WAAhB,CAApB;AACA,qDAAWH,WAAX;AACD,SAHU,CAAX;AAID;AACF,KATD;;AAWAJ,IAAAA,MAAM,CAACQ,EAAP,CAAU,mCAAV,EAA+CP,WAA/C;AACA,WAAO;AAAA,aAAMD,MAAM,CAACS,GAAP,CAAW,mCAAX,EAAgDR,WAAhD,CAAN;AAAA,KAAP;AACD,GAdD,EAcG,EAdH;AAeD,CAvBM","sourcesContent":["import { useEffect } from 'react';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\n\ntype Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  {\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>;\n    onRemovedFromChannel?: (\n      setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n      event: Event<StreamChatGenerics>,\n    ) => void;\n  };\n\nexport const useRemovedFromChannelNotification = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  onRemovedFromChannel,\n  setChannels,\n}: Parameters<StreamChatGenerics>) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<StreamChatGenerics>) => {\n      if (typeof onRemovedFromChannel === 'function') {\n        onRemovedFromChannel(setChannels, event);\n      } else {\n        setChannels((channels) => {\n          const newChannels = channels.filter((channel) => channel.cid !== event.channel?.cid);\n          return [...newChannels];\n        });\n      }\n    };\n\n    client.on('notification.removed_from_channel', handleEvent);\n    return () => client.off('notification.removed_from_channel', handleEvent);\n  }, []);\n};\n"]}