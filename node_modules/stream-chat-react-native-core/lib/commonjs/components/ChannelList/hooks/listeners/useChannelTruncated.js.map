{"version":3,"sources":["useChannelTruncated.ts"],"names":["useChannelTruncated","onChannelTruncated","refreshList","setChannels","setForceUpdate","client","handleEvent","event","count","on","off"],"mappings":";;;;;AAAA;;AAIA;;AAeO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,OAOG;AAAA,MAJpCC,kBAIoC,QAJpCA,kBAIoC;AAAA,MAHpCC,WAGoC,QAHpCA,WAGoC;AAAA,MAFpCC,WAEoC,QAFpCA,WAEoC;AAAA,MADpCC,cACoC,QADpCA,cACoC;;AACpC,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,wBAAU,YAAM;AACd,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAsC;AACxD,UAAI,OAAON,kBAAP,KAA8B,UAAlC,EAA8C;AAC5CA,QAAAA,kBAAkB,CAACE,WAAD,EAAcI,KAAd,CAAlB;AACD;;AACDL,MAAAA,WAAW;AACXE,MAAAA,cAAc,CAAC,UAACI,KAAD;AAAA,eAAWA,KAAK,GAAG,CAAnB;AAAA,OAAD,CAAd;AACD,KAND;;AAQAH,IAAAA,MAAM,CAACI,EAAP,CAAU,mBAAV,EAA+BH,WAA/B;AACA,WAAO;AAAA,aAAMD,MAAM,CAACK,GAAP,CAAW,mBAAX,EAAgCJ,WAAhC,CAAN;AAAA,KAAP;AACD,GAXD,EAWG,EAXH;AAYD,CAtBM","sourcesContent":["import { useEffect } from 'react';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\n\ntype Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  {\n    refreshList: () => void;\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>;\n    setForceUpdate: React.Dispatch<React.SetStateAction<number>>;\n    onChannelTruncated?: (\n      setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n      event: Event<StreamChatGenerics>,\n    ) => void;\n  };\n\nexport const useChannelTruncated = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  onChannelTruncated,\n  refreshList,\n  setChannels,\n  setForceUpdate,\n}: Parameters<StreamChatGenerics>) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<StreamChatGenerics>) => {\n      if (typeof onChannelTruncated === 'function') {\n        onChannelTruncated(setChannels, event);\n      }\n      refreshList();\n      setForceUpdate((count) => count + 1);\n    };\n\n    client.on('channel.truncated', handleEvent);\n    return () => client.off('channel.truncated', handleEvent);\n  }, []);\n};\n"]}