{"version":3,"sources":["ChannelList.tsx"],"names":["DEFAULT_FILTERS","DEFAULT_OPTIONS","DEFAULT_SORT","ChannelList","props","additionalFlatListProps","EmptyStateIndicator","EmptyStateIndicatorDefault","FooterLoadingIndicator","ChannelListFooterLoadingIndicator","filters","HeaderErrorIndicator","ChannelListHeaderErrorIndicator","HeaderNetworkDownIndicator","ChannelListHeaderNetworkDownIndicator","List","ChannelListMessenger","ListHeaderComponent","LoadingErrorIndicator","LoadingErrorIndicatorDefault","LoadingIndicator","ChannelListLoadingIndicator","loadMoreThreshold","lockChannelOrder","maxUnreadCount","numberOfSkeletons","onAddedToChannel","onChannelDeleted","onChannelHidden","onChannelVisible","onChannelTruncated","onChannelUpdated","onMessageNew","onRemovedFromChannel","onSelect","options","Preview","ChannelPreviewMessenger","PreviewAvatar","PreviewMessage","PreviewStatus","PreviewTitle","PreviewUnreadCount","setFlatListRef","Skeleton","SkeletonDefault","sort","forceUpdate","setForceUpdate","channels","error","hasNextPage","loadingChannels","loadingNextPage","loadNextPage","refreshing","refreshList","reloadList","setChannels","channelsContext","ref"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport type { FlatList } from 'react-native-gesture-handler';\n\nimport type { Channel, ChannelFilters, ChannelOptions, ChannelSort, Event } from 'stream-chat';\n\nimport { ChannelListFooterLoadingIndicator } from './ChannelListFooterLoadingIndicator';\nimport { ChannelListHeaderErrorIndicator } from './ChannelListHeaderErrorIndicator';\nimport { ChannelListHeaderNetworkDownIndicator } from './ChannelListHeaderNetworkDownIndicator';\nimport { ChannelListLoadingIndicator } from './ChannelListLoadingIndicator';\nimport { ChannelListMessenger, ChannelListMessengerProps } from './ChannelListMessenger';\nimport { useAddedToChannelNotification } from './hooks/listeners/useAddedToChannelNotification';\nimport { useChannelDeleted } from './hooks/listeners/useChannelDeleted';\nimport { useChannelHidden } from './hooks/listeners/useChannelHidden';\nimport { useChannelTruncated } from './hooks/listeners/useChannelTruncated';\nimport { useChannelUpdated } from './hooks/listeners/useChannelUpdated';\nimport { useChannelVisible } from './hooks/listeners/useChannelVisible';\nimport { useConnectionRecovered } from './hooks/listeners/useConnectionRecovered';\nimport { useNewMessage } from './hooks/listeners/useNewMessage';\nimport { useNewMessageNotification } from './hooks/listeners/useNewMessageNotification';\nimport { useRemovedFromChannelNotification } from './hooks/listeners/useRemovedFromChannelNotification';\nimport { useUserPresence } from './hooks/listeners/useUserPresence';\nimport { useCreateChannelsContext } from './hooks/useCreateChannelsContext';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { Skeleton as SkeletonDefault } from './Skeleton';\n\nimport {\n  ChannelsContextValue,\n  ChannelsProvider,\n} from '../../contexts/channelsContext/ChannelsContext';\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport { ChannelPreviewMessenger } from '../ChannelPreview/ChannelPreviewMessenger';\nimport { EmptyStateIndicator as EmptyStateIndicatorDefault } from '../Indicators/EmptyStateIndicator';\nimport { LoadingErrorIndicator as LoadingErrorIndicatorDefault } from '../Indicators/LoadingErrorIndicator';\n\nexport type ChannelListProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<\n  Pick<\n    ChannelsContextValue<StreamChatGenerics>,\n    | 'additionalFlatListProps'\n    | 'EmptyStateIndicator'\n    | 'FooterLoadingIndicator'\n    | 'HeaderErrorIndicator'\n    | 'HeaderNetworkDownIndicator'\n    | 'LoadingErrorIndicator'\n    | 'LoadingIndicator'\n    | 'Preview'\n    | 'setFlatListRef'\n    | 'ListHeaderComponent'\n    | 'onSelect'\n    | 'PreviewAvatar'\n    | 'PreviewMessage'\n    | 'PreviewStatus'\n    | 'PreviewTitle'\n    | 'PreviewUnreadCount'\n    | 'loadMoreThreshold'\n    | 'Skeleton'\n    | 'maxUnreadCount'\n    | 'numberOfSkeletons'\n  >\n> & {\n  /**\n   * Object containing channel query filters\n   *\n   * @see See [Channel query documentation](https://getstream.io/chat/docs/query_channels) for a list of available filter fields\n   *\n   * @overrideType object\n   * */\n  filters?: ChannelFilters<StreamChatGenerics>;\n  /**\n   * Custom UI component to display the list of channels\n   *\n   * Default: [ChannelListMessenger](https://getstream.io/chat/docs/sdk/reactnative/ui-components/channel-list-messenger/)\n   */\n  List?: React.ComponentType<ChannelListMessengerProps<StreamChatGenerics>>;\n  /**\n   * If set to true, channels won't dynamically sort by most recent message, defaults to false\n   */\n  lockChannelOrder?: boolean;\n  /**\n   * Function that overrides default behavior when a user gets added to a channel\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event Object](https://getstream.io/chat/docs/event_object) corresponding to `notification.added_to_channel` event\n   *\n   * @overrideType Function\n   * */\n  onAddedToChannel?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets deleted. In absence of this prop, the channel will be removed from the list.\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.deleted` event\n   *\n   * @overrideType Function\n   * */\n  onChannelDeleted?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets hidden. In absence of this prop, the channel will be removed from the list.\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.hidden` event\n   *\n   * @overrideType Function\n   * */\n  onChannelHidden?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function to customize behavior when a channel gets truncated\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.truncated` event\n   *\n   * @overrideType Function\n   * */\n  onChannelTruncated?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets updated\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.updated` event\n   *\n   * @overrideType Function\n   * */\n  onChannelUpdated?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets visible. In absence of this prop, the channel will be added to the list.\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.visible` event\n   *\n   * @overrideType Function\n   * */\n  onChannelVisible?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Override the default listener/handler for event `notification.message_new`\n   * This event is received on channel, which is not being watched.\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `notification.message_new` event\n   *\n   * @overrideType Function\n   * */\n  onMessageNew?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a user gets removed from a channel\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `notification.removed_from_channel` event\n   *\n   * @overrideType Function\n   * */\n  onRemovedFromChannel?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Object containing channel query options\n   * @see See [Channel query documentation](https://getstream.io/chat/docs/query_channels) for a list of available option fields\n   * */\n  options?: ChannelOptions;\n  /**\n   * Object containing channel sort parameters\n   * @see See [Channel query documentation](https://getstream.io/chat/docs/query_channels) for a list of available sorting fields\n   * */\n  sort?: ChannelSort<StreamChatGenerics>;\n};\n\nconst DEFAULT_FILTERS = {};\nconst DEFAULT_OPTIONS = {};\nconst DEFAULT_SORT = {};\n\n/**\n * This component fetches a list of channels, allowing you to select the channel you want to open.\n * The ChannelList doesn't provide any UI for the underlying React Native FlatList. UI is determined by the `List` component which is\n * provided to the ChannelList component as a prop. By default, the ChannelListMessenger component is used as the list UI.\n *\n * @example ./ChannelList.md\n */\nexport const ChannelList = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: ChannelListProps<StreamChatGenerics>,\n) => {\n  const {\n    additionalFlatListProps = {},\n    EmptyStateIndicator = EmptyStateIndicatorDefault,\n    FooterLoadingIndicator = ChannelListFooterLoadingIndicator,\n    filters = DEFAULT_FILTERS,\n    HeaderErrorIndicator = ChannelListHeaderErrorIndicator,\n    HeaderNetworkDownIndicator = ChannelListHeaderNetworkDownIndicator,\n    List = ChannelListMessenger,\n    ListHeaderComponent,\n    LoadingErrorIndicator = LoadingErrorIndicatorDefault,\n    LoadingIndicator = ChannelListLoadingIndicator,\n    // https://github.com/facebook/react-native/blob/a7a7970e543959e9db5281914d5f132beb01db8d/Libraries/Lists/VirtualizedList.js#L466\n    loadMoreThreshold = 2,\n    lockChannelOrder = false,\n    maxUnreadCount = 255,\n    numberOfSkeletons = 6,\n    onAddedToChannel,\n    onChannelDeleted,\n    onChannelHidden,\n    onChannelVisible,\n    onChannelTruncated,\n    onChannelUpdated,\n    onMessageNew,\n    onRemovedFromChannel,\n    onSelect,\n    options = DEFAULT_OPTIONS,\n    Preview = ChannelPreviewMessenger,\n    PreviewAvatar,\n    PreviewMessage,\n    PreviewStatus,\n    PreviewTitle,\n    PreviewUnreadCount,\n    setFlatListRef,\n    Skeleton = SkeletonDefault,\n    sort = DEFAULT_SORT,\n  } = props;\n\n  const [forceUpdate, setForceUpdate] = useState(0);\n\n  const {\n    channels,\n    error,\n    hasNextPage,\n    loadingChannels,\n    loadingNextPage,\n    loadNextPage,\n    refreshing,\n    refreshList,\n    reloadList,\n    setChannels,\n  } = usePaginatedChannels<StreamChatGenerics>({\n    filters,\n    options,\n    sort,\n  });\n\n  // Setup event listeners\n  useAddedToChannelNotification({\n    onAddedToChannel,\n    setChannels,\n  });\n\n  useChannelDeleted({\n    onChannelDeleted,\n    setChannels,\n  });\n\n  useChannelHidden({\n    onChannelHidden,\n    setChannels,\n  });\n\n  useChannelTruncated({\n    onChannelTruncated,\n    refreshList,\n    setChannels,\n    setForceUpdate,\n  });\n\n  useChannelUpdated({\n    onChannelUpdated,\n    setChannels,\n  });\n\n  useChannelVisible({\n    onChannelVisible,\n    setChannels,\n  });\n\n  useConnectionRecovered<StreamChatGenerics>({\n    refreshList,\n    setForceUpdate,\n  });\n\n  useNewMessage({\n    lockChannelOrder,\n    setChannels,\n  });\n\n  useNewMessageNotification({\n    onMessageNew,\n    setChannels,\n  });\n\n  useRemovedFromChannelNotification({\n    onRemovedFromChannel,\n    setChannels,\n  });\n\n  useUserPresence({\n    setChannels,\n  });\n\n  const channelsContext = useCreateChannelsContext({\n    additionalFlatListProps,\n    channels,\n    EmptyStateIndicator,\n    error,\n    FooterLoadingIndicator,\n    forceUpdate,\n    hasNextPage,\n    HeaderErrorIndicator,\n    HeaderNetworkDownIndicator,\n    ListHeaderComponent,\n    loadingChannels,\n    LoadingErrorIndicator,\n    LoadingIndicator,\n    loadingNextPage,\n    loadMoreThreshold,\n    loadNextPage,\n    maxUnreadCount,\n    numberOfSkeletons,\n    onSelect,\n    Preview,\n    PreviewAvatar,\n    PreviewMessage,\n    PreviewStatus,\n    PreviewTitle,\n    PreviewUnreadCount,\n    refreshing,\n    refreshList,\n    reloadList,\n    setFlatListRef: (ref: FlatList<Channel<StreamChatGenerics>> | null) => {\n      if (setFlatListRef) {\n        setFlatListRef(ref);\n      }\n    },\n    Skeleton,\n  });\n\n  return (\n    <ChannelsProvider value={channelsContext}>\n      <List<StreamChatGenerics> />\n    </ChannelsProvider>\n  );\n};\n"]}