{"version":3,"sources":["ChannelListHeaderErrorIndicator.tsx"],"names":["styles","StyleSheet","create","container","alignItems","justifyContent","padding","width","errorText","fontSize","ChannelListHeaderErrorIndicator","onPress","theme","channelListHeaderErrorIndicator","colors","grey_dark","white","t","backgroundColor","color","displayName"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;AAEA,IAAMA,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,OAAO,EAAE,CAHA;AAITC,IAAAA,KAAK,EAAE;AAJE,GADoB;AAO/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE,EADD;AAETH,IAAAA,OAAO,EAAE;AAFA;AAPoB,CAAlB,CAAf;;AAiBO,IAAMI,+BAA2D,GAAG,SAA9DA,+BAA8D,OAErE;AAAA,0BADJC,OACI;AAAA,MADJA,OACI,6BADM;AAAA,WAAM,IAAN;AAAA,GACN;;AACJ,kBAKI,6BALJ;AAAA,kCACEC,KADF;AAAA,8CAEIC,+BAFJ;AAAA,MAEuCV,SAFvC,yBAEuCA,SAFvC;AAAA,MAEkDK,SAFlD,yBAEkDA,SAFlD;AAAA,8CAGIM,MAHJ;AAAA,MAGcC,SAHd,yBAGcA,SAHd;AAAA,MAGyBC,KAHzB,yBAGyBA,KAHzB;;AAMA,8BAAc,gDAAd;AAAA,MAAQC,CAAR,yBAAQA,CAAR;;AAEA,SACE,gCAAC,6BAAD;AACE,IAAA,OAAO,EAAEN,OADX;AAEE,IAAA,KAAK,EAAE,CAACX,MAAM,CAACG,SAAR,EAAmB;AAAEe,MAAAA,eAAe,EAAKH,SAAL;AAAjB,KAAnB,EAA0DZ,SAA1D,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,gCAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACH,MAAM,CAACQ,SAAR,EAAmB;AAAEW,MAAAA,KAAK,EAAEH;AAAT,KAAnB,EAAqCR,SAArC,CAAb;AAA8D,IAAA,MAAM,EAAC,uBAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,CAAC,CAAC,4CAAD,CADJ,CAJF,CADF;AAUD,CArBM;;;AAuBPP,+BAA+B,CAACU,WAAhC,GACE,kEADF","sourcesContent":["import React from 'react';\nimport { GestureResponderEvent, StyleSheet, Text, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 3,\n    width: '100%',\n  },\n  errorText: {\n    fontSize: 12,\n    padding: 3,\n  },\n});\n\nexport type HeaderErrorProps = {\n  onPress?: (event: GestureResponderEvent) => void;\n};\n\nexport const ChannelListHeaderErrorIndicator: React.FC<HeaderErrorProps> = ({\n  onPress = () => null,\n}) => {\n  const {\n    theme: {\n      channelListHeaderErrorIndicator: { container, errorText },\n      colors: { grey_dark, white },\n    },\n  } = useTheme();\n  const { t } = useTranslationContext();\n\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      style={[styles.container, { backgroundColor: `${grey_dark}E6` }, container]}\n    >\n      <Text style={[styles.errorText, { color: white }, errorText]} testID='channel-loading-error'>\n        {t('Error while loading, please reload/refresh')}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nChannelListHeaderErrorIndicator.displayName =\n  'ChannelListHeaderErrorIndicator{channelListHeaderErrorIndicator}';\n"]}