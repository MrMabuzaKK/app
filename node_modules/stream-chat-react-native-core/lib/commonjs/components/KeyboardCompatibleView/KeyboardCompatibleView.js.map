{"version":3,"sources":["KeyboardCompatibleView.tsx"],"names":["KeyboardCompatibleView","props","_frame","_keyboardEvent","_subscriptions","_appStateSubscription","_initialFrameHeight","_onKeyboardChange","event","_updateBottomIfNecessary","_onLayout","nativeEvent","layout","height","setState","bottom","duration","easing","endCoordinates","_relativeKeyboardHeight","state","LayoutAnimation","configureNext","update","type","Types","_handleAppStateChange","nextAppState","appState","match","setKeyboardListeners","unsetKeyboardListeners","Platform","OS","Keyboard","addListener","push","isKeyboardOpen","filter","subscription","remove","dismissKeyboard","Promise","resolve","dismiss","AppState","currentState","viewRef","React","createRef","keyboardFrame","frame","keyboardY","screenY","keyboardVerticalOffset","relativeHeight","y","barHeights","Dimensions","get","Math","max","StatusBar","currentHeight","addEventListener","removeEventListener","behavior","children","contentContainerStyle","enabled","style","bottomHeight","heightStyle","flex","StyleSheet","compose","paddingBottom","Component","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  AppState,\n  AppStateStatus,\n  Dimensions,\n  EmitterSubscription,\n  Keyboard,\n  KeyboardAvoidingViewProps,\n  KeyboardEvent,\n  KeyboardEventListener,\n  LayoutAnimation,\n  LayoutChangeEvent,\n  LayoutRectangle,\n  NativeEventSubscription,\n  Platform,\n  ScreenRect,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport { KeyboardProvider } from '../../contexts/keyboardContext/KeyboardContext';\n\n/**\n * View that moves out of the way when the keyboard appears by automatically\n * adjusting its height, position, or bottom padding.\n *\n * Following piece of code has been mostly copied from KeyboardAvoidingView component, with few additional tweaks.\n */\nexport class KeyboardCompatibleView extends React.Component<\n  KeyboardAvoidingViewProps,\n  { appState: AppStateStatus; bottom: number; isKeyboardOpen: boolean }\n> {\n  static defaultProps: Pick<\n    KeyboardAvoidingViewProps,\n    'behavior' | 'enabled' | 'keyboardVerticalOffset'\n  > = {\n    behavior: Platform.OS === 'ios' ? 'padding' : 'position',\n    enabled: true,\n    keyboardVerticalOffset: Platform.OS === 'ios' ? 86.5 : -300, // default MessageInput height\n  };\n\n  _frame: LayoutRectangle | null = null;\n  _keyboardEvent: KeyboardEvent | null = null;\n  _subscriptions: EmitterSubscription[] = [];\n  _appStateSubscription: NativeEventSubscription | null = null;\n  viewRef: React.RefObject<View>;\n  _initialFrameHeight = 0;\n  constructor(props: KeyboardAvoidingViewProps) {\n    super(props);\n    this.state = {\n      appState: AppState.currentState,\n      bottom: 0,\n      isKeyboardOpen: false,\n    };\n    this.viewRef = React.createRef();\n  }\n\n  _relativeKeyboardHeight(keyboardFrame: ScreenRect) {\n    const frame = this._frame;\n    if (!frame || !keyboardFrame) {\n      return 0;\n    }\n\n    const keyboardY = keyboardFrame.screenY - (this.props.keyboardVerticalOffset ?? 0);\n    const relativeHeight = frame.y + frame.height - keyboardY;\n\n    /**\n     * When the StatusBar is translucent there is an issue\n     * where the relative keyboard height is returned incorrectly\n     * instead of 0 when closed.\n     */\n    if (Platform.OS === 'android') {\n      const barHeights = Dimensions.get('screen').height - Dimensions.get('window').height;\n      if (relativeHeight <= Math.max(barHeights, StatusBar.currentHeight ?? 0)) {\n        return 0;\n      }\n    }\n\n    // Calculate the displacement needed for the view such that it\n    // no longer overlaps with the keyboard\n    return Math.max(relativeHeight, 0);\n  }\n\n  _onKeyboardChange: KeyboardEventListener = (event) => {\n    this._keyboardEvent = event;\n    this._updateBottomIfNecessary();\n  };\n\n  _onLayout: (event: LayoutChangeEvent) => void = (event) => {\n    this._frame = event.nativeEvent.layout;\n    if (!this._initialFrameHeight) {\n      // save the initial frame height, before the keyboard is visible\n      this._initialFrameHeight = this._frame.height;\n    }\n\n    this._updateBottomIfNecessary();\n  };\n\n  _updateBottomIfNecessary = () => {\n    if (this._keyboardEvent === null) {\n      this.setState({ bottom: 0 });\n      return;\n    }\n\n    const { duration, easing, endCoordinates } = this._keyboardEvent;\n    const height = this._relativeKeyboardHeight(endCoordinates);\n\n    if (this.state.bottom === height) {\n      return;\n    }\n\n    if (duration && easing) {\n      LayoutAnimation.configureNext({\n        // We have to pass the duration equal to minimal accepted duration defined here: RCTLayoutAnimation.m\n        duration: duration > 10 ? duration : 10,\n        update: {\n          duration: duration > 10 ? duration : 10,\n          type: LayoutAnimation.Types[easing] || 'keyboard',\n        },\n      });\n    }\n    this.setState({ bottom: height });\n  };\n\n  _handleAppStateChange = (nextAppState: AppStateStatus) => {\n    if (this.state.appState.match(/inactive|background/) && nextAppState === 'active') {\n      this.setKeyboardListeners();\n    }\n\n    if (nextAppState.match(/inactive|background/)) {\n      this.unsetKeyboardListeners();\n    }\n\n    this.setState({ appState: nextAppState });\n  };\n\n  setKeyboardListeners = () => {\n    if (Platform.OS === 'ios') {\n      this._subscriptions = [\n        Keyboard.addListener('keyboardWillChangeFrame', this._onKeyboardChange),\n      ];\n    } else {\n      this._subscriptions = [\n        Keyboard.addListener('keyboardDidHide', this._onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', this._onKeyboardChange),\n      ];\n    }\n\n    this._subscriptions.push(\n      Keyboard.addListener('keyboardDidHide', () => {\n        this.setState({ isKeyboardOpen: false });\n      }),\n      Keyboard.addListener('keyboardDidShow', () => {\n        this.setState({ isKeyboardOpen: true });\n      }),\n    );\n  };\n\n  unsetKeyboardListeners = () => {\n    this._subscriptions = this._subscriptions.filter((subscription) => {\n      subscription.remove();\n      return false;\n    });\n  };\n\n  dismissKeyboard: () => Promise<void> | undefined = () => {\n    if (!this.state.isKeyboardOpen) {\n      return;\n    }\n\n    return new Promise((resolve) => {\n      const subscription = Keyboard.addListener('keyboardDidHide', () => {\n        resolve();\n        subscription.remove();\n      });\n\n      Keyboard.dismiss();\n    });\n  };\n\n  componentDidMount() {\n    this._appStateSubscription = AppState.addEventListener('change', this._handleAppStateChange);\n    this.setKeyboardListeners();\n  }\n\n  componentWillUnmount() {\n    // Following if-else condition to avoid deprecated warning coming RN 0.65\n    if (this._appStateSubscription?.remove) {\n      this._appStateSubscription?.remove();\n    } else {\n      AppState.removeEventListener('change', this._handleAppStateChange);\n    }\n    this.unsetKeyboardListeners();\n  }\n\n  render() {\n    const { behavior, children, contentContainerStyle, enabled, style, ...props } = this.props;\n    const bottomHeight = enabled ? this.state.bottom : 0;\n    switch (behavior) {\n      case 'height':\n        // eslint-disable-next-line no-case-declarations\n        let heightStyle;\n        if (this._frame !== null && this.state.bottom > 0) {\n          // Note that we only apply a height change when there is keyboard present,\n          // i.e. this.state.bottom is greater than 0. If we remove that condition,\n          // this.frame.height will never go back to its original value.\n          // When height changes, we need to disable flex.\n          heightStyle = {\n            flex: 0,\n            height: this._initialFrameHeight - bottomHeight,\n          };\n        }\n        return (\n          <KeyboardProvider value={{ dismissKeyboard: this.dismissKeyboard }}>\n            <View\n              onLayout={this._onLayout}\n              ref={this.viewRef}\n              style={StyleSheet.compose(style, heightStyle)}\n              {...props}\n            >\n              {children}\n            </View>\n          </KeyboardProvider>\n        );\n\n      case 'position':\n        return (\n          <KeyboardProvider value={{ dismissKeyboard: this.dismissKeyboard }}>\n            <View onLayout={this._onLayout} ref={this.viewRef} style={style} {...props}>\n              <View\n                style={StyleSheet.compose(contentContainerStyle, {\n                  bottom: bottomHeight,\n                })}\n              >\n                {children}\n              </View>\n            </View>\n          </KeyboardProvider>\n        );\n\n      case 'padding':\n        return (\n          <KeyboardProvider value={{ dismissKeyboard: this.dismissKeyboard }}>\n            <View\n              onLayout={this._onLayout}\n              ref={this.viewRef}\n              style={StyleSheet.compose(style, { paddingBottom: bottomHeight })}\n              {...props}\n            >\n              {children}\n            </View>\n          </KeyboardProvider>\n        );\n\n      default:\n        return (\n          <KeyboardProvider value={{ dismissKeyboard: this.dismissKeyboard }}>\n            <View onLayout={this._onLayout} ref={this.viewRef} style={style} {...props}>\n              {children}\n            </View>\n          </KeyboardProvider>\n        );\n    }\n  }\n}\n"]}