{"version":3,"sources":["InputEditingStateHeader.tsx"],"names":["styles","StyleSheet","create","editingBoxHeader","alignItems","flexDirection","justifyContent","paddingBottom","editingBoxHeaderTitle","fontSize","fontWeight","InputEditingStateHeaderWithContext","clearEditingState","disabled","resetInput","t","theme","colors","black","grey","grey_gainsboro","messageInput","editingStateHeader","color","areEqual","prevProps","nextProps","prevDisabled","nextDisabled","disabledEqual","MemoizedInputEditingStateHeader","React","memo","InputEditingStateHeader","props","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport type { ChannelContextValue } from '../../../contexts/channelContext/ChannelContext';\nimport {\n  MessageInputContextValue,\n  useMessageInputContext,\n} from '../../../contexts/messageInputContext/MessageInputContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\nimport { useTranslationContext } from '../../../contexts/translationContext/TranslationContext';\n\nimport { CircleClose, Edit } from '../../../icons';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\nconst styles = StyleSheet.create({\n  editingBoxHeader: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingBottom: 10,\n  },\n  editingBoxHeaderTitle: {\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n});\n\nexport type InputEditingStateHeaderPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<MessageInputContextValue<StreamChatGenerics>, 'clearEditingState' | 'resetInput'> &\n  Pick<ChannelContextValue<StreamChatGenerics>, 'disabled'>;\n\nexport const InputEditingStateHeaderWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  clearEditingState,\n  disabled,\n  resetInput,\n}: InputEditingStateHeaderPropsWithContext<StreamChatGenerics>) => {\n  const { t } = useTranslationContext();\n  const {\n    theme: {\n      colors: { black, grey, grey_gainsboro },\n      messageInput: {\n        editingStateHeader: { editingBoxHeader, editingBoxHeaderTitle },\n      },\n    },\n  } = useTheme();\n\n  return (\n    <View style={[styles.editingBoxHeader, editingBoxHeader]}>\n      <Edit pathFill={grey_gainsboro} />\n      <Text style={[styles.editingBoxHeaderTitle, { color: black }, editingBoxHeaderTitle]}>\n        {t('Editing Message')}\n      </Text>\n      <TouchableOpacity\n        disabled={disabled}\n        onPress={() => {\n          resetInput();\n          clearEditingState();\n        }}\n        testID='close-button'\n      >\n        <CircleClose pathFill={grey} />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: InputEditingStateHeaderPropsWithContext<StreamChatGenerics>,\n  nextProps: InputEditingStateHeaderPropsWithContext<StreamChatGenerics>,\n) => {\n  const { disabled: prevDisabled } = prevProps;\n  const { disabled: nextDisabled } = nextProps;\n\n  const disabledEqual = prevDisabled === nextDisabled;\n  if (!disabledEqual) return false;\n\n  return true;\n};\n\nconst MemoizedInputEditingStateHeader = React.memo(\n  InputEditingStateHeaderWithContext,\n  areEqual,\n) as typeof InputEditingStateHeaderWithContext;\n\nexport type InputEditingStateHeaderProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<InputEditingStateHeaderPropsWithContext<StreamChatGenerics>>;\n\nexport const InputEditingStateHeader = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: InputEditingStateHeaderProps<StreamChatGenerics>,\n) => {\n  const { clearEditingState, resetInput } = useMessageInputContext<StreamChatGenerics>();\n\n  return <MemoizedInputEditingStateHeader {...{ clearEditingState, resetInput }} {...props} />;\n};\n\nInputEditingStateHeader.displayName = 'EditingStateHeader{messageInput}';\n"]}