{"version":3,"sources":["CooldownTimer.tsx"],"names":["CONTAINER_SIZE","CONTAINER_HORIZONTAL_PADDING","EXTRA_CHARACTER_PADDING","normalizeWidth","seconds","length","CooldownTimer","props","theme","colors","black","grey_gainsboro","messageInput","cooldownTimer","container","text","styles","backgroundColor","width","color","StyleSheet","create","alignItems","borderRadius","height","justifyContent","minWidth","paddingHorizontal","fontSize","fontWeight"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;AAMA,IAAMA,cAAc,GAAG,EAAvB;AACA,IAAMC,4BAA4B,GAAG,CAArC;AACA,IAAMC,uBAAuB,GAAGF,cAAc,GAAGC,4BAA4B,GAAG,CAAhF;;AAOA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD;AAAA,SACrBJ,cAAc,GAAGE,uBAAuB,IAAI,MAAGE,OAAH,EAAaC,MAAb,GAAsB,CAA1B,CADnB;AAAA,CAAvB;;AASO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAA+B;AAC1D,MAAQH,OAAR,GAAoBG,KAApB,CAAQH,OAAR;;AACA,kBAOI,6BAPJ;AAAA,kCACEI,KADF;AAAA,8CAEIC,MAFJ;AAAA,MAEcC,KAFd,yBAEcA,KAFd;AAAA,MAEqBC,cAFrB,yBAEqBA,cAFrB;AAAA,8CAGIC,YAHJ,CAIMC,aAJN;AAAA,MAIuBC,SAJvB,yBAIuBA,SAJvB;AAAA,MAIkCC,IAJlC,yBAIkCA,IAJlC;;AASA,SACE,gCAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACLC,MAAM,CAACF,SADF,EAEL;AACEG,MAAAA,eAAe,EAAEN,cADnB;AAEEO,MAAAA,KAAK,EAAEf,cAAc,CAACC,OAAD;AAFvB,KAFK,EAMLU,SANK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE,gCAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACE,MAAM,CAACD,IAAR,EAAc;AAAEI,MAAAA,KAAK,EAAET;AAAT,KAAd,EAAgCK,IAAhC,CAAb;AAAoD,IAAA,MAAM,EAAC,kBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,OADH,CAVF,CADF;AAgBD,CA3BM;;;;AA6BP,IAAMY,MAAM,GAAGI,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,YAAY,EAAEvB,cAAc,GAAG,CAFtB;AAGTwB,IAAAA,MAAM,EAAExB,cAHC;AAITyB,IAAAA,cAAc,EAAE,QAJP;AAKTC,IAAAA,QAAQ,EAAE1B,cALD;AAMT2B,IAAAA,iBAAiB,EAAE1B;AANV,GADoB;AAS/Bc,EAAAA,IAAI,EAAE;AAAEa,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,UAAU,EAAE;AAA5B;AATyB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\n\nexport type CooldownTimerProps = {\n  seconds: number;\n};\n\nconst CONTAINER_SIZE = 24;\nconst CONTAINER_HORIZONTAL_PADDING = 6;\nconst EXTRA_CHARACTER_PADDING = CONTAINER_SIZE - CONTAINER_HORIZONTAL_PADDING * 2;\n\n/**\n * To avoid the container jumping between sizes when there are more\n * than one character in the width of the container since we aren't\n * using a monospaced font.\n */\nconst normalizeWidth = (seconds: number) =>\n  CONTAINER_SIZE + EXTRA_CHARACTER_PADDING * (`${seconds}`.length - 1);\n\n/**\n * Renders an amount of seconds left for a cooldown to finish.\n *\n * See `useCountdown` for an example of how to set a countdown\n * to use as the source of `seconds`.\n **/\nexport const CooldownTimer = (props: CooldownTimerProps) => {\n  const { seconds } = props;\n  const {\n    theme: {\n      colors: { black, grey_gainsboro },\n      messageInput: {\n        cooldownTimer: { container, text },\n      },\n    },\n  } = useTheme();\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: grey_gainsboro,\n          width: normalizeWidth(seconds),\n        },\n        container,\n      ]}\n    >\n      <Text style={[styles.text, { color: black }, text]} testID='cooldown-seconds'>\n        {seconds}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    borderRadius: CONTAINER_SIZE / 2,\n    height: CONTAINER_SIZE,\n    justifyContent: 'center',\n    minWidth: CONTAINER_SIZE,\n    paddingHorizontal: CONTAINER_HORIZONTAL_PADDING,\n  },\n  text: { fontSize: 16, fontWeight: '600' },\n});\n"]}