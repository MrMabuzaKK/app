{"version":3,"sources":["useCountdown.ts"],"names":["useCountdown","end","seconds","setSeconds","intervalId","startCountdown","setInterval","previous","next","clearInterval","ONE_SECOND_IN_MS","secondsUntilEnd"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAOO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAe;AACzC,kBAA8B,qBAAS,CAAT,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAMA,wBAAU,YAAM;AACd,QAAIC,UAAJ;;AAEA,QAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACH,OAAD,EAAqB;AAC1CC,MAAAA,UAAU,CAACD,OAAD,CAAV;AACAE,MAAAA,UAAU,GAAGE,WAAW,CAAC,YAAM;AAC7BH,QAAAA,UAAU,CAAC,UAACI,QAAD,EAAsB;AAC/B,cAAMC,IAAI,GAAGD,QAAQ,GAAG,CAAxB;;AACA,cAAIC,IAAI,GAAG,CAAX,EAAc;AAEZC,YAAAA,aAAa,CAACL,UAAD,CAAb;AACA,mBAAO,CAAP;AACD;;AACD,iBAAOI,IAAP;AACD,SARS,CAAV;AASD,OAVuB,EAUrBE,sBAVqB,CAAxB;AAWD,KAbD;;AAeA,QAAMC,eAAe,GAAG,wBAAaV,GAAb,CAAxB;;AACA,QAAIU,eAAe,GAAG,CAAtB,EAAyB;AACvBN,MAAAA,cAAc,CAACM,eAAD,CAAd;AACD;;AAED,WAAO,YAAM;AACX,UAAIP,UAAJ,EAAgB;AACdK,QAAAA,aAAa,CAACL,UAAD,CAAb;AACD;AACF,KAJD;AAKD,GA5BD,EA4BG,CAACH,GAAD,CA5BH;AA8BA,SAAO;AAAEC,IAAAA,OAAO,EAAPA;AAAF,GAAP;AACD,CAtCM","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { ONE_SECOND_IN_MS, secondsUntil } from '../../../utils/date';\n\n/**\n * Start a countdown to a set date, in seconds.\n * The date passed in as an argument to useCountdown\n * will be rounded up to the nearest second.\n **/\nexport const useCountdown = (end: Date) => {\n  const [seconds, setSeconds] = useState(0);\n\n  /**\n   * When a new `end` is set for the countdown, start the counter if\n   * the `end` is in the future.\n   **/\n  useEffect(() => {\n    let intervalId: NodeJS.Timer;\n\n    const startCountdown = (seconds: number) => {\n      setSeconds(seconds);\n      intervalId = setInterval(() => {\n        setSeconds((previous: number) => {\n          const next = previous - 1;\n          if (next < 1) {\n            /* Don't trigger an unnecessary rerender when done */\n            clearInterval(intervalId);\n            return 0;\n          }\n          return next;\n        });\n      }, ONE_SECOND_IN_MS);\n    };\n\n    const secondsUntilEnd = secondsUntil(end);\n    if (secondsUntilEnd > 0) {\n      startCountdown(secondsUntilEnd);\n    }\n\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [end]);\n\n  return { seconds };\n};\n"]}