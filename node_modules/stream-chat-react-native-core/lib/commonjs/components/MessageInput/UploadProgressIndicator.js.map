{"version":3,"sources":["UploadProgressIndicator.tsx"],"names":["REFRESH_ICON_SIZE","styles","StyleSheet","create","activityIndicatorContainer","alignItems","bottom","justifyContent","left","position","right","top","container","height","width","overflowHidden","overflow","overlay","opacity","retryButtonContainer","UploadProgressIndicator","props","action","children","style","type","theme","overlayColor","colors","messageInput","uploadProgressIndicator","ProgressIndicatorTypes","INACTIVE","backgroundColor","NOT_SUPPORTED","IN_PROGRESS","RETRY","InProgressIndicator","white_smoke","RetryIndicator","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ActivityIndicator,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TouchableOpacity,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { Refresh } from '../../icons';\nimport { ProgressIndicatorTypes } from '../../utils/utils';\n\nconst REFRESH_ICON_SIZE = 18;\n\nconst styles = StyleSheet.create({\n  activityIndicatorContainer: {\n    alignItems: 'center',\n    bottom: 0,\n    justifyContent: 'center',\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n  container: {\n    alignItems: 'center',\n    height: '100%',\n    justifyContent: 'center',\n    position: 'absolute',\n    width: '100%',\n  },\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n  overlay: {\n    alignItems: 'center',\n    height: '100%',\n    justifyContent: 'center',\n    opacity: 0,\n    position: 'absolute',\n    width: '100%',\n  },\n  retryButtonContainer: {\n    alignItems: 'center',\n    bottom: 0,\n    justifyContent: 'center',\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n});\n\nexport type UploadProgressIndicatorProps = {\n  /** Action triggered when clicked indicator */\n  action?: (event: GestureResponderEvent) => void;\n  /** style */\n  style?: StyleProp<ViewStyle>;\n  /** Type of active indicator */\n  type?: 'in_progress' | 'retry' | 'not_supported' | 'inactive' | null;\n};\n\nexport const UploadProgressIndicator: React.FC<UploadProgressIndicatorProps> = (props) => {\n  const { action, children, style, type } = props;\n\n  const {\n    theme: {\n      colors: { overlay: overlayColor },\n      messageInput: {\n        uploadProgressIndicator: { container, overlay },\n      },\n    },\n  } = useTheme();\n\n  return type === ProgressIndicatorTypes.INACTIVE ? (\n    <View style={[styles.overflowHidden, style]} testID='inactive-upload-progress-indicator'>\n      {children}\n    </View>\n  ) : (\n    <View style={[styles.overflowHidden, style]} testID='active-upload-progress-indicator'>\n      {children}\n      <View style={[styles.overlay, { backgroundColor: overlayColor }, overlay]} />\n      <View\n        style={[\n          type === ProgressIndicatorTypes.NOT_SUPPORTED ? styles.overflowHidden : styles.container,\n          { backgroundColor: overlayColor },\n          container,\n        ]}\n        testID='not-supported-upload-progress-indicator'\n      >\n        {type === ProgressIndicatorTypes.IN_PROGRESS && <InProgressIndicator />}\n        {type === ProgressIndicatorTypes.RETRY && <RetryIndicator action={action} />}\n      </View>\n    </View>\n  );\n};\n\nconst InProgressIndicator = () => {\n  const {\n    theme: {\n      colors: { white_smoke },\n    },\n  } = useTheme();\n\n  return (\n    <View style={styles.activityIndicatorContainer}>\n      <ActivityIndicator color={white_smoke} testID='upload-progress-indicator' />\n    </View>\n  );\n};\n\nconst RetryIndicator = ({ action }: Pick<UploadProgressIndicatorProps, 'action'>) => {\n  const {\n    theme: {\n      colors: { white_smoke },\n    },\n  } = useTheme();\n\n  return (\n    <TouchableOpacity onPress={action} style={styles.retryButtonContainer}>\n      <Refresh\n        height={REFRESH_ICON_SIZE}\n        pathFill={white_smoke}\n        testID='retry-upload-progress-indicator'\n        width={REFRESH_ICON_SIZE}\n      />\n    </TouchableOpacity>\n  );\n};\n\nUploadProgressIndicator.displayName =\n  'UploadProgressIndicator{messageInput{uploadProgressIndicator}}';\n"]}