var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Giphy = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _ImageGalleryContext = require("../../contexts/imageGalleryContext/ImageGalleryContext");

var _MessageContext = require("../../contexts/messageContext/MessageContext");

var _MessagesContext = require("../../contexts/messagesContext/MessagesContext");

var _OverlayContext = require("../../contexts/overlayContext/OverlayContext");

var _ThemeContext = require("../../contexts/themeContext/ThemeContext");

var _icons = require("../../icons");

var _Lightning = require("../../icons/Lightning");

var _utils = require("../../utils/utils");

var _this = this,
    _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Attachment/Giphy.tsx";

var styles = _reactNative.StyleSheet.create({
  actionsRow: {
    flexDirection: 'row'
  },
  buttonContainer: {
    alignItems: 'center',
    borderTopWidth: 1,
    flex: 1,
    justifyContent: 'center'
  },
  cancel: {
    fontSize: 14,
    fontWeight: '600',
    paddingVertical: 16
  },
  container: {
    overflow: 'hidden',
    width: 270
  },
  giphy: {
    alignSelf: 'center',
    borderRadius: 2,
    height: 170,
    maxWidth: 270,
    width: 270
  },
  giphyContainer: {
    alignItems: 'center',
    borderRadius: 12,
    flexDirection: 'row',
    height: 24,
    justifyContent: 'center',
    width: 68
  },
  giphyHeaderText: {
    fontSize: 16,
    fontWeight: '600'
  },
  giphyHeaderTitle: {
    fontSize: 14,
    marginLeft: 8
  },
  giphyMask: {
    bottom: 8,
    left: 8,
    position: 'absolute'
  },
  giphyMaskText: {
    fontSize: 13,
    fontWeight: '600'
  },
  header: {
    alignItems: 'center',
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 8,
    width: '60%'
  },
  selectionContainer: {
    borderBottomRightRadius: 0,
    borderRadius: 16,
    borderWidth: 1,
    overflow: 'hidden',
    width: 272
  },
  selectionImageContainer: {
    alignSelf: 'center',
    margin: 1
  },
  send: {
    fontSize: 14,
    fontWeight: '600',
    paddingVertical: 16
  },
  shuffle: {
    fontSize: 14,
    fontWeight: '600',
    paddingVertical: 16
  },
  shuffleButton: {
    alignItems: 'center',
    borderRadius: 16,
    borderWidth: 1,
    height: 32,
    justifyContent: 'center',
    width: 32
  }
});

var GiphyWithContext = function GiphyWithContext(props) {
  var additionalTouchableProps = props.additionalTouchableProps,
      attachment = props.attachment,
      giphyVersion = props.giphyVersion,
      handleAction = props.handleAction,
      isMyMessage = props.isMyMessage,
      message = props.message,
      _onLongPress = props.onLongPress,
      _onPress = props.onPress,
      _onPressIn = props.onPressIn,
      preventPress = props.preventPress,
      setImage = props.setImage,
      setImages = props.setImages,
      setOverlay = props.setOverlay;
  var actions = attachment.actions,
      giphyData = attachment.giphy,
      image_url = attachment.image_url,
      thumb_url = attachment.thumb_url,
      title = attachment.title,
      type = attachment.type;

  var _useTheme = (0, _ThemeContext.useTheme)(),
      _useTheme$theme = _useTheme.theme,
      _useTheme$theme$color = _useTheme$theme.colors,
      accent_blue = _useTheme$theme$color.accent_blue,
      black = _useTheme$theme$color.black,
      grey = _useTheme$theme$color.grey,
      grey_dark = _useTheme$theme$color.grey_dark,
      grey_gainsboro = _useTheme$theme$color.grey_gainsboro,
      label_bg_transparent = _useTheme$theme$color.label_bg_transparent,
      white = _useTheme$theme$color.white,
      _useTheme$theme$messa = _useTheme$theme.messageSimple.giphy,
      buttonContainer = _useTheme$theme$messa.buttonContainer,
      cancel = _useTheme$theme$messa.cancel,
      container = _useTheme$theme$messa.container,
      giphy = _useTheme$theme$messa.giphy,
      giphyContainer = _useTheme$theme$messa.giphyContainer,
      giphyHeaderText = _useTheme$theme$messa.giphyHeaderText,
      giphyHeaderTitle = _useTheme$theme$messa.giphyHeaderTitle,
      giphyMask = _useTheme$theme$messa.giphyMask,
      giphyMaskText = _useTheme$theme$messa.giphyMaskText,
      header = _useTheme$theme$messa.header,
      selectionContainer = _useTheme$theme$messa.selectionContainer,
      send = _useTheme$theme$messa.send,
      shuffle = _useTheme$theme$messa.shuffle;

  var uri = image_url || thumb_url;
  var giphyDimensions = {};

  var defaultOnPress = function defaultOnPress() {
    setImages([message]);
    setImage({
      messageId: message.id,
      url: uri
    });
    setOverlay('gallery');
  };

  if (type === 'giphy' && giphyData) {
    var giphyVersionInfo = giphyData[giphyVersion];
    uri = giphyVersionInfo.url;
    giphyDimensions.height = parseFloat(giphyVersionInfo.height);
    giphyDimensions.width = parseFloat(giphyVersionInfo.width);
  }

  if (!uri) return null;
  return actions ? _react["default"].createElement(_reactNative.View, {
    style: [styles.selectionContainer, {
      backgroundColor: white,
      borderColor: black + "0D"
    }, selectionContainer],
    testID: "giphy-action-attachment",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 200,
      columnNumber: 5
    }
  }, _react["default"].createElement(_reactNative.View, {
    style: [styles.header, header],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 208,
      columnNumber: 7
    }
  }, _react["default"].createElement(_icons.GiphyIcon, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 209,
      columnNumber: 9
    }
  }), _react["default"].createElement(_reactNative.Text, {
    style: [styles.giphyHeaderText, giphyHeaderText],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 210,
      columnNumber: 9
    }
  }, "Giphy"), _react["default"].createElement(_reactNative.Text, {
    style: [styles.giphyHeaderTitle, giphyHeaderTitle, {
      color: grey_dark
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 211,
      columnNumber: 9
    }
  }, "/giphy " + title)), _react["default"].createElement(_reactNative.View, {
    style: styles.selectionImageContainer,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 215,
      columnNumber: 7
    }
  }, _react["default"].createElement(_reactNative.Image, {
    resizeMode: "contain",
    source: {
      uri: (0, _utils.makeImageCompatibleUrl)(uri)
    },
    style: [styles.giphy, giphyDimensions, giphy],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 216,
      columnNumber: 9
    }
  })), _react["default"].createElement(_reactNative.View, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 222,
      columnNumber: 7
    }
  }, _react["default"].createElement(_reactNative.View, {
    style: styles.actionsRow,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 223,
      columnNumber: 9
    }
  }, _react["default"].createElement(_reactNative.TouchableOpacity, {
    onPress: function onPress() {
      if (actions != null && actions[2].name && actions != null && actions[2].value && handleAction) {
        handleAction(actions[2].name, actions[2].value);
      }
    },
    style: [styles.buttonContainer, {
      borderColor: grey_gainsboro,
      borderRightWidth: 1
    }, buttonContainer],
    testID: (actions == null ? void 0 : actions[2].value) + "-action-button",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 224,
      columnNumber: 11
    }
  }, _react["default"].createElement(_reactNative.Text, {
    style: [styles.cancel, {
      color: grey
    }, cancel],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237,
      columnNumber: 13
    }
  }, actions == null ? void 0 : actions[2].text)), _react["default"].createElement(_reactNative.TouchableOpacity, {
    onPress: function onPress() {
      if (actions != null && actions[1].name && actions != null && actions[1].value && handleAction) {
        handleAction(actions[1].name, actions[1].value);
      }
    },
    style: [styles.buttonContainer, {
      borderColor: grey_gainsboro,
      borderRightWidth: 1
    }, buttonContainer],
    testID: (actions == null ? void 0 : actions[1].value) + "-action-button",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 239,
      columnNumber: 11
    }
  }, _react["default"].createElement(_reactNative.Text, {
    style: [styles.shuffle, {
      color: grey
    }, shuffle],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 252,
      columnNumber: 13
    }
  }, actions == null ? void 0 : actions[1].text)), _react["default"].createElement(_reactNative.TouchableOpacity, {
    onPress: function onPress() {
      if (actions != null && actions[0].name && actions != null && actions[0].value && handleAction) {
        handleAction(actions[0].name, actions[0].value);
      }
    },
    style: [styles.buttonContainer, {
      borderColor: grey_gainsboro
    }, buttonContainer],
    testID: (actions == null ? void 0 : actions[0].value) + "-action-button",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 254,
      columnNumber: 11
    }
  }, _react["default"].createElement(_reactNative.Text, {
    style: [styles.send, {
      color: accent_blue
    }, send],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 263,
      columnNumber: 13
    }
  }, actions == null ? void 0 : actions[0].text))))) : _react["default"].createElement(_reactNative.TouchableOpacity, (0, _extends2["default"])({
    disabled: preventPress,
    onLongPress: function onLongPress(event) {
      if (_onLongPress) {
        _onLongPress({
          emitter: 'giphy',
          event: event
        });
      }
    },
    onPress: function onPress(event) {
      if (_onPress) {
        _onPress({
          defaultHandler: defaultOnPress,
          emitter: 'giphy',
          event: event
        });
      }
    },
    onPressIn: function onPressIn(event) {
      if (_onPressIn) {
        _onPressIn({
          emitter: 'giphy',
          event: event
        });
      }
    },
    testID: "giphy-attachment"
  }, additionalTouchableProps, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 269,
      columnNumber: 5
    }
  }), _react["default"].createElement(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: isMyMessage ? grey_gainsboro : white
    }, container],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 299,
      columnNumber: 7
    }
  }, _react["default"].createElement(_reactNative.Image, {
    resizeMode: "contain",
    source: {
      uri: (0, _utils.makeImageCompatibleUrl)(uri)
    },
    style: [styles.giphy, giphyDimensions, giphy],
    testID: "giphy-attachment-image",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 306,
      columnNumber: 9
    }
  }), _react["default"].createElement(_reactNative.View, {
    style: [styles.giphyMask, giphyMask],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 312,
      columnNumber: 9
    }
  }, _react["default"].createElement(_reactNative.View, {
    style: [styles.giphyContainer, {
      backgroundColor: label_bg_transparent
    }, giphyContainer],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 313,
      columnNumber: 11
    }
  }, _react["default"].createElement(_Lightning.Lightning, {
    height: 16,
    pathFill: white,
    width: 16,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 320,
      columnNumber: 13
    }
  }), _react["default"].createElement(_reactNative.Text, {
    style: [styles.giphyMaskText, {
      color: white
    }, giphyMaskText],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 321,
      columnNumber: 13
    }
  }, type == null ? void 0 : type.toUpperCase())))));
};

var areEqual = function areEqual(prevProps, nextProps) {
  var _prevProps$attachment = prevProps.attachment,
      prevActions = _prevProps$attachment.actions,
      prevImageUrl = _prevProps$attachment.image_url,
      prevThumbUrl = _prevProps$attachment.thumb_url,
      prevGiphyVersion = prevProps.giphyVersion,
      prevIsMyMessage = prevProps.isMyMessage;
  var _nextProps$attachment = nextProps.attachment,
      nextActions = _nextProps$attachment.actions,
      nextImageUrl = _nextProps$attachment.image_url,
      nextThumbUrl = _nextProps$attachment.thumb_url,
      nextGiphyVersion = nextProps.giphyVersion,
      nextIsMyMessage = nextProps.isMyMessage;
  var imageUrlEqual = prevImageUrl === nextImageUrl;
  if (!imageUrlEqual) return false;
  var thumbUrlEqual = prevThumbUrl === nextThumbUrl;
  if (!thumbUrlEqual) return false;
  var actionsEqual = Array.isArray(prevActions) === Array.isArray(nextActions) && (Array.isArray(prevActions) && Array.isArray(nextActions) && prevActions.length === nextActions.length || prevActions === nextActions);
  if (!actionsEqual) return false;
  var giphyVersionEqual = prevGiphyVersion === nextGiphyVersion;
  if (!giphyVersionEqual) return false;
  var isMyMessageEqual = prevIsMyMessage === nextIsMyMessage;
  if (!isMyMessageEqual) return false;
  return true;
};

var MemoizedGiphy = _react["default"].memo(GiphyWithContext, areEqual);

var Giphy = function Giphy(props) {
  var _useMessageContext = (0, _MessageContext.useMessageContext)(),
      handleAction = _useMessageContext.handleAction,
      isMyMessage = _useMessageContext.isMyMessage,
      message = _useMessageContext.message,
      onLongPress = _useMessageContext.onLongPress,
      onPress = _useMessageContext.onPress,
      onPressIn = _useMessageContext.onPressIn,
      preventPress = _useMessageContext.preventPress;

  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
      additionalTouchableProps = _useMessagesContext.additionalTouchableProps,
      giphyVersion = _useMessagesContext.giphyVersion;

  var _useImageGalleryConte = (0, _ImageGalleryContext.useImageGalleryContext)(),
      setImage = _useImageGalleryConte.setImage,
      setImages = _useImageGalleryConte.setImages;

  var _useOverlayContext = (0, _OverlayContext.useOverlayContext)(),
      setOverlay = _useOverlayContext.setOverlay;

  return _react["default"].createElement(MemoizedGiphy, (0, _extends2["default"])({
    additionalTouchableProps: additionalTouchableProps,
    giphyVersion: giphyVersion,
    handleAction: handleAction,
    isMyMessage: isMyMessage,
    message: message,
    onLongPress: onLongPress,
    onPress: onPress,
    onPressIn: onPressIn,
    preventPress: preventPress,
    setImage: setImage,
    setImages: setImages,
    setOverlay: setOverlay
  }, props, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 391,
      columnNumber: 5
    }
  }));
};

exports.Giphy = Giphy;
Giphy.displayName = 'Giphy{messageSimple{giphy}}';
//# sourceMappingURL=Giphy.js.map