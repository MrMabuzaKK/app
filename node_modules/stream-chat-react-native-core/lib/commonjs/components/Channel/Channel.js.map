{"version":3,"sources":["Channel.tsx"],"names":["styles","StyleSheet","create","selectChannel","fontWeight","padding","reactionData","Icon","LoveReaction","type","ThumbsUpReaction","ThumbsDownReaction","LOLReaction","WutReaction","scrollToFirstUnreadThreshold","defaultThrottleInterval","defaultDebounceInterval","throttleOptions","leading","trailing","debounceOptions","unreadMessagesOnInitialLoadLimit","ChannelWithContext","props","additionalKeyboardAvoidingViewProps","additionalTextInputProps","additionalTouchableProps","allowThreadMessagesInChannel","AttachButton","AttachButtonDefault","Attachment","AttachmentDefault","AttachmentActions","AttachmentActionsDefault","AutoCompleteSuggestionHeader","AutoCompleteSuggestionHeaderDefault","AutoCompleteSuggestionItem","AutoCompleteSuggestionItemDefault","AutoCompleteSuggestionList","AutoCompleteSuggestionListDefault","autoCompleteSuggestionsLimit","autoCompleteTriggerSettings","Card","CardDefault","CardCover","CardFooter","CardHeader","channel","children","client","CommandsButton","CommandsButtonDefault","compressImageQuality","CooldownTimer","CooldownTimerDefault","DateHeader","DateHeaderDefault","deletedMessagesVisibilityType","disableIfFrozenChannel","disableKeyboardCompatibleView","disableTypingIndicator","dismissKeyboardOnMessageTouch","doDocUploadRequest","doImageUploadRequest","doMarkReadRequest","doSendMessageRequest","doUpdateMessageRequest","EmptyStateIndicator","EmptyStateIndicatorDefault","enableMessageGroupingByUser","enforceUniqueReaction","FileAttachment","FileAttachmentDefault","FileAttachmentGroup","FileAttachmentGroupDefault","FileAttachmentIcon","FileIconDefault","FileUploadPreview","FileUploadPreviewDefault","FlatList","FlatListDefault","forceAlignMessages","formatDate","Gallery","GalleryDefault","Giphy","GiphyDefault","giphyEnabled","giphyVersion","globalUnreadCountLimit","handleBlock","handleCopy","handleDelete","handleEdit","handleFlag","handleMute","handlePinMessage","handleQuotedReply","handleReaction","handleRetry","handleThreadReply","hasCommands","hasFilePicker","hasImagePicker","hideDateSeparators","hideStickyDateHeader","ImageUploadPreview","ImageUploadPreviewDefault","initialScrollToFirstUnreadMessage","initialValue","InlineDateSeparator","InlineDateSeparatorDefault","InlineUnreadIndicator","InlineUnreadIndicatorDefault","Input","InputButtons","InputButtonsDefault","InputEditingStateHeader","InputEditingStateHeaderDefault","InputGiphySearch","InputGiphyCommandInputDefault","InputReplyStateHeader","InputReplyStateHeaderDefault","isAttachmentEqual","keyboardBehavior","KeyboardCompatibleView","KeyboardCompatibleViewDefault","keyboardVerticalOffset","legacyImageViewerSwipeBehaviour","LoadingErrorIndicator","LoadingErrorIndicatorDefault","LoadingIndicator","LoadingIndicatorDefault","loadingMoreProp","loadingMore","loadingMoreRecentProp","loadingMoreRecent","markdownRules","maxMessageLengthProp","maxMessageLength","maxNumberOfFiles","maxTimeBetweenGroupedMessages","mentionAllAppUsersEnabled","mentionAllAppUsersQuery","members","Message","MessageDefault","messageActions","MessageAvatar","MessageAvatarDefault","MessageContent","MessageContentDefault","messageContentOrder","MessageDeleted","MessageDeletedDefault","MessageFooter","MessageFooterDefault","MessageHeader","messageId","MessageList","MessageListDefault","MessagePinnedHeader","MessagePinnedHeaderDefault","MessageReplies","MessageRepliesDefault","MessageRepliesAvatars","MessageRepliesAvatarsDefault","messages","MessageSimple","MessageSimpleDefault","MessageStatus","MessageStatusDefault","MessageSystem","MessageSystemDefault","MessageText","MoreOptionsButton","MoreOptionsButtonDefault","myMessageTheme","newMessageStateUpdateThrottleInterval","NetworkDownIndicator","NetworkDownIndicatorDefault","numberOfLines","onChangeText","onLongPressMessage","overrideOwnCapabilities","onPressInMessage","onPressMessage","OverlayReactionList","OverlayReactionListDefault","ReactionList","ReactionListDefault","read","Reply","ReplyDefault","ScrollToBottomButton","ScrollToBottomButtonDefault","selectReaction","SendButton","SendButtonDefault","SendMessageDisallowedIndicator","SendMessageDisallowedIndicatorDefault","sendImageAsync","setInputRef","setMembers","setMessages","setRead","setThreadMessages","setTyping","setWatcherCount","setWatchers","shouldSyncChannel","ShowThreadMessageInChannelButton","ShowThreadMessageInChannelButtonDefault","stateUpdateThrottleInterval","StickyHeader","supportedReactions","t","threadProps","thread","threadList","threadMessages","typing","TypingIndicator","TypingIndicatorDefault","TypingIndicatorContainer","TypingIndicatorContainerDefault","UploadProgressIndicator","UploadProgressIndicatorDefault","UrlPreview","VideoThumbnail","VideoThumbnailDefault","watcherCount","watchers","theme","black","colors","deleted","setDeleted","editing","setEditing","error","setError","hasMore","setHasMore","lastRead","setLastRead","state","length","loading","setLoading","setLoadingMore","setLoadingMoreRecent","quotedMessage","setQuotedMessage","setThread","threadHasMore","setThreadHasMore","threadLoadingMore","setThreadLoadingMore","syncingChannel","setSyncingChannel","setTargetedMessage","targetedMessage","channelId","id","initChannel","initialized","loadChannel","loadChannelAtMessage","countUnread","loadChannelAtFirstUnreadMessage","copyChannelState","cancel","copyReadState","copyTypingState","loadMoreFinished","loadMoreThreadFinished","threadPropsExists","threads","handleAppBackground","sendEvent","parent_id","undefined","isAdmin","user","role","membership","isModerator","isOwner","markRead","disconnected","clientChannelConfig","read_events","current","copyMessagesState","watcher_count","connectionRecoveredHandler","connectionChangedHandler","event","online","resyncChannel","handleEvent","updatedThreadMessages","message","updatedThread","formatMessage","channelSubscriptions","clientSubscriptions","subscribe","push","on","cid","forEach","s","unsubscribe","channelQueryCall","queryCall","Date","Error","unreadCount","clearMessages","setIsUpToDate","offset","query","isUpToDate","mostRecentMessage","queryAfterMessage","created_at_before_or_equal","limit","created_at_after","after","before","queryAtMessage","watch","reloadThread","parentID","getReplies","queryResponse","updatedHasMore","getMessagesById","threadMessage","formattedMessage","console","warn","oldListTopMessage","oldListTopMessageId","oldListBottomMessage","newListTopMessage","newListBottomMessage","addMessagesSorted","parseMessage","created_at","toString","pinned_at","updated_at","failedMessages","filter","status","MessageStatusTypes","FAILED","map","failedThreadMessages","oldListTopMessageCreatedAt","oldListBottomMessageCreatedAt","newListTopMessageCreatedAt","newListBottomMessageCreatedAt","finalMessages","index","findIndex","slice","reloadChannel","queryBeforeMessage","id_lt","id_gte","getChannelConfigSafely","getConfig","_","updateMessage","updatedMessage","extraState","addMessageSorted","replaceMessage","oldMessage","newMessage","removeMessage","createMessagePreview","attachments","mentioned_users","text","extraFields","preview","__html","html","userID","userId","reactions","SENDING","quoted_message_id","find","quoted_message","sendMessageRequest","retrying","messageData","mentionedUser","messageResponse","sendMessage","RECEIVED","log","filterErrorMessages","messagePreview","commands","messageInput","retrySendMessage","statusPendingMessage","newMessages","loadMore","oldestMessage","oldestID","loadMoreRecent","recentMessage","loadMoreRecentFinished","editMessage","setEditingState","setQuotedMessageState","clearEditingState","clearQuotedMessageState","openThread","newThreadMessages","closeThread","newThreadHasMore","loadMoreThread","oldestMessageID","ownCapabilitiesContext","overrideCapabilities","channelContext","disabled","data","frozen","some","command","name","isChannelActive","inputMessageInputContext","max_message_length","messageListContext","messagesContext","suggestionsContext","threadContext","typingContext","color","height","Channel"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren, useCallback, useEffect, useRef, useState } from 'react';\nimport { KeyboardAvoidingViewProps, StyleSheet, Text, View } from 'react-native';\n\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\nimport {\n  ChannelState,\n  Channel as ChannelType,\n  ConnectionChangeEvent,\n  EventHandler,\n  logChatPromiseExecution,\n  MessageResponse,\n  SendMessageAPIResponse,\n  StreamChat,\n  Event as StreamEvent,\n  Message as StreamMessage,\n} from 'stream-chat';\n\nimport { useCreateChannelContext } from './hooks/useCreateChannelContext';\n\nimport { useCreateInputMessageInputContext } from './hooks/useCreateInputMessageInputContext';\n\nimport { useCreateMessagesContext } from './hooks/useCreateMessagesContext';\n\nimport { useCreateOwnCapabilitiesContext } from './hooks/useCreateOwnCapabilitiesContext';\nimport { useCreatePaginatedMessageListContext } from './hooks/useCreatePaginatedMessageListContext';\n\nimport { useCreateThreadContext } from './hooks/useCreateThreadContext';\n\nimport { useCreateTypingContext } from './hooks/useCreateTypingContext';\n\nimport { useTargetedMessage } from './hooks/useTargetedMessage';\n\nimport { ChannelContextValue, ChannelProvider } from '../../contexts/channelContext/ChannelContext';\nimport { useChannelState } from '../../contexts/channelsStateContext/useChannelState';\nimport type { UseChannelStateValue } from '../../contexts/channelsStateContext/useChannelState';\nimport { ChatContextValue, useChatContext } from '../../contexts/chatContext/ChatContext';\nimport {\n  InputMessageInputContextValue,\n  MessageInputProvider,\n} from '../../contexts/messageInputContext/MessageInputContext';\nimport {\n  MessagesContextValue,\n  MessagesProvider,\n} from '../../contexts/messagesContext/MessagesContext';\nimport {\n  OwnCapabilitiesContextValue,\n  OwnCapabilitiesProvider,\n} from '../../contexts/ownCapabilitiesContext/OwnCapabilitiesContext';\nimport {\n  PaginatedMessageListContextValue,\n  PaginatedMessageListProvider,\n} from '../../contexts/paginatedMessageListContext/PaginatedMessageListContext';\nimport {\n  SuggestionsContextValue,\n  SuggestionsProvider,\n} from '../../contexts/suggestionsContext/SuggestionsContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { ThreadContextValue, ThreadProvider } from '../../contexts/threadContext/ThreadContext';\nimport {\n  TranslationContextValue,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\nimport { TypingProvider } from '../../contexts/typingContext/TypingContext';\nimport { useAppStateListener } from '../../hooks/useAppStateListener';\n\nimport {\n  LOLReaction,\n  LoveReaction,\n  ThumbsDownReaction,\n  ThumbsUpReaction,\n  WutReaction,\n} from '../../icons';\nimport { FlatList as FlatListDefault } from '../../native';\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport { generateRandomId, MessageStatusTypes, ReactionData } from '../../utils/utils';\nimport { Attachment as AttachmentDefault } from '../Attachment/Attachment';\nimport { AttachmentActions as AttachmentActionsDefault } from '../Attachment/AttachmentActions';\nimport { Card as CardDefault } from '../Attachment/Card';\nimport { FileAttachment as FileAttachmentDefault } from '../Attachment/FileAttachment';\nimport { FileAttachmentGroup as FileAttachmentGroupDefault } from '../Attachment/FileAttachmentGroup';\nimport { FileIcon as FileIconDefault } from '../Attachment/FileIcon';\nimport { Gallery as GalleryDefault } from '../Attachment/Gallery';\nimport { Giphy as GiphyDefault } from '../Attachment/Giphy';\nimport { VideoThumbnail as VideoThumbnailDefault } from '../Attachment/VideoThumbnail';\nimport { AutoCompleteSuggestionHeader as AutoCompleteSuggestionHeaderDefault } from '../AutoCompleteInput/AutoCompleteSuggestionHeader';\nimport { AutoCompleteSuggestionItem as AutoCompleteSuggestionItemDefault } from '../AutoCompleteInput/AutoCompleteSuggestionItem';\nimport { AutoCompleteSuggestionList as AutoCompleteSuggestionListDefault } from '../AutoCompleteInput/AutoCompleteSuggestionList';\nimport { EmptyStateIndicator as EmptyStateIndicatorDefault } from '../Indicators/EmptyStateIndicator';\nimport {\n  LoadingErrorIndicator as LoadingErrorIndicatorDefault,\n  LoadingErrorProps,\n} from '../Indicators/LoadingErrorIndicator';\nimport { LoadingIndicator as LoadingIndicatorDefault } from '../Indicators/LoadingIndicator';\nimport { KeyboardCompatibleView as KeyboardCompatibleViewDefault } from '../KeyboardCompatibleView/KeyboardCompatibleView';\nimport { Message as MessageDefault } from '../Message/Message';\nimport { MessageAvatar as MessageAvatarDefault } from '../Message/MessageSimple/MessageAvatar';\nimport { MessageContent as MessageContentDefault } from '../Message/MessageSimple/MessageContent';\nimport { MessageDeleted as MessageDeletedDefault } from '../Message/MessageSimple/MessageDeleted';\nimport { MessageFooter as MessageFooterDefault } from '../Message/MessageSimple/MessageFooter';\nimport { MessagePinnedHeader as MessagePinnedHeaderDefault } from '../Message/MessageSimple/MessagePinnedHeader';\nimport { MessageReplies as MessageRepliesDefault } from '../Message/MessageSimple/MessageReplies';\nimport { MessageRepliesAvatars as MessageRepliesAvatarsDefault } from '../Message/MessageSimple/MessageRepliesAvatars';\nimport { MessageSimple as MessageSimpleDefault } from '../Message/MessageSimple/MessageSimple';\nimport { MessageStatus as MessageStatusDefault } from '../Message/MessageSimple/MessageStatus';\nimport { ReactionList as ReactionListDefault } from '../Message/MessageSimple/ReactionList';\nimport { AttachButton as AttachButtonDefault } from '../MessageInput/AttachButton';\nimport { CommandsButton as CommandsButtonDefault } from '../MessageInput/CommandsButton';\nimport { InputEditingStateHeader as InputEditingStateHeaderDefault } from '../MessageInput/components/InputEditingStateHeader';\nimport { InputGiphySearch as InputGiphyCommandInputDefault } from '../MessageInput/components/InputGiphySearch';\nimport { InputReplyStateHeader as InputReplyStateHeaderDefault } from '../MessageInput/components/InputReplyStateHeader';\nimport { CooldownTimer as CooldownTimerDefault } from '../MessageInput/CooldownTimer';\nimport { FileUploadPreview as FileUploadPreviewDefault } from '../MessageInput/FileUploadPreview';\nimport { ImageUploadPreview as ImageUploadPreviewDefault } from '../MessageInput/ImageUploadPreview';\nimport { InputButtons as InputButtonsDefault } from '../MessageInput/InputButtons';\nimport { MoreOptionsButton as MoreOptionsButtonDefault } from '../MessageInput/MoreOptionsButton';\nimport { SendButton as SendButtonDefault } from '../MessageInput/SendButton';\nimport { SendMessageDisallowedIndicator as SendMessageDisallowedIndicatorDefault } from '../MessageInput/SendMessageDisallowedIndicator';\nimport { ShowThreadMessageInChannelButton as ShowThreadMessageInChannelButtonDefault } from '../MessageInput/ShowThreadMessageInChannelButton';\nimport { UploadProgressIndicator as UploadProgressIndicatorDefault } from '../MessageInput/UploadProgressIndicator';\nimport { DateHeader as DateHeaderDefault } from '../MessageList/DateHeader';\nimport type { MessageType } from '../MessageList/hooks/useMessageList';\nimport { InlineDateSeparator as InlineDateSeparatorDefault } from '../MessageList/InlineDateSeparator';\nimport { InlineUnreadIndicator as InlineUnreadIndicatorDefault } from '../MessageList/InlineUnreadIndicator';\nimport { MessageList as MessageListDefault } from '../MessageList/MessageList';\nimport { MessageSystem as MessageSystemDefault } from '../MessageList/MessageSystem';\nimport { NetworkDownIndicator as NetworkDownIndicatorDefault } from '../MessageList/NetworkDownIndicator';\nimport { ScrollToBottomButton as ScrollToBottomButtonDefault } from '../MessageList/ScrollToBottomButton';\nimport { TypingIndicator as TypingIndicatorDefault } from '../MessageList/TypingIndicator';\nimport { TypingIndicatorContainer as TypingIndicatorContainerDefault } from '../MessageList/TypingIndicatorContainer';\nimport { OverlayReactionList as OverlayReactionListDefault } from '../MessageOverlay/OverlayReactionList';\nimport { Reply as ReplyDefault } from '../Reply/Reply';\n\nconst styles = StyleSheet.create({\n  selectChannel: { fontWeight: 'bold', padding: 16 },\n});\n\nexport const reactionData: ReactionData[] = [\n  {\n    Icon: LoveReaction,\n    type: 'love',\n  },\n  {\n    Icon: ThumbsUpReaction,\n    type: 'like',\n  },\n  {\n    Icon: ThumbsDownReaction,\n    type: 'sad',\n  },\n  {\n    Icon: LOLReaction,\n    type: 'haha',\n  },\n  {\n    Icon: WutReaction,\n    type: 'wow',\n  },\n];\n\n/**\n * If count of unread messages is less than 4, then no need to scroll to first unread message,\n * since first unread message will be in visible frame anyways.\n */\nconst scrollToFirstUnreadThreshold = 4;\n\nconst defaultThrottleInterval = 500;\nconst defaultDebounceInterval = 500;\nconst throttleOptions = {\n  leading: true,\n  trailing: true,\n};\nconst debounceOptions = {\n  leading: true,\n  trailing: true,\n};\n\n/**\n * Number of unread messages to show in first frame, when channel loads at first\n * unread message. Only applicable if unread count > scrollToFirstUnreadThreshold.\n */\nconst unreadMessagesOnInitialLoadLimit = 2;\n\nexport type ChannelPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<ChannelContextValue<StreamChatGenerics>, 'channel'> &\n  Partial<\n    Pick<\n      ChannelContextValue<StreamChatGenerics>,\n      | 'EmptyStateIndicator'\n      | 'enableMessageGroupingByUser'\n      | 'enforceUniqueReaction'\n      | 'giphyEnabled'\n      | 'hideStickyDateHeader'\n      | 'hideDateSeparators'\n      | 'LoadingIndicator'\n      | 'maxTimeBetweenGroupedMessages'\n      | 'NetworkDownIndicator'\n      | 'StickyHeader'\n    >\n  > &\n  Pick<ChatContextValue<StreamChatGenerics>, 'client'> &\n  Partial<\n    Omit<\n      InputMessageInputContextValue<StreamChatGenerics>,\n      'quotedMessage' | 'editing' | 'clearEditingState' | 'clearQuotedMessageState' | 'sendMessage'\n    >\n  > &\n  Partial<\n    Pick<\n      SuggestionsContextValue<StreamChatGenerics>,\n      'AutoCompleteSuggestionHeader' | 'AutoCompleteSuggestionItem' | 'AutoCompleteSuggestionList'\n    >\n  > &\n  Pick<TranslationContextValue, 't'> &\n  Partial<\n    Pick<\n      PaginatedMessageListContextValue<StreamChatGenerics>,\n      'messages' | 'loadingMore' | 'loadingMoreRecent'\n    >\n  > &\n  UseChannelStateValue<StreamChatGenerics> &\n  Partial<\n    Pick<\n      MessagesContextValue<StreamChatGenerics>,\n      | 'additionalTouchableProps'\n      | 'Attachment'\n      | 'AttachmentActions'\n      | 'Card'\n      | 'CardCover'\n      | 'CardFooter'\n      | 'CardHeader'\n      | 'DateHeader'\n      | 'deletedMessagesVisibilityType'\n      | 'disableTypingIndicator'\n      | 'dismissKeyboardOnMessageTouch'\n      | 'FileAttachment'\n      | 'FileAttachmentIcon'\n      | 'FileAttachmentGroup'\n      | 'FlatList'\n      | 'forceAlignMessages'\n      | 'formatDate'\n      | 'Gallery'\n      | 'Giphy'\n      | 'giphyVersion'\n      | 'handleBlock'\n      | 'handleCopy'\n      | 'handleDelete'\n      | 'handleEdit'\n      | 'handleFlag'\n      | 'handleMute'\n      | 'handlePinMessage'\n      | 'handleReaction'\n      | 'handleQuotedReply'\n      | 'handleRetry'\n      | 'handleThreadReply'\n      | 'InlineDateSeparator'\n      | 'InlineUnreadIndicator'\n      | 'isAttachmentEqual'\n      | 'legacyImageViewerSwipeBehaviour'\n      | 'markdownRules'\n      | 'Message'\n      | 'messageActions'\n      | 'MessageAvatar'\n      | 'MessageContent'\n      | 'messageContentOrder'\n      | 'MessageDeleted'\n      | 'MessageFooter'\n      | 'MessageHeader'\n      | 'MessageList'\n      | 'MessagePinnedHeader'\n      | 'MessageReplies'\n      | 'MessageRepliesAvatars'\n      | 'MessageSimple'\n      | 'MessageStatus'\n      | 'MessageSystem'\n      | 'MessageText'\n      | 'myMessageTheme'\n      | 'onLongPressMessage'\n      | 'onPressInMessage'\n      | 'onPressMessage'\n      | 'OverlayReactionList'\n      | 'ReactionList'\n      | 'Reply'\n      | 'ScrollToBottomButton'\n      | 'selectReaction'\n      | 'supportedReactions'\n      | 'TypingIndicator'\n      | 'TypingIndicatorContainer'\n      | 'UrlPreview'\n      | 'VideoThumbnail'\n    >\n  > &\n  Partial<\n    Pick<ThreadContextValue<StreamChatGenerics>, 'allowThreadMessagesInChannel' | 'thread'>\n  > & {\n    shouldSyncChannel: boolean;\n    /**\n     * Additional props passed to keyboard avoiding view\n     */\n    additionalKeyboardAvoidingViewProps?: Partial<KeyboardAvoidingViewProps>;\n    /**\n     * Disables the channel UI if the channel is frozen\n     */\n    disableIfFrozenChannel?: boolean;\n    /**\n     * When true, disables the KeyboardCompatibleView wrapper\n     *\n     * Channel internally uses the [KeyboardCompatibleView](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/KeyboardCompatibleView/KeyboardCompatibleView.tsx)\n     * component to adjust the height of Channel when the keyboard is opened or dismissed. This prop provides the ability to disable this functionality in case you\n     * want to use [KeyboardAvoidingView](https://facebook.github.io/react-native/docs/keyboardavoidingview) or handle dismissal yourself.\n     * KeyboardAvoidingView works well when your component occupies 100% of screen height, otherwise it may raise some issues.\n     */\n    disableKeyboardCompatibleView?: boolean;\n    /**\n     * Overrides the Stream default mark channel read request (Advanced usage only)\n     * @param channel Channel object\n     */\n    doMarkReadRequest?: (channel: ChannelType<StreamChatGenerics>) => void;\n    /**\n     * Overrides the Stream default send message request (Advanced usage only)\n     * @param channelId\n     * @param messageData Message object\n     */\n    doSendMessageRequest?: (\n      channelId: string,\n      messageData: StreamMessage<StreamChatGenerics>,\n    ) => Promise<SendMessageAPIResponse<StreamChatGenerics>>;\n    /**\n     * Overrides the Stream default update message request (Advanced usage only)\n     * @param channelId\n     * @param updatedMessage UpdatedMessage object\n     */\n    doUpdateMessageRequest?: (\n      channelId: string,\n      updatedMessage: Parameters<StreamChat<StreamChatGenerics>['updateMessage']>[0],\n    ) => ReturnType<StreamChat<StreamChatGenerics>['updateMessage']>;\n    /**\n     * E.g. Once unread count exceeds 255, display unread count as 255+ instead of actual count.\n     * Also 255 is the limit per Stream chat channel for unread count.\n     */\n    globalUnreadCountLimit?: number;\n    /**\n     * When true, messageList will be scrolled at first unread message, when opened.\n     */\n    initialScrollToFirstUnreadMessage?: boolean;\n    keyboardBehavior?: KeyboardAvoidingViewProps['behavior'];\n    /**\n     * Custom wrapper component that handles height adjustment of Channel component when keyboard is opened or dismissed\n     * Default component (accepts the same props): [KeyboardCompatibleView](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/KeyboardCompatibleView/KeyboardCompatibleView.tsx)\n     *\n     * **Example:**\n     *\n     * ```\n     * <Channel\n     *  channel={channel}\n     *  KeyboardCompatibleView={(props) => {\n     *    return (\n     *      <KeyboardCompatibleView>\n     *        {props.children}\n     *      </KeyboardCompatibleView>\n     *    )\n     *  }}\n     * />\n     * ```\n     */\n    KeyboardCompatibleView?: React.ComponentType<KeyboardAvoidingViewProps>;\n    keyboardVerticalOffset?: number;\n    /**\n     * Custom loading error indicator to override the Stream default\n     */\n    LoadingErrorIndicator?: React.ComponentType<LoadingErrorProps>;\n    maxMessageLength?: number;\n    messageId?: string;\n    newMessageStateUpdateThrottleInterval?: number;\n    overrideOwnCapabilities?: Partial<OwnCapabilitiesContextValue>;\n    stateUpdateThrottleInterval?: number;\n    /**\n     * Tells if channel is rendering a thread list\n     */\n    threadList?: boolean;\n  };\n\nconst ChannelWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: PropsWithChildren<ChannelPropsWithContext<StreamChatGenerics>>,\n) => {\n  const {\n    additionalKeyboardAvoidingViewProps,\n    additionalTextInputProps,\n    additionalTouchableProps,\n    allowThreadMessagesInChannel = true,\n    AttachButton = AttachButtonDefault,\n    Attachment = AttachmentDefault,\n    AttachmentActions = AttachmentActionsDefault,\n    AutoCompleteSuggestionHeader = AutoCompleteSuggestionHeaderDefault,\n    AutoCompleteSuggestionItem = AutoCompleteSuggestionItemDefault,\n    AutoCompleteSuggestionList = AutoCompleteSuggestionListDefault,\n    autoCompleteSuggestionsLimit,\n    autoCompleteTriggerSettings,\n    Card = CardDefault,\n    CardCover,\n    CardFooter,\n    CardHeader,\n    channel,\n    children,\n    client,\n    CommandsButton = CommandsButtonDefault,\n    compressImageQuality,\n    CooldownTimer = CooldownTimerDefault,\n    DateHeader = DateHeaderDefault,\n    deletedMessagesVisibilityType = 'always',\n    disableIfFrozenChannel = true,\n    disableKeyboardCompatibleView = false,\n    disableTypingIndicator,\n    dismissKeyboardOnMessageTouch = true,\n    doDocUploadRequest,\n    doImageUploadRequest,\n    doMarkReadRequest,\n    doSendMessageRequest,\n    doUpdateMessageRequest,\n    EmptyStateIndicator = EmptyStateIndicatorDefault,\n    enableMessageGroupingByUser = true,\n    enforceUniqueReaction = false,\n    FileAttachment = FileAttachmentDefault,\n    FileAttachmentGroup = FileAttachmentGroupDefault,\n    FileAttachmentIcon = FileIconDefault,\n    FileUploadPreview = FileUploadPreviewDefault,\n    FlatList = FlatListDefault,\n    forceAlignMessages,\n    formatDate,\n    Gallery = GalleryDefault,\n    Giphy = GiphyDefault,\n    giphyEnabled,\n    giphyVersion = 'fixed_height',\n    globalUnreadCountLimit = 255,\n    handleBlock,\n    handleCopy,\n    handleDelete,\n    handleEdit,\n    handleFlag,\n    handleMute,\n    handlePinMessage,\n    handleQuotedReply,\n    handleReaction,\n    handleRetry,\n    handleThreadReply,\n    hasCommands = true,\n    hasFilePicker = true,\n    hasImagePicker = true,\n    hideDateSeparators = false,\n    hideStickyDateHeader = false,\n    ImageUploadPreview = ImageUploadPreviewDefault,\n    initialScrollToFirstUnreadMessage = false,\n    initialValue,\n    InlineDateSeparator = InlineDateSeparatorDefault,\n    InlineUnreadIndicator = InlineUnreadIndicatorDefault,\n    Input,\n    InputButtons = InputButtonsDefault,\n    InputEditingStateHeader = InputEditingStateHeaderDefault,\n    InputGiphySearch = InputGiphyCommandInputDefault,\n    InputReplyStateHeader = InputReplyStateHeaderDefault,\n    isAttachmentEqual,\n    keyboardBehavior,\n    KeyboardCompatibleView = KeyboardCompatibleViewDefault,\n    keyboardVerticalOffset,\n    legacyImageViewerSwipeBehaviour = false,\n    LoadingErrorIndicator = LoadingErrorIndicatorDefault,\n    LoadingIndicator = LoadingIndicatorDefault,\n    loadingMore: loadingMoreProp,\n    loadingMoreRecent: loadingMoreRecentProp,\n    markdownRules,\n    maxMessageLength: maxMessageLengthProp,\n    maxNumberOfFiles = 10,\n    maxTimeBetweenGroupedMessages,\n    mentionAllAppUsersEnabled = false,\n    mentionAllAppUsersQuery,\n    members,\n    Message = MessageDefault,\n    messageActions,\n    MessageAvatar = MessageAvatarDefault,\n    MessageContent = MessageContentDefault,\n    messageContentOrder = ['quoted_reply', 'gallery', 'files', 'text', 'attachments'],\n    MessageDeleted = MessageDeletedDefault,\n    MessageFooter = MessageFooterDefault,\n    MessageHeader,\n    messageId,\n    MessageList = MessageListDefault,\n    MessagePinnedHeader = MessagePinnedHeaderDefault,\n    MessageReplies = MessageRepliesDefault,\n    MessageRepliesAvatars = MessageRepliesAvatarsDefault,\n    messages,\n    MessageSimple = MessageSimpleDefault,\n    MessageStatus = MessageStatusDefault,\n    MessageSystem = MessageSystemDefault,\n    MessageText,\n    MoreOptionsButton = MoreOptionsButtonDefault,\n    myMessageTheme,\n    newMessageStateUpdateThrottleInterval = defaultThrottleInterval,\n    NetworkDownIndicator = NetworkDownIndicatorDefault,\n    numberOfLines = 5,\n    onChangeText,\n    onLongPressMessage,\n    overrideOwnCapabilities,\n    onPressInMessage,\n    onPressMessage,\n    OverlayReactionList = OverlayReactionListDefault,\n    ReactionList = ReactionListDefault,\n    read,\n    Reply = ReplyDefault,\n    ScrollToBottomButton = ScrollToBottomButtonDefault,\n    selectReaction,\n    SendButton = SendButtonDefault,\n    SendMessageDisallowedIndicator = SendMessageDisallowedIndicatorDefault,\n    sendImageAsync = false,\n    setInputRef,\n    setMembers,\n    setMessages,\n    setRead,\n    setThreadMessages,\n    setTyping,\n    setWatcherCount,\n    setWatchers,\n    shouldSyncChannel,\n    ShowThreadMessageInChannelButton = ShowThreadMessageInChannelButtonDefault,\n    stateUpdateThrottleInterval = defaultThrottleInterval,\n    StickyHeader,\n    supportedReactions = reactionData,\n    t,\n    thread: threadProps,\n    threadList,\n    threadMessages,\n    typing,\n    TypingIndicator = TypingIndicatorDefault,\n    TypingIndicatorContainer = TypingIndicatorContainerDefault,\n    UploadProgressIndicator = UploadProgressIndicatorDefault,\n    UrlPreview = CardDefault,\n    VideoThumbnail = VideoThumbnailDefault,\n    watcherCount,\n    watchers,\n  } = props;\n\n  const {\n    theme: {\n      channel: { selectChannel },\n      colors: { black },\n    },\n  } = useTheme();\n  const [deleted, setDeleted] = useState(false);\n  const [editing, setEditing] = useState<boolean | MessageType<StreamChatGenerics>>(false);\n  const [error, setError] = useState<Error | boolean>(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [lastRead, setLastRead] = useState<ChannelContextValue<StreamChatGenerics>['lastRead']>();\n  const [loading, setLoading] = useState(!channel?.state.messages.length);\n  const [loadingMore, setLoadingMore] = useState(false);\n\n  const [loadingMoreRecent, setLoadingMoreRecent] = useState(false);\n  const [quotedMessage, setQuotedMessage] =\n    useState<boolean | MessageType<StreamChatGenerics>>(false);\n  const [thread, setThread] = useState<ThreadContextValue<StreamChatGenerics>['thread']>(\n    threadProps || null,\n  );\n  const [threadHasMore, setThreadHasMore] = useState(true);\n  const [threadLoadingMore, setThreadLoadingMore] = useState(false);\n\n  const [syncingChannel, setSyncingChannel] = useState(false);\n\n  const { setTargetedMessage, targetedMessage } = useTargetedMessage(messageId);\n\n  const channelId = channel?.id || '';\n  useEffect(() => {\n    const initChannel = () => {\n      if (!channel || !shouldSyncChannel) return;\n      /**\n       * Loading channel at first unread message  requires channel to be initialized in the first place,\n       * since we use read state on channel to decide what offset to load channel at.\n       * Also there is no use case from UX perspective, why one would need loading uninitialized channel at particular message.\n       * If the channel is not initiated, then we need to do channel.watch, which is more expensive for backend than channel.query.\n       */\n      if (!channel.initialized) {\n        loadChannel();\n        return;\n      }\n\n      if (messageId) {\n        loadChannelAtMessage({ messageId });\n        return;\n      }\n\n      if (\n        initialScrollToFirstUnreadMessage &&\n        channel.countUnread() > scrollToFirstUnreadThreshold\n      ) {\n        loadChannelAtFirstUnreadMessage();\n      } else {\n        loadChannel();\n      }\n    };\n\n    initChannel();\n\n    return () => {\n      copyChannelState.cancel();\n      copyReadState.cancel();\n      copyTypingState.cancel();\n      loadMoreFinished.cancel();\n      loadMoreThreadFinished.cancel();\n    };\n  }, [channelId, messageId]);\n\n  const threadPropsExists = !!threadProps;\n  useEffect(() => {\n    if (threadProps && shouldSyncChannel) {\n      setThread(threadProps);\n      if (channel && threadProps?.id) {\n        setThreadMessages(channel.state.threads?.[threadProps.id] || []);\n      }\n    } else {\n      setThread(null);\n    }\n  }, [threadPropsExists]);\n\n  const handleAppBackground = useCallback(() => {\n    if (channel) {\n      channel.sendEvent({\n        parent_id: thread?.id,\n        type: 'typing.stop',\n      } as StreamEvent<StreamChatGenerics>);\n    }\n  }, [thread?.id, channelId]);\n\n  useAppStateListener(undefined, handleAppBackground);\n\n  /**\n   * CHANNEL CONSTANTS\n   */\n  const isAdmin = client?.user?.role === 'admin' || channel?.state.membership.role === 'admin';\n\n  const isModerator =\n    channel?.state.membership.role === 'channel_moderator' ||\n    channel?.state.membership.role === 'moderator';\n\n  const isOwner = channel?.state.membership.role === 'owner';\n\n  /**\n   * CHANNEL METHODS\n   */\n  const markRead: ChannelContextValue<StreamChatGenerics>['markRead'] = useRef(\n    throttle(\n      () => {\n        if (!channel || channel?.disconnected || !clientChannelConfig?.read_events) {\n          return;\n        }\n\n        if (doMarkReadRequest) {\n          doMarkReadRequest(channel);\n        } else {\n          logChatPromiseExecution(channel.markRead(), 'mark read');\n        }\n      },\n      defaultThrottleInterval,\n      throttleOptions,\n    ),\n  ).current;\n\n  const copyMessagesState = useRef(\n    throttle(\n      () => {\n        if (channel) {\n          setMessages([...channel.state.messages]);\n        }\n      },\n      newMessageStateUpdateThrottleInterval,\n      throttleOptions,\n    ),\n  ).current;\n\n  const copyTypingState = useRef(\n    throttle(\n      () => {\n        if (channel) {\n          setTyping({ ...channel.state.typing });\n        }\n      },\n      stateUpdateThrottleInterval,\n      throttleOptions,\n    ),\n  ).current;\n\n  const copyReadState = useRef(\n    throttle(\n      () => {\n        if (channel) {\n          setRead({ ...channel.state.read });\n        }\n      },\n      stateUpdateThrottleInterval,\n      throttleOptions,\n    ),\n  ).current;\n\n  const copyChannelState = useRef(\n    throttle(\n      () => {\n        setLoading(false);\n        if (channel) {\n          setMembers({ ...channel.state.members });\n          setMessages([...channel.state.messages]);\n          setRead({ ...channel.state.read });\n          setTyping({ ...channel.state.typing });\n          setWatcherCount(channel.state.watcher_count);\n          setWatchers({ ...channel.state.watchers });\n        }\n      },\n      stateUpdateThrottleInterval,\n      throttleOptions,\n    ),\n  ).current;\n\n  const connectionRecoveredHandler = () => {\n    if (channel && shouldSyncChannel) {\n      copyChannelState();\n      if (thread) {\n        setThreadMessages([...channel.state.threads[thread.id]]);\n      }\n    }\n  };\n\n  const connectionChangedHandler = (event: ConnectionChangeEvent) => {\n    if (event.online && shouldSyncChannel) {\n      resyncChannel();\n    }\n  };\n\n  const handleEvent: EventHandler<StreamChatGenerics> = (event) => {\n    if (shouldSyncChannel) {\n      if (thread) {\n        const updatedThreadMessages =\n          (thread.id && channel && channel.state.threads[thread.id]) || threadMessages;\n        setThreadMessages(updatedThreadMessages);\n      }\n\n      if (channel && thread && event.message?.id === thread.id) {\n        const updatedThread = channel.state.formatMessage(event.message);\n        setThread(updatedThread);\n      }\n\n      if (event.type === 'typing.start' || event.type === 'typing.stop') {\n        copyTypingState();\n      } else if (event.type === 'message.read') {\n        copyReadState();\n      } else if (event.type === 'message.new') {\n        copyMessagesState();\n      } else if (channel) {\n        copyChannelState();\n      }\n    }\n  };\n\n  useEffect(() => {\n    const channelSubscriptions: Array<ReturnType<ChannelType['on']>> = [];\n    const clientSubscriptions: Array<ReturnType<StreamChat['on']>> = [];\n\n    const subscribe = () => {\n      if (!channel) return;\n\n      /**\n       * The more complex sync logic around internet connectivity (NetInfo) is part of Chat.tsx\n       * listen to client.connection.recovered and all channel events\n       */\n      clientSubscriptions.push(client.on('connection.recovered', connectionRecoveredHandler));\n      clientSubscriptions.push(client.on('connection.changed', connectionChangedHandler));\n      clientSubscriptions.push(\n        client.on('channel.deleted', (event) => {\n          if (event.cid === channel.cid) {\n            setDeleted(true);\n          }\n        }),\n      );\n      channelSubscriptions.push(channel.on(handleEvent));\n    };\n\n    subscribe();\n\n    return () => {\n      clientSubscriptions.forEach((s) => s.unsubscribe());\n      channelSubscriptions.forEach((s) => s.unsubscribe());\n    };\n  }, [channelId, connectionChangedHandler, connectionRecoveredHandler, handleEvent]);\n\n  const channelQueryCall = async (queryCall: () => void = () => null) => {\n    setError(false);\n    // Skips setting loading state when there are messages in the channel\n    setLoading(!channel?.state.messages.length);\n\n    try {\n      await queryCall();\n      setLastRead(new Date());\n      setHasMore(true);\n      copyChannelState();\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err);\n      } else {\n        setError(true);\n      }\n      setLoading(false);\n      setLastRead(new Date());\n    }\n  };\n\n  /**\n   * Loads channel at first unread channel.\n   */\n  const loadChannelAtFirstUnreadMessage = () => {\n    if (!channel) return;\n    const unreadCount = channel.countUnread();\n    if (unreadCount <= scrollToFirstUnreadThreshold) return;\n\n    channel.state.clearMessages();\n    channel.state.setIsUpToDate(false);\n\n    return channelQueryCall(async () => {\n      /**\n       * Stream only keeps unread count of channel upto 255. So once the count of unread messages reaches 255, we stop counting.\n       * Thus we need to handle these two cases separately.\n       */\n      if (unreadCount < globalUnreadCountLimit) {\n        /**\n         * We want to ensure that first unread message appears in the first window frame, when message list loads.\n         * If we assume that we have a exact count of unread messages, then first unread message is at offset = channel.countUnread().\n         * So we will query 2 messages after (and including) first unread message, and 30 messages before first unread\n         * message. So 2nd message in list is the first unread message. We can safely assume that 2nd message in list\n         * will be visible to user when list loads.\n         */\n        const offset = unreadCount - unreadMessagesOnInitialLoadLimit;\n        await query(offset, 30);\n\n        /**\n         * If the number of messages are not enough to fill the screen (we are making an assumption here that on overage 4 messages\n         * are enough to fill the screen), then we need to fetch some more messages on recent side.\n         */\n        if (\n          channel.state.messages.length &&\n          channel.state.messages.length <= scrollToFirstUnreadThreshold &&\n          !channel.state.isUpToDate\n        ) {\n          const mostRecentMessage = channel.state.messages[channel.state.messages.length - 1];\n          await queryAfterMessage(mostRecentMessage.id, 10 - channel.state.messages.length);\n        }\n      } else {\n        /**\n         * If the unread count is 255, then we don't have exact unread count anymore, to determine the offset for querying messages.\n         * In this case we are going to query messages using date params instead of offset-limit e.g., created_at_before_or_equal\n         * So we query 30 messages before the last time user read the channel - channel.lastRead()\n         */\n        await channel.query({\n          messages: {\n            created_at_before_or_equal: channel.lastRead() || new Date(0),\n            limit: 30,\n          },\n        });\n\n        /**\n         * If the number of messages are not enough to fill the screen (we are making an assumption here that on overage 4 messages\n         * are enough to fill the screen), then we need to fetch some more messages on recent side.\n         */\n        if (\n          channel.state.messages.length <= unreadMessagesOnInitialLoadLimit &&\n          !channel.state.isUpToDate\n        ) {\n          if (channel.state.messages.length > 0) {\n            const mostRecentMessage = channel.state.messages[channel.state.messages.length - 1];\n            await queryAfterMessage(mostRecentMessage.id, 5);\n          } else {\n            /**\n             * If we didn't get any messages, which means first unread message is the first ever message in channel.\n             * So simply fetch some messages after the lastRead datetime.\n             * We are keeping the limit as 10 here, as opposed to 30 in cases above. The reason being, we want the list\n             * to be scrolled upto first unread message. So in this case we will need the scroll to start at top of the list.\n             * React native provides a prop `initialScrollIndex` on FlatList, but it doesn't really work well\n             * especially for dynamic sized content. So when the list loads, we are just going to manually scroll\n             * to top of the list - flRef.current.scrollToEnd(). This autoscroll behavior is not great in general, but its less\n             * bad for scrolling up 10 messages than scrolling up 30 messages.\n             */\n            await channel.query({\n              messages: {\n                created_at_after: channel.lastRead() || new Date(0),\n                limit: 10,\n              },\n            });\n          }\n        }\n      }\n    });\n  };\n\n  /**\n   * Loads channel at specific message\n   *\n   * @param messageId If undefined, channel will be loaded at most recent message.\n   * @param before Number of message to query before messageId\n   * @param after Number of message to query after messageId\n   */\n  const loadChannelAtMessage: ChannelContextValue<StreamChatGenerics>['loadChannelAtMessage'] = ({\n    after = 2,\n    before = 30,\n    messageId,\n  }) =>\n    channelQueryCall(async () => {\n      await queryAtMessage({ after, before, messageId });\n\n      if (messageId) {\n        setTargetedMessage(messageId);\n      }\n    });\n\n  const loadChannel = () =>\n    channelQueryCall(async () => {\n      if (!channel?.initialized || !channel.state.isUpToDate) {\n        await channel?.watch();\n        channel?.state.setIsUpToDate(true);\n      }\n\n      return;\n    });\n\n  const reloadThread = async () => {\n    if (!channel || !thread?.id) return;\n\n    setThreadLoadingMore(true);\n    try {\n      const parentID = thread.id;\n\n      const limit = 50;\n      channel.state.threads[parentID] = [];\n      const queryResponse = await channel.getReplies(parentID, {\n        limit,\n      });\n\n      const updatedHasMore = queryResponse.messages.length === limit;\n      const updatedThreadMessages = channel.state.threads[parentID] || [];\n      loadMoreThreadFinished(updatedHasMore, updatedThreadMessages);\n      const { messages } = await channel.getMessagesById([parentID]);\n      const [threadMessage] = messages;\n      if (threadMessage) {\n        const formattedMessage = channel.state.formatMessage(threadMessage);\n        setThread(formattedMessage);\n      }\n    } catch (err) {\n      console.warn('Thread loading request failed with error', err);\n      if (err instanceof Error) {\n        setError(err);\n      } else {\n        setError(true);\n      }\n      setThreadLoadingMore(false);\n      throw err;\n    }\n  };\n\n  const resyncChannel = async () => {\n    if (!channel || syncingChannel) return;\n    setSyncingChannel(true);\n\n    setError(false);\n    try {\n      /**\n       * Allow a buffer of 30 new messages, so that MessageList won't move its scroll position,\n       * giving smooth user experience.\n       */\n      const state = await channel.watch({\n        messages: {\n          limit: messages.length + 30,\n        },\n      });\n\n      const oldListTopMessage = messages[0];\n      const oldListTopMessageId = messages[0]?.id;\n      const oldListBottomMessage = messages[messages.length - 1];\n\n      const newListTopMessage = state.messages[0];\n      const newListBottomMessage = state.messages[state.messages.length - 1];\n\n      if (\n        !oldListTopMessage || // previous list was empty\n        !oldListBottomMessage || // previous list was empty\n        !newListTopMessage || // new list is truncated\n        !newListBottomMessage // new list is truncated\n      ) {\n        /** Channel was truncated */\n        channel.state.clearMessages();\n        channel.state.setIsUpToDate(true);\n        channel.state.addMessagesSorted(state.messages);\n        copyChannelState();\n        return;\n      }\n\n      const parseMessage = (message: typeof oldListTopMessage) =>\n        ({\n          ...message,\n          created_at: message.created_at.toString(),\n          pinned_at: message.pinned_at?.toString(),\n          updated_at: message.updated_at?.toString(),\n        } as unknown as MessageResponse<StreamChatGenerics>);\n\n      const failedMessages = messages\n        .filter((message) => message.status === MessageStatusTypes.FAILED)\n        .map(parseMessage);\n\n      const failedThreadMessages = thread\n        ? threadMessages\n            .filter((message) => message.status === MessageStatusTypes.FAILED)\n            .map(parseMessage)\n        : [];\n\n      const oldListTopMessageCreatedAt = oldListTopMessage.created_at;\n      const oldListBottomMessageCreatedAt = oldListBottomMessage.created_at;\n      const newListTopMessageCreatedAt = newListTopMessage.created_at\n        ? new Date(newListTopMessage.created_at)\n        : new Date();\n      const newListBottomMessageCreatedAt = newListBottomMessage?.created_at\n        ? new Date(newListBottomMessage.created_at)\n        : new Date();\n\n      let finalMessages = [];\n\n      if (\n        oldListTopMessage &&\n        oldListTopMessageCreatedAt &&\n        oldListBottomMessageCreatedAt &&\n        newListTopMessageCreatedAt < oldListTopMessageCreatedAt &&\n        newListBottomMessageCreatedAt >= oldListBottomMessageCreatedAt\n      ) {\n        const index = state.messages.findIndex((message) => message.id === oldListTopMessageId);\n        finalMessages = state.messages.slice(index);\n      } else {\n        finalMessages = state.messages;\n      }\n\n      channel.state.setIsUpToDate(true);\n\n      channel.state.clearMessages();\n      channel.state.addMessagesSorted(finalMessages);\n\n      setHasMore(true);\n      copyChannelState();\n\n      if (failedMessages.length) {\n        channel.state.addMessagesSorted(failedMessages);\n        copyChannelState();\n      }\n\n      await reloadThread();\n\n      if (thread && failedThreadMessages.length) {\n        channel.state.addMessagesSorted(failedThreadMessages);\n        setThreadMessages([...channel.state.threads[thread.id]]);\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err);\n      } else {\n        setError(true);\n      }\n      setLoading(false);\n    }\n\n    setSyncingChannel(false);\n  };\n\n  const reloadChannel = () =>\n    channelQueryCall(async () => {\n      await channel?.watch();\n      channel?.state.setIsUpToDate(true);\n    });\n\n  /**\n   * Makes a query to load messages in channel.\n   */\n  const query = async (offset = 0, limit = 30) => {\n    if (!channel) return;\n    channel.state.clearMessages();\n\n    await channel.query({\n      messages: {\n        limit,\n        offset,\n      },\n      watch: true,\n    });\n    channel.state.setIsUpToDate(offset === 0);\n  };\n\n  /**\n   * Makes a query to load messages at particular message id.\n   *\n   * @param messageId Targeted message id\n   * @param before Number of messages to load before messageId\n   * @param after Number of messages to load after messageId\n   */\n  const queryAtMessage = async ({\n    after = 10,\n    before = 10,\n    messageId,\n  }: Parameters<ChannelContextValue<StreamChatGenerics>['loadChannelAtMessage']>[0]) => {\n    if (!channel) return;\n    channel.state.setIsUpToDate(false);\n    channel.state.clearMessages();\n    setMessages([...channel.state.messages]);\n    if (!messageId) {\n      await channel.query({\n        messages: {\n          limit: before,\n        },\n        watch: true,\n      });\n\n      channel.state.setIsUpToDate(true);\n      return;\n    }\n\n    await queryBeforeMessage(messageId, before);\n    await queryAfterMessage(messageId, after);\n  };\n\n  /**\n   * Makes a query to load messages before particular message id.\n   *\n   * @param messageId Targeted message id\n   * @param limit Number of messages to load\n   */\n  const queryBeforeMessage = async (messageId: string, limit = 5) => {\n    if (!channel) return;\n\n    await channel.query({\n      messages: {\n        id_lt: messageId,\n        limit,\n      },\n      watch: true,\n    });\n\n    channel.state.setIsUpToDate(false);\n  };\n\n  /**\n   * Makes a query to load messages later than particular message id.\n   *\n   * @param messageId Targeted message id\n   * @param limit Number of messages to load.\n   */\n  const queryAfterMessage = async (messageId: string, limit = 5) => {\n    if (!channel) return;\n    const state = await channel.query({\n      messages: {\n        id_gte: messageId,\n        limit,\n      },\n      watch: true,\n    });\n\n    if (state.messages.length < limit) {\n      channel.state.setIsUpToDate(true);\n    } else {\n      channel.state.setIsUpToDate(false);\n    }\n  };\n\n  // In case the channel is disconnected which may happen when channel is deleted,\n  // underlying js client throws an error. Following function ensures that Channel component\n  // won't result in error in such a case.\n  const getChannelConfigSafely = () => {\n    try {\n      return channel?.getConfig();\n    } catch (_) {\n      return null;\n    }\n  };\n\n  /**\n   * Channel configs for use in disabling local functionality.\n   * Nullish coalescing is used to give first priority to props to override\n   * the server settings. Then priority to server settings to override defaults.\n   */\n  const clientChannelConfig = getChannelConfigSafely();\n\n  /**\n   * MESSAGE METHODS\n   */\n\n  const updateMessage: MessagesContextValue<StreamChatGenerics>['updateMessage'] = (\n    updatedMessage,\n    extraState = {},\n  ) => {\n    if (channel) {\n      channel.state.addMessageSorted(updatedMessage, true);\n      if (thread && updatedMessage.parent_id) {\n        extraState.threadMessages = channel.state.threads[updatedMessage.parent_id] || [];\n        setThreadMessages(extraState.threadMessages);\n      }\n\n      setMessages([...channel.state.messages]);\n    }\n  };\n\n  const replaceMessage = (\n    oldMessage: MessageResponse<StreamChatGenerics>,\n    newMessage: MessageResponse<StreamChatGenerics>,\n  ) => {\n    if (channel) {\n      channel.state.removeMessage(oldMessage);\n      channel.state.addMessageSorted(newMessage, true);\n      if (thread && newMessage.parent_id) {\n        const threadMessages = channel.state.threads[newMessage.parent_id] || [];\n        setThreadMessages(threadMessages);\n      }\n      setMessages(channel.state.messages);\n    }\n  };\n\n  const createMessagePreview = ({\n    attachments,\n    mentioned_users,\n    parent_id,\n    text,\n    ...extraFields\n  }: Partial<StreamMessage<StreamChatGenerics>>) => {\n    const preview = {\n      __html: text,\n      attachments,\n      created_at: new Date(),\n      html: text,\n      id: `${client.userID}-${generateRandomId()}`,\n      mentioned_users:\n        mentioned_users?.map((userId) => ({\n          id: userId,\n        })) || [],\n      parent_id,\n      reactions: [],\n      status: MessageStatusTypes.SENDING,\n      text,\n      type: 'regular',\n      user: {\n        id: client.userID,\n        ...client.user,\n      },\n      ...extraFields,\n    } as unknown as MessageResponse<StreamChatGenerics>;\n\n    /**\n     * This is added to the message for local rendering prior to the message\n     * being returned from the backend, it is removed when the message is sent\n     * as quoted_message is a reserved field.\n     */\n    if (preview.quoted_message_id) {\n      const quotedMessage = messages.find((message) => message.id === preview.quoted_message_id);\n\n      preview.quoted_message =\n        quotedMessage as MessageResponse<StreamChatGenerics>['quoted_message'];\n    }\n    return preview;\n  };\n\n  const sendMessageRequest = async (\n    message: MessageResponse<StreamChatGenerics>,\n    retrying?: boolean,\n  ) => {\n    const {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      __html,\n      attachments,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      created_at,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      html,\n      id,\n      mentioned_users,\n      parent_id,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      quoted_message,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      reactions,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      status,\n      text,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      type,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      updated_at,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      user,\n      ...extraFields\n    } = message;\n\n    const messageData = {\n      attachments,\n      id: retrying ? undefined : id,\n      mentioned_users: mentioned_users?.map((mentionedUser) => mentionedUser.id) || [],\n      parent_id,\n      text,\n      ...extraFields,\n    } as StreamMessage<StreamChatGenerics>;\n\n    try {\n      let messageResponse = {} as SendMessageAPIResponse<StreamChatGenerics>;\n\n      if (doSendMessageRequest) {\n        messageResponse = await doSendMessageRequest(channel?.cid || '', messageData);\n      } else if (channel) {\n        messageResponse = await channel.sendMessage(messageData);\n      }\n      if (messageResponse.message) {\n        messageResponse.message.status = MessageStatusTypes.RECEIVED;\n        if (retrying) {\n          replaceMessage(message, messageResponse.message);\n        } else {\n          updateMessage(messageResponse.message);\n        }\n      }\n    } catch (err) {\n      console.log(err);\n      message.status = MessageStatusTypes.FAILED;\n      updateMessage(message);\n    }\n  };\n\n  const sendMessage: InputMessageInputContextValue<StreamChatGenerics>['sendMessage'] = async (\n    message,\n  ) => {\n    if (channel?.state?.filterErrorMessages) {\n      channel.state.filterErrorMessages();\n    }\n\n    const messagePreview = createMessagePreview({\n      ...message,\n      attachments: message.attachments || [],\n    });\n\n    if (!channel?.state.isUpToDate) {\n      await reloadChannel();\n    }\n\n    updateMessage(messagePreview, {\n      commands: [],\n      messageInput: '',\n    });\n\n    await sendMessageRequest(messagePreview);\n  };\n\n  const retrySendMessage: MessagesContextValue<StreamChatGenerics>['retrySendMessage'] = async (\n    message,\n  ) => {\n    const statusPendingMessage = {\n      ...message,\n      status: MessageStatusTypes.SENDING,\n    };\n\n    updateMessage(statusPendingMessage);\n    await sendMessageRequest(statusPendingMessage, true);\n  };\n\n  // hard limit to prevent you from scrolling faster than 1 page per 2 seconds\n  const loadMoreFinished = useRef(\n    debounce(\n      (updatedHasMore: boolean, newMessages: ChannelState<StreamChatGenerics>['messages']) => {\n        setLoadingMore(false);\n        setError(false);\n        setHasMore(updatedHasMore);\n        setMessages(newMessages);\n      },\n      defaultDebounceInterval,\n      debounceOptions,\n    ),\n  ).current;\n\n  const loadMore: PaginatedMessageListContextValue<StreamChatGenerics>['loadMore'] = async (\n    limit = 20,\n  ) => {\n    if (loadingMore || hasMore === false) {\n      return;\n    }\n    setLoadingMore(true);\n\n    if (!messages.length) {\n      return setLoadingMore(false);\n    }\n\n    const oldestMessage = messages && messages[0];\n\n    if (oldestMessage && oldestMessage.status !== MessageStatusTypes.RECEIVED) {\n      return setLoadingMore(false);\n    }\n\n    const oldestID = oldestMessage && oldestMessage.id;\n\n    try {\n      if (channel) {\n        const queryResponse = await channel.query({\n          messages: { id_lt: oldestID, limit },\n        });\n\n        const updatedHasMore = queryResponse.messages.length === limit;\n        loadMoreFinished(updatedHasMore, channel.state.messages);\n      }\n    } catch (err) {\n      console.warn('Message pagination request failed with error', err);\n      if (err instanceof Error) {\n        setError(err);\n      } else {\n        setError(true);\n      }\n      setLoadingMore(false);\n      throw err;\n    }\n  };\n\n  const loadMoreRecent: PaginatedMessageListContextValue<StreamChatGenerics>['loadMoreRecent'] =\n    async (limit = 5) => {\n      if (channel?.state.isUpToDate) {\n        return;\n      }\n\n      setLoadingMoreRecent(true);\n\n      const recentMessage = messages[messages.length - 1];\n\n      if (recentMessage?.status !== MessageStatusTypes.RECEIVED) {\n        setLoadingMoreRecent(false);\n        return;\n      }\n\n      try {\n        if (channel) {\n          await queryAfterMessage(recentMessage.id, limit);\n          loadMoreRecentFinished(channel.state.messages);\n        }\n      } catch (err) {\n        console.warn('Message pagination request failed with error', err);\n        if (err instanceof Error) {\n          setError(err);\n        } else {\n          setError(true);\n        }\n        setLoadingMoreRecent(false);\n        throw err;\n      }\n    };\n\n  // hard limit to prevent you from scrolling faster than 1 page per 2 seconds\n  const loadMoreRecentFinished = useRef(\n    debounce(\n      (newMessages: ChannelState<StreamChatGenerics>['messages']) => {\n        setLoadingMoreRecent(false);\n        setMessages(newMessages);\n        setError(false);\n      },\n      defaultDebounceInterval,\n      debounceOptions,\n    ),\n  ).current;\n\n  const editMessage: InputMessageInputContextValue<StreamChatGenerics>['editMessage'] = (\n    updatedMessage,\n  ) =>\n    doUpdateMessageRequest\n      ? doUpdateMessageRequest(channel?.cid || '', updatedMessage)\n      : client.updateMessage(updatedMessage);\n\n  const setEditingState: MessagesContextValue<StreamChatGenerics>['setEditingState'] = (\n    message,\n  ) => {\n    setEditing(message);\n  };\n\n  const setQuotedMessageState: MessagesContextValue<StreamChatGenerics>['setQuotedMessageState'] = (\n    message,\n  ) => {\n    setQuotedMessage(message);\n  };\n\n  const clearEditingState: InputMessageInputContextValue<StreamChatGenerics>['clearEditingState'] =\n    () => setEditing(false);\n\n  const clearQuotedMessageState: InputMessageInputContextValue<StreamChatGenerics>['clearQuotedMessageState'] =\n    () => setQuotedMessage(false);\n\n  const removeMessage: MessagesContextValue<StreamChatGenerics>['removeMessage'] = (message) => {\n    if (channel) {\n      channel.state.removeMessage(message);\n      setMessages(channel.state.messages);\n      if (thread) {\n        setThreadMessages(channel.state.threads[thread.id] || []);\n      }\n    }\n  };\n\n  /**\n   * THREAD METHODS\n   */\n  const openThread: ThreadContextValue<StreamChatGenerics>['openThread'] = (message) => {\n    const newThreadMessages = message?.id ? channel?.state?.threads[message.id] || [] : [];\n    setThread(message);\n    setThreadMessages(newThreadMessages);\n  };\n\n  const closeThread: ThreadContextValue<StreamChatGenerics>['closeThread'] = useCallback(() => {\n    setThread(null);\n    setThreadMessages([]);\n  }, [setThread, setThreadMessages]);\n\n  // hard limit to prevent you from scrolling faster than 1 page per 2 seconds\n  const loadMoreThreadFinished = useRef(\n    debounce(\n      (\n        newThreadHasMore: boolean,\n        updatedThreadMessages: ChannelState<StreamChatGenerics>['threads'][string],\n      ) => {\n        setThreadHasMore(newThreadHasMore);\n        setThreadLoadingMore(false);\n        setThreadMessages(updatedThreadMessages);\n      },\n      defaultDebounceInterval,\n      debounceOptions,\n    ),\n  ).current;\n\n  const loadMoreThread: ThreadContextValue<StreamChatGenerics>['loadMoreThread'] = async () => {\n    if (threadLoadingMore || !thread?.id) {\n      return;\n    }\n    setThreadLoadingMore(true);\n\n    try {\n      if (channel) {\n        const parentID = thread.id;\n\n        /**\n         * In the channel is re-initializing, then threads may get wiped out during the process\n         * (check `addMessagesSorted` method on channel.state). In those cases, we still want to\n         * preserve the messages on active thread, so lets simply copy messages from UI state to\n         * `channel.state`.\n         */\n        channel.state.threads[parentID] = threadMessages;\n        const oldestMessageID = threadMessages?.[0]?.id;\n\n        const limit = 50;\n        const queryResponse = await channel.getReplies(parentID, {\n          id_lt: oldestMessageID,\n          limit,\n        });\n\n        const updatedHasMore = queryResponse.messages.length === limit;\n        const updatedThreadMessages = channel.state.threads[parentID] || [];\n        loadMoreThreadFinished(updatedHasMore, updatedThreadMessages);\n      }\n    } catch (err) {\n      console.warn('Message pagination request failed with error', err);\n      if (err instanceof Error) {\n        setError(err);\n      } else {\n        setError(true);\n      }\n      setThreadLoadingMore(false);\n      throw err;\n    }\n  };\n\n  const ownCapabilitiesContext = useCreateOwnCapabilitiesContext({\n    channel,\n    overrideCapabilities: overrideOwnCapabilities,\n  });\n\n  const channelContext = useCreateChannelContext({\n    channel,\n    disabled: !!channel?.data?.frozen && disableIfFrozenChannel,\n    EmptyStateIndicator,\n    enableMessageGroupingByUser,\n    enforceUniqueReaction,\n    error,\n    giphyEnabled:\n      giphyEnabled ??\n      !!(clientChannelConfig?.commands || [])?.some((command) => command.name === 'giphy'),\n    hideDateSeparators,\n    hideStickyDateHeader,\n    isAdmin,\n    isChannelActive: shouldSyncChannel,\n    isModerator,\n    isOwner,\n    lastRead,\n    loadChannelAtMessage,\n    loading,\n    LoadingIndicator,\n    markRead,\n    maxTimeBetweenGroupedMessages,\n    members,\n    NetworkDownIndicator,\n    read,\n    reloadChannel,\n    scrollToFirstUnreadThreshold,\n    setLastRead,\n    setTargetedMessage,\n    StickyHeader,\n    targetedMessage,\n    threadList,\n    watcherCount,\n    watchers,\n  });\n\n  const inputMessageInputContext = useCreateInputMessageInputContext<StreamChatGenerics>({\n    additionalTextInputProps,\n    AttachButton,\n    autoCompleteSuggestionsLimit,\n    autoCompleteTriggerSettings,\n    channelId,\n    clearEditingState,\n    clearQuotedMessageState,\n    CommandsButton,\n    compressImageQuality,\n    CooldownTimer,\n    doDocUploadRequest,\n    doImageUploadRequest,\n    editing,\n    editMessage,\n    FileUploadPreview,\n    hasCommands,\n    hasFilePicker,\n    hasImagePicker,\n    ImageUploadPreview,\n    initialValue,\n    Input,\n    InputButtons,\n    InputEditingStateHeader,\n    InputGiphySearch,\n    InputReplyStateHeader,\n    maxMessageLength: maxMessageLengthProp ?? clientChannelConfig?.max_message_length ?? undefined,\n    maxNumberOfFiles,\n    mentionAllAppUsersEnabled,\n    mentionAllAppUsersQuery,\n    MoreOptionsButton,\n    numberOfLines,\n    onChangeText,\n    quotedMessage,\n    SendButton,\n    sendImageAsync,\n    sendMessage,\n    SendMessageDisallowedIndicator,\n    setInputRef,\n    setQuotedMessageState,\n    ShowThreadMessageInChannelButton,\n    UploadProgressIndicator,\n  });\n\n  const messageListContext = useCreatePaginatedMessageListContext({\n    channelId,\n    hasMore,\n    loadingMore: loadingMoreProp !== undefined ? loadingMoreProp : loadingMore,\n    loadingMoreRecent:\n      loadingMoreRecentProp !== undefined ? loadingMoreRecentProp : loadingMoreRecent,\n    loadMore,\n    loadMoreRecent,\n    messages,\n    setLoadingMore,\n    setLoadingMoreRecent,\n  });\n\n  const messagesContext = useCreateMessagesContext({\n    additionalTouchableProps,\n    Attachment,\n    AttachmentActions,\n    Card,\n    CardCover,\n    CardFooter,\n    CardHeader,\n    channelId,\n    DateHeader,\n    deletedMessagesVisibilityType,\n    disableTypingIndicator,\n    dismissKeyboardOnMessageTouch,\n    enableMessageGroupingByUser,\n    FileAttachment,\n    FileAttachmentGroup,\n    FileAttachmentIcon,\n    FlatList,\n    forceAlignMessages,\n    formatDate,\n    Gallery,\n    Giphy,\n    giphyVersion,\n    handleBlock,\n    handleCopy,\n    handleDelete,\n    handleEdit,\n    handleFlag,\n    handleMute,\n    handlePinMessage,\n    handleQuotedReply,\n    handleReaction,\n    handleRetry,\n    handleThreadReply,\n    initialScrollToFirstUnreadMessage,\n    InlineDateSeparator,\n    InlineUnreadIndicator,\n    isAttachmentEqual,\n    legacyImageViewerSwipeBehaviour,\n    markdownRules,\n    Message,\n    messageActions,\n    MessageAvatar,\n    MessageContent,\n    messageContentOrder,\n    MessageDeleted,\n    MessageFooter,\n    MessageHeader,\n    MessageList,\n    MessagePinnedHeader,\n    MessageReplies,\n    MessageRepliesAvatars,\n    MessageSimple,\n    MessageStatus,\n    MessageSystem,\n    MessageText,\n    myMessageTheme,\n    onLongPressMessage,\n    onPressInMessage,\n    onPressMessage,\n    OverlayReactionList,\n    ReactionList,\n    removeMessage,\n    Reply,\n    retrySendMessage,\n    ScrollToBottomButton,\n    selectReaction,\n    setEditingState,\n    setQuotedMessageState,\n    supportedReactions,\n    targetedMessage,\n    TypingIndicator,\n    TypingIndicatorContainer,\n    updateMessage,\n    UrlPreview,\n    VideoThumbnail,\n  });\n\n  const suggestionsContext = {\n    AutoCompleteSuggestionHeader,\n    AutoCompleteSuggestionItem,\n    AutoCompleteSuggestionList,\n  };\n\n  const threadContext = useCreateThreadContext({\n    allowThreadMessagesInChannel,\n    closeThread,\n    loadMoreThread,\n    openThread,\n    reloadThread,\n    setThreadLoadingMore,\n    thread,\n    threadHasMore,\n    threadLoadingMore,\n    threadMessages,\n  });\n\n  const typingContext = useCreateTypingContext({\n    typing,\n  });\n\n  // TODO: replace the null view with appropriate message. Currently this is waiting a design decision.\n  if (deleted) return null;\n\n  if (!channel || (error && messages.length === 0)) {\n    return <LoadingErrorIndicator error={error} listType='message' retry={reloadChannel} />;\n  }\n\n  if (!channel?.cid || !channel.watch) {\n    return (\n      <Text style={[styles.selectChannel, { color: black }, selectChannel]} testID='no-channel'>\n        {t('Please select a channel first')}\n      </Text>\n    );\n  }\n\n  return (\n    <KeyboardCompatibleView\n      behavior={keyboardBehavior}\n      enabled={!disableKeyboardCompatibleView}\n      keyboardVerticalOffset={keyboardVerticalOffset}\n      {...additionalKeyboardAvoidingViewProps}\n    >\n      <ChannelProvider<StreamChatGenerics> value={channelContext}>\n        <OwnCapabilitiesProvider value={ownCapabilitiesContext}>\n          <TypingProvider<StreamChatGenerics> value={typingContext}>\n            <PaginatedMessageListProvider<StreamChatGenerics> value={messageListContext}>\n              <MessagesProvider<StreamChatGenerics> value={messagesContext}>\n                <ThreadProvider<StreamChatGenerics> value={threadContext}>\n                  <SuggestionsProvider<StreamChatGenerics> value={suggestionsContext}>\n                    <MessageInputProvider<StreamChatGenerics> value={inputMessageInputContext}>\n                      <View style={{ height: '100%' }}>{children}</View>\n                    </MessageInputProvider>\n                  </SuggestionsProvider>\n                </ThreadProvider>\n              </MessagesProvider>\n            </PaginatedMessageListProvider>\n          </TypingProvider>\n        </OwnCapabilitiesProvider>\n      </ChannelProvider>\n    </KeyboardCompatibleView>\n  );\n};\n\nexport type ChannelProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<Omit<ChannelPropsWithContext<StreamChatGenerics>, 'channel'>> &\n  Pick<ChannelPropsWithContext<StreamChatGenerics>, 'channel'>;\n\n/**\n *\n * The wrapper component for a chat channel. Channel needs to be placed inside a Chat component\n * to receive the StreamChat client instance. MessageList, Thread, and MessageInput must be\n * children of the Channel component to receive the ChannelContext.\n *\n * @example ./Channel.md\n */\nexport const Channel = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: PropsWithChildren<ChannelProps<StreamChatGenerics>>,\n) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n  const { t } = useTranslationContext();\n\n  const shouldSyncChannel = props.thread?.id ? !!props.threadList : true;\n\n  const {\n    members,\n    messages,\n    read,\n    setMembers,\n    setMessages,\n    setRead,\n    setThreadMessages,\n    setTyping,\n    setWatcherCount,\n    setWatchers,\n    threadMessages,\n    typing,\n    watcherCount,\n    watchers,\n  } = useChannelState<StreamChatGenerics>(\n    props.channel,\n    props.threadList ? props.thread?.id : undefined,\n  );\n\n  return (\n    <ChannelWithContext<StreamChatGenerics>\n      {...{\n        client,\n        t,\n      }}\n      {...props}\n      shouldSyncChannel={shouldSyncChannel}\n      {...{\n        members,\n        messages: props.messages || messages,\n        read,\n        setMembers,\n        setMessages,\n        setRead,\n        setThreadMessages,\n        setTyping,\n        setWatcherCount,\n        setWatchers,\n        threadMessages,\n        typing,\n        watcherCount,\n        watchers,\n      }}\n    />\n  );\n};\n"]}