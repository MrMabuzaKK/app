{"version":3,"sources":["ChannelPreview.tsx"],"names":["ChannelPreviewWithContext","props","channel","client","Preview","state","messages","length","lastMessage","setLastMessage","forceUpdate","setForceUpdate","countUnread","unread","setUnread","latestMessagePreview","channelLastMessage","channelLastMessageString","id","updated_at","newUnreadCount","handleEvent","event","message","type","on","off","handleReadEvent","user","userID","prev","ChannelPreview"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport type { Channel, ChannelState, Event, MessageResponse } from 'stream-chat';\n\nimport { useLatestMessagePreview } from './hooks/useLatestMessagePreview';\n\nimport {\n  ChannelsContextValue,\n  useChannelsContext,\n} from '../../contexts/channelsContext/ChannelsContext';\nimport { ChatContextValue, useChatContext } from '../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\nexport type ChannelPreviewPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<ChatContextValue<StreamChatGenerics>, 'client'> &\n  Pick<ChannelsContextValue<StreamChatGenerics>, 'Preview'> & {\n    /**\n     * The previewed channel\n     */\n    channel: Channel<StreamChatGenerics>;\n  };\n\n/**\n * This component manages state for the ChannelPreviewMessenger UI component and receives\n * all props from the ChannelListMessenger component.\n */\nconst ChannelPreviewWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: ChannelPreviewPropsWithContext<StreamChatGenerics>,\n) => {\n  const { channel, client, Preview } = props;\n\n  const [lastMessage, setLastMessage] = useState<\n    | ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>\n    | MessageResponse<StreamChatGenerics>\n    | undefined\n  >(channel.state.messages[channel.state.messages.length - 1]);\n  const [forceUpdate, setForceUpdate] = useState(0);\n  const [unread, setUnread] = useState(channel.countUnread());\n\n  const latestMessagePreview = useLatestMessagePreview(channel, forceUpdate, lastMessage);\n\n  const channelLastMessage = channel.lastMessage();\n  const channelLastMessageString = `${channelLastMessage?.id}${channelLastMessage?.updated_at}`;\n\n  useEffect(() => {\n    if (\n      channelLastMessage &&\n      (channelLastMessage.id !== lastMessage?.id ||\n        channelLastMessage.updated_at !== lastMessage?.updated_at)\n    ) {\n      setLastMessage(channelLastMessage);\n    }\n\n    const newUnreadCount = channel.countUnread();\n\n    if (newUnreadCount !== unread) {\n      setUnread(newUnreadCount);\n    }\n  }, [channelLastMessageString]);\n\n  useEffect(() => {\n    const handleEvent = (event: Event<StreamChatGenerics>) => {\n      if (event.message) {\n        setLastMessage(event.message);\n      }\n\n      if (event.type === 'message.new') {\n        setUnread(channel.countUnread());\n      }\n    };\n\n    channel.on('message.new', handleEvent);\n    channel.on('message.updated', handleEvent);\n    channel.on('message.deleted', handleEvent);\n\n    return () => {\n      channel.off('message.new', handleEvent);\n      channel.off('message.updated', handleEvent);\n      channel.off('message.deleted', handleEvent);\n    };\n  }, []);\n\n  useEffect(() => {\n    const handleReadEvent = (event: Event<StreamChatGenerics>) => {\n      if (event.user?.id === client.userID) {\n        setUnread(0);\n      } else if (event.user?.id) {\n        setForceUpdate((prev) => prev + 1);\n      }\n    };\n\n    channel.on('message.read', handleReadEvent);\n    return () => channel.off('message.read', handleReadEvent);\n  }, []);\n\n  return <Preview channel={channel} latestMessagePreview={latestMessagePreview} unread={unread} />;\n};\n\nexport type ChannelPreviewProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<Omit<ChannelPreviewPropsWithContext<StreamChatGenerics>, 'channel'>> &\n  Pick<ChannelPreviewPropsWithContext<StreamChatGenerics>, 'channel'>;\n\nexport const ChannelPreview = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: ChannelPreviewProps<StreamChatGenerics>,\n) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n  const { Preview } = useChannelsContext<StreamChatGenerics>();\n\n  return <ChannelPreviewWithContext {...{ client, Preview }} {...props} />;\n};\n"]}