{"version":3,"sources":["AttachmentPickerBottomSheetHandle.tsx"],"names":["styles","StyleSheet","create","container","alignItems","height","justifyContent","handle","borderRadius","width","AttachmentPickerBottomSheetHandle","animatedIndex","theme","colors","black","white","style","borderTopLeftRadius","value","borderTopRightRadius","backgroundColor"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,MAAM,EAAE,EAFC;AAGTC,IAAAA,cAAc,EAAE;AAHP,GADoB;AAM/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,YAAY,EAAE,CADR;AAENH,IAAAA,MAAM,EAAE,CAFF;AAGNI,IAAAA,KAAK,EAAE;AAHD;AANuB,CAAlB,CAAf;;AAaO,IAAMC,iCAEX,GAAG,SAFQA,iCAER,OAAuB;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AAC1B,kBAII,6BAJJ;AAAA,wCACEC,KADF,CAEIC,MAFJ;AAAA,MAEcC,KAFd,yBAEcA,KAFd;AAAA,MAEqBC,KAFrB,yBAEqBA,KAFrB;;AAMA,MAAMC,KAAK,GAAG,6CAA4B;AAAA,WAAO;AAC/CC,MAAAA,mBAAmB,EAAEN,aAAa,CAACO,KAAd,GAAsB,CAAtB,GAA0B,KAAKP,aAAa,CAACO,KAAd,GAAsB,EAArD,GAA0D,EADhC;AAE/CC,MAAAA,oBAAoB,EAAER,aAAa,CAACO,KAAd,GAAsB,CAAtB,GAA0B,KAAKP,aAAa,CAACO,KAAd,GAAsB,EAArD,GAA0D;AAFjC,KAAP;AAAA,GAA5B,CAAd;AAKA,SACE,gCAAC,iCAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE,CAAClB,MAAM,CAACG,SAAR,EAAmB;AAAEiB,MAAAA,eAAe,EAAEL;AAAnB,KAAnB,EAA+CC,KAA/C,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAAChB,MAAM,CAACO,MAAR,EAAgB;AAAEa,MAAAA,eAAe,EAAKN,KAAL;AAAjB,KAAhB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAMD,CApBM","sourcesContent":["import React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    height: 20,\n    justifyContent: 'center',\n  },\n  handle: {\n    borderRadius: 2,\n    height: 4,\n    width: 40,\n  },\n});\n\nexport const AttachmentPickerBottomSheetHandle: React.FC<{\n  animatedIndex: Animated.SharedValue<number>;\n}> = ({ animatedIndex }) => {\n  const {\n    theme: {\n      colors: { black, white },\n    },\n  } = useTheme();\n\n  const style = useAnimatedStyle<ViewStyle>(() => ({\n    borderTopLeftRadius: animatedIndex.value > 0 ? 16 - animatedIndex.value * 16 : 16,\n    borderTopRightRadius: animatedIndex.value > 0 ? 16 - animatedIndex.value * 16 : 16,\n  }));\n\n  return (\n    <Animated.View style={[styles.container, { backgroundColor: white }, style]}>\n      <View style={[styles.handle, { backgroundColor: `${black}1A` }]} />\n      {/* ^ 1A = 10% opacity */}\n    </Animated.View>\n  );\n};\n"]}