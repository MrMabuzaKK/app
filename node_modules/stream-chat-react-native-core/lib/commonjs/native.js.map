{"version":3,"sources":["native.ts"],"names":["fail","Error","compressImage","deleteFile","getLocalAssetUri","getPhotos","FlatList","DefaultFlatList","NetInfo","addEventListener","fetch","pickDocument","saveFile","shareImage","takePhoto","triggerHaptic","SDK","Video","registerNativeHandlers","handlers","isVideoPackageAvailable"],"mappings":";;;;;AACA;;AAMA,IAAMA,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,QAAMC,KAAK,CACT,mGADS,CAAX;AAGD,CAJD;;AAiBO,IAAIC,aAA4B,GAAGF,IAAnC;;AAGA,IAAIG,UAAsB,GAAGH,IAA7B;;AAGA,IAAII,gBAAkC,GAAGJ,IAAzC;;AASA,IAAIK,SAAoB,GAAGL,IAA3B;;AAOA,IAAIM,QAAQ,GAAGC,qBAAf;;AAEA,IAAIC,OAAgB,GAAG;AAC5BC,EAAAA,gBAAgB,EAAET,IADU;AAE5BU,EAAAA,KAAK,EAAEV;AAFqB,CAAvB;;AAWA,IAAIW,YAA0B,GAAGX,IAAjC;;AAOA,IAAIY,QAAkB,GAAGZ,IAAzB;;AAOA,IAAIa,UAAsB,GAAGb,IAA7B;;AASA,IAAIc,SAAoB,GAAGd,IAA3B;;AAWA,IAAIe,aAA4B,GAAGf,IAAnC;;AAEA,IAAIgB,GAAJ;;AAoDA,IAAIC,KAAJ;;;AAkBA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD,EAAwB;AAC5D,MAAIA,QAAQ,CAACjB,aAAb,EAA4B;AAC1B,4BAAAA,aAAa,GAAGiB,QAAQ,CAACjB,aAAzB;AACD;;AAED,MAAIiB,QAAQ,CAAChB,UAAb,EAAyB;AACvB,yBAAAA,UAAU,GAAGgB,QAAQ,CAAChB,UAAtB;AACD;;AAED,MAAIgB,QAAQ,CAACb,QAAb,EAAuB;AACrB,uBAAAA,QAAQ,GAAGa,QAAQ,CAACb,QAApB;AACD;;AACD,MAAIa,QAAQ,CAACX,OAAb,EAAsB;AACpB,sBAAAA,OAAO,GAAGW,QAAQ,CAACX,OAAnB;AACD;;AAED,MAAIW,QAAQ,CAACf,gBAAb,EAA+B;AAC7B,+BAAAA,gBAAgB,GAAGe,QAAQ,CAACf,gBAA5B;AACD;;AAED,MAAIe,QAAQ,CAACd,SAAb,EAAwB;AACtB,wBAAAA,SAAS,GAAGc,QAAQ,CAACd,SAArB;AACD;;AAED,MAAIc,QAAQ,CAACX,OAAb,EAAsB;AACpB,sBAAAA,OAAO,GAAGW,QAAQ,CAACX,OAAnB;AACD;;AAED,MAAIW,QAAQ,CAACR,YAAb,EAA2B;AACzB,2BAAAA,YAAY,GAAGQ,QAAQ,CAACR,YAAxB;AACD;;AAED,MAAIQ,QAAQ,CAACP,QAAb,EAAuB;AACrB,uBAAAA,QAAQ,GAAGO,QAAQ,CAACP,QAApB;AACD;;AAED,MAAIO,QAAQ,CAACH,GAAb,EAAkB;AAChB,kBAAAA,GAAG,GAAGG,QAAQ,CAACH,GAAf;AACD;;AAED,MAAIG,QAAQ,CAACN,UAAb,EAAyB;AACvB,yBAAAA,UAAU,GAAGM,QAAQ,CAACN,UAAtB;AACD;;AAED,MAAIM,QAAQ,CAACL,SAAb,EAAwB;AACtB,wBAAAA,SAAS,GAAGK,QAAQ,CAACL,SAArB;AACD;;AAED,MAAIK,QAAQ,CAACJ,aAAb,EAA4B;AAC1B,4BAAAA,aAAa,GAAGI,QAAQ,CAACJ,aAAzB;AACD;;AAED,MAAII,QAAQ,CAACF,KAAb,EAAoB;AAClB,oBAAAA,KAAK,GAAGE,QAAQ,CAACF,KAAjB;AACD;AACF,CAvDM;;;;AAyDA,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B;AAAA,SAAM,CAAC,CAACH,KAAR;AAAA,CAAhC","sourcesContent":["import type React from 'react';\nimport { FlatList as DefaultFlatList, StyleProp, ViewStyle } from 'react-native';\n\nimport type { NetInfoSubscription } from '@react-native-community/netinfo';\n\nimport type { Asset, File } from './types/types';\n\nconst fail = () => {\n  throw Error(\n    'Native handler was not registered, you should import stream-chat-expo or stream-chat-react-native',\n  );\n};\n\ntype CompressImage = ({\n  compressImageQuality,\n  height,\n  uri,\n  width,\n}: {\n  compressImageQuality: number;\n  height: number;\n  uri: string;\n  width: number;\n}) => Promise<string> | never;\nexport let compressImage: CompressImage = fail;\n\ntype DeleteFile = ({ uri }: { uri: string }) => Promise<boolean> | never;\nexport let deleteFile: DeleteFile = fail;\n\ntype GetLocalAssetUri = (uriOrAssetId: string) => never;\nexport let getLocalAssetUri: GetLocalAssetUri = fail;\n\ntype GetPhotos = ({ after, first }: { first: number; after?: string }) =>\n  | Promise<{\n      assets: Array<Omit<Asset, 'source'> & { source: 'picker' }>;\n      endCursor: string;\n      hasNextPage: boolean;\n    }>\n  | never;\nexport let getPhotos: GetPhotos = fail;\n\ntype NetInfo = {\n  addEventListener: (listener: (isConnected: boolean) => void) => NetInfoSubscription | never;\n  fetch: (requestedInterface?: string | undefined) => Promise<boolean> | never;\n};\n\nexport let FlatList = DefaultFlatList;\n\nexport let NetInfo: NetInfo = {\n  addEventListener: fail,\n  fetch: fail,\n};\n\ntype PickDocument = ({ maxNumberOfFiles }: { maxNumberOfFiles?: number }) =>\n  | Promise<{\n      cancelled: boolean;\n      docs?: File[];\n    }>\n  | never;\nexport let pickDocument: PickDocument = fail;\n\ntype SaveFileOptions = {\n  fileName: string;\n  fromUrl: string;\n};\ntype SaveFile = (options: SaveFileOptions) => Promise<string> | never;\nexport let saveFile: SaveFile = fail;\n\ntype ShareOptions = {\n  type?: string;\n  url?: string;\n};\ntype ShareImage = (options: ShareOptions) => Promise<boolean> | never;\nexport let shareImage: ShareImage = fail;\n\ntype Photo =\n  | (Omit<Asset, 'source'> & {\n      cancelled: false;\n      source: 'camera';\n    })\n  | { cancelled: true };\ntype TakePhoto = (options: { compressImageQuality?: number }) => Promise<Photo> | never;\nexport let takePhoto: TakePhoto = fail;\n\ntype HapticFeedbackMethod =\n  | 'impactHeavy'\n  | 'impactLight'\n  | 'impactMedium'\n  | 'notificationError'\n  | 'notificationSuccess'\n  | 'notificationWarning'\n  | 'selection';\ntype TriggerHaptic = (method: HapticFeedbackMethod) => void | never;\nexport let triggerHaptic: TriggerHaptic = fail;\n\nexport let SDK: string;\n\nexport type PlaybackStatus = {\n  didJustFinish: boolean;\n  durationMillis: number;\n  error: string;\n  isBuffering: boolean;\n  isLoaded: boolean;\n  isLooping: boolean;\n  isPlaying: boolean;\n  positionMillis: number;\n};\n\nexport type VideoProgressData = {\n  currentTime?: number;\n  playableDuration?: number;\n  seekableDuration?: number;\n};\n\nexport type VideoPayloadData = {\n  audioTracks?: { index: number; language: string; title: string; type: string }[];\n  currentPosition?: number;\n  duration?: number;\n  naturalSize?: { height: number; orientation: 'portrait' | 'landscape'; width: number };\n  textTracks?: { index: number; language: string; title: string; type: string }[];\n  videoTracks?: {\n    bitrate: number;\n    codecs: string;\n    height: number;\n    trackId: number;\n    width: number;\n  }[];\n};\n\nexport type VideoType = {\n  paused: boolean;\n  uri: string;\n  videoRef: React.RefObject<VideoType>;\n  onBuffer?: (props: { isBuffering: boolean }) => void;\n  onEnd?: () => void;\n  onLoad?: (payload: VideoPayloadData) => void;\n  onLoadStart?: () => void;\n  onPlaybackStatusUpdate?: (playbackStatus: PlaybackStatus) => void;\n  onProgress?: (data: VideoProgressData) => void;\n  onReadyForDisplay?: () => void;\n  replayAsync?: () => void;\n  resizeMode?: string;\n  seek?: (progress: number) => void;\n  setPositionAsync?: (position: number) => void;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport let Video: React.ComponentType<VideoType>;\n\ntype Handlers = {\n  compressImage?: CompressImage;\n  deleteFile?: DeleteFile;\n  FlatList?: typeof DefaultFlatList;\n  getLocalAssetUri?: GetLocalAssetUri;\n  getPhotos?: GetPhotos;\n  NetInfo?: NetInfo;\n  pickDocument?: PickDocument;\n  saveFile?: SaveFile;\n  SDK?: string;\n  shareImage?: ShareImage;\n  takePhoto?: TakePhoto;\n  triggerHaptic?: TriggerHaptic;\n  Video?: React.ComponentType<VideoType>;\n};\n\nexport const registerNativeHandlers = (handlers: Handlers) => {\n  if (handlers.compressImage) {\n    compressImage = handlers.compressImage;\n  }\n\n  if (handlers.deleteFile) {\n    deleteFile = handlers.deleteFile;\n  }\n\n  if (handlers.FlatList) {\n    FlatList = handlers.FlatList;\n  }\n  if (handlers.NetInfo) {\n    NetInfo = handlers.NetInfo;\n  }\n\n  if (handlers.getLocalAssetUri) {\n    getLocalAssetUri = handlers.getLocalAssetUri;\n  }\n\n  if (handlers.getPhotos) {\n    getPhotos = handlers.getPhotos;\n  }\n\n  if (handlers.NetInfo) {\n    NetInfo = handlers.NetInfo;\n  }\n\n  if (handlers.pickDocument) {\n    pickDocument = handlers.pickDocument;\n  }\n\n  if (handlers.saveFile) {\n    saveFile = handlers.saveFile;\n  }\n\n  if (handlers.SDK) {\n    SDK = handlers.SDK;\n  }\n\n  if (handlers.shareImage) {\n    shareImage = handlers.shareImage;\n  }\n\n  if (handlers.takePhoto) {\n    takePhoto = handlers.takePhoto;\n  }\n\n  if (handlers.triggerHaptic) {\n    triggerHaptic = handlers.triggerHaptic;\n  }\n\n  if (handlers.Video) {\n    Video = handlers.Video;\n  }\n};\n\nexport const isVideoPackageAvailable = () => !!Video;\n"]}