{"version":3,"sources":["getResizedImageUrl.ts"],"names":["getResizedImageUrl","height","resize","url","width","parsedUrl","URL","originalHeight","searchParams","get","originalWidth","isResizableUrl","includes","set","PixelRatio","getPixelSizeForLayoutSize","Number","toString","error","console","warn"],"mappings":";;;;;AAAA;;AAqBO,SAASA,kBAAT,OAKsB;AAAA,MAJ3BC,MAI2B,QAJ3BA,MAI2B;AAAA,yBAH3BC,MAG2B;AAAA,MAH3BA,MAG2B,4BAHlB,MAGkB;AAAA,MAF3BC,GAE2B,QAF3BA,GAE2B;AAAA,MAD3BC,KAC2B,QAD3BA,KAC2B;;AAC3B,MAAI;AACF,QAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQH,GAAR,CAAlB;AAEA,QAAMI,cAAc,GAAGF,SAAS,CAACG,YAAV,CAAuBC,GAAvB,CAA2B,IAA3B,CAAvB;AACA,QAAMC,aAAa,GAAGL,SAAS,CAACG,YAAV,CAAuBC,GAAvB,CAA2B,IAA3B,CAAtB;AAKA,QAAME,cAAc,GAAGR,GAAG,CAACS,QAAJ,CAAa,oBAAb,KAAsCL,cAAtC,IAAwDG,aAA/E;AAEA,QAAI,CAACC,cAAD,IAAoB,CAACV,MAAD,IAAW,CAACG,KAApC,EAA4C,OAAOD,GAAP;;AAE5C,QAAIF,MAAJ,EAAY;AACVI,MAAAA,SAAS,CAACG,YAAV,CAAuBK,GAAvB,CAA2B,GAA3B,OAAmCC,wBAAWC,yBAAX,CAAqCC,MAAM,CAACf,MAAD,CAA3C,CAAnC;AACD;;AAED,QAAIG,KAAJ,EAAW;AACTC,MAAAA,SAAS,CAACG,YAAV,CAAuBK,GAAvB,CAA2B,GAA3B,OAAmCC,wBAAWC,yBAAX,CAAqCC,MAAM,CAACZ,KAAD,CAA3C,CAAnC;AACD;;AAEDC,IAAAA,SAAS,CAACG,YAAV,CAAuBK,GAAvB,CAA2B,QAA3B,OAAwCX,MAAxC;AAEA,WAAOG,SAAS,CAACY,QAAV,EAAP;AACD,GAxBD,CAwBE,OAAOC,KAAP,EAAc;AAGdC,IAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AAEA,WAAOf,GAAP;AACD;AACF","sourcesContent":["import { PixelRatio } from 'react-native';\n\ntype GetResizedImageUrlParams = {\n  url: string;\n  height?: string | number;\n  resize?: 'clip' | 'crop' | 'fill' | 'scale';\n  width?: string | number;\n};\n\n/**\n * Any file or image upload done through stream's chat SDK or components get uploaded\n * to CloudFront CDN. Following function returns a url of resized image (to given width and height).\n * It can be used to avoid rendering heavy images on UI, for the sake of performance.\n *\n * This function accepts an object with following properties:\n * - height: height of the resized image.\n * - url: url of the image.\n * - width: width of the resized image.\n *\n * @returns {string} Url of the image with given height and width.\n */\nexport function getResizedImageUrl({\n  height,\n  resize = 'clip',\n  url,\n  width,\n}: GetResizedImageUrlParams) {\n  try {\n    const parsedUrl = new URL(url);\n\n    const originalHeight = parsedUrl.searchParams.get('oh');\n    const originalWidth = parsedUrl.searchParams.get('ow');\n\n    // If url is not from new cloudfront CDN (which offers fast image resizing), then return the url as it is.\n    // Check for oh and ow parameters in the url, is just to differentiate between old and new CDN.\n    // In case of old CDN we don't want to do any kind of resizing.\n    const isResizableUrl = url.includes('.stream-io-cdn.com') && originalHeight && originalWidth;\n\n    if (!isResizableUrl || (!height && !width)) return url;\n\n    if (height) {\n      parsedUrl.searchParams.set('h', `${PixelRatio.getPixelSizeForLayoutSize(Number(height))}`);\n    }\n\n    if (width) {\n      parsedUrl.searchParams.set('w', `${PixelRatio.getPixelSizeForLayoutSize(Number(width))}`);\n    }\n\n    parsedUrl.searchParams.set('resize', `${resize}`);\n\n    return parsedUrl.toString();\n  } catch (error) {\n    // There is some issue with the url.\n    // Simply return the original url, there is no need to break the app for this.\n    console.warn(error);\n\n    return url;\n  }\n}\n"]}