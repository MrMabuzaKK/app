{"version":3,"sources":["MessageContext.tsx"],"names":["MessageContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","MessageProvider","children","value","useMessageContext","contextValue","withMessageContext","Component","WithMessageContextComponent","props","messageContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAaA;;AAEA;;;;;;;;;AA2FO,IAAMA,cAAc,GAAGC,kBAAMC,aAAN,CAC5BC,mDAD4B,CAAvB;;;;AAIA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAG7BC,QAH6B,QAG7BA,QAH6B;AAAA,MAI7BC,KAJ6B,QAI7BA,KAJ6B;AAAA,SAQ7B,gCAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEA,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAR6B;AAAA,CAAxB;;;;AAaA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,GAE1B;AACL,MAAMC,YAAY,GAAG,uBACnBR,cADmB,CAArB;AAIA,SAAOQ,YAAP;AACD,CARM;;;;AAeA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAIhCC,SAJgC,EAKqC;AACrE,MAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAClCC,KADkC,EAE/B;AACH,QAAMC,cAAc,GAAGN,iBAAiB,EAAxC;AAEA,WAAO,gCAAC,SAAD,gCAAgBK,KAAhB,EAAiCC,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,2BAA2B,CAACG,WAA5B,0BAA+D,oCAAeJ,SAAf,CAA/D;AACA,SAAOC,2BAAP;AACD,CAfM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport type { Attachment } from 'stream-chat';\n\nimport type { ActionHandler } from '../../components/Attachment/Attachment';\nimport type {\n  MessageTouchableHandlerPayload,\n  TouchableHandlerPayload,\n} from '../../components/Message/Message';\nimport type { GroupType, MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type { ChannelContextValue } from '../../contexts/channelContext/ChannelContext';\nimport type { MessageContentType } from '../../contexts/messagesContext/MessagesContext';\nimport type { DefaultStreamChatGenerics, UnknownType } from '../../types/types';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nexport type Alignment = 'right' | 'left';\n\nexport type Reactions = {\n  own: boolean;\n  type: string;\n}[];\n\nexport type MessageContextValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  /** Whether or not actions can be performed on message */\n  actionsEnabled: boolean;\n  /** Position of the message, either 'right' or 'left' */\n  alignment: Alignment;\n  /** The files attached to a message */\n  files: Attachment<StreamChatGenerics>[];\n  /**\n   * Position of message in group - top, bottom, middle, single.\n   *\n   * Message group is a group of consecutive messages from same user. groupStyles can be used to style message as per their position in message group\n   * e.g., user avatar (to which message belongs to) is only showed for last (bottom) message in group.\n   */\n  groupStyles: GroupType[];\n  /** Handler for actions. Actions in combination with attachments can be used to build [commands](https://getstream.io/chat/docs/#channel_commands). */\n  handleAction: ActionHandler;\n  handleDeleteMessage: () => Promise<void>;\n  handleEditMessage: () => void;\n  handleQuotedReplyMessage: () => void;\n  handleResendMessage: () => Promise<void>;\n  handleToggleBanUser: () => Promise<void>;\n  handleToggleMuteUser: () => Promise<void>;\n  handleToggleReaction: (reactionType: string) => Promise<void>;\n  /** Whether or not message has reactions */\n  hasReactions: boolean;\n  /** The images attached to a message */\n  images: Attachment<StreamChatGenerics>[];\n  /** Whether or not this is the active user's message */\n  isMyMessage: boolean;\n  /** Whether or not this is the last message in a group of messages */\n  lastGroupMessage: boolean;\n  /** Current [message object](https://getstream.io/chat/docs/#message_format) */\n  message: MessageType<StreamChatGenerics>;\n  /** Order to render the message content */\n  messageContentOrder: MessageContentType[];\n  /**\n   * You can call methods available on the Message\n   * component such as handleEdit, handleDelete, handleAction etc.\n   *\n   * Source - [Message](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Message/Message.tsx)\n   *\n   * By default, we show the overlay with all the message actions on long press.\n   *\n   * @param payload   Payload object for onLongPress event\n   */\n  onLongPress: (payload: TouchableHandlerPayload) => void;\n  /** Whether the message is only text and the text is only emojis */\n  onlyEmojis: boolean;\n  /** Handler to open a thread on a message */\n  onOpenThread: () => void;\n  /**\n   * You can call methods available on the Message\n   * component such as handleEdit, handleDelete, handleAction etc.\n   *\n   * Source - [Message](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Message/Message.tsx)\n   *\n   * By default, we will dismiss the keyboard on press.\n   *\n   * @param payload   Payload object for onPress event\n   */\n  onPress: (payload: MessageTouchableHandlerPayload) => void;\n  onPressIn: ((payload: TouchableHandlerPayload) => void) | null;\n  /** The images attached to a message */\n  otherAttachments: Attachment<StreamChatGenerics>[];\n  reactions: Reactions;\n  showMessageOverlay: (messageReactions?: boolean) => void;\n  showMessageStatus: boolean;\n  /** Whether or not the Message is part of a Thread */\n  threadList: boolean;\n  /** The videos attached to a message */\n  videos: Attachment<StreamChatGenerics>[];\n  goToMessage?: (messageId: string) => void;\n  /** Latest message id on current channel */\n  lastReceivedId?: string;\n  /** Prevent message being pressed for image viewer view */\n  preventPress?: boolean;\n  /** Whether or not the avatar show show next to Message */\n  showAvatar?: boolean;\n} & Pick<ChannelContextValue<StreamChatGenerics>, 'channel' | 'disabled' | 'members'>;\n\nexport const MessageContext = React.createContext(\n  DEFAULT_BASE_CONTEXT_VALUE as MessageContextValue,\n);\n\nexport const MessageProvider = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value?: MessageContextValue<StreamChatGenerics>;\n}>) => (\n  <MessageContext.Provider value={value as unknown as MessageContextValue}>\n    {children}\n  </MessageContext.Provider>\n);\n\nexport const useMessageContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const contextValue = useContext(\n    MessageContext,\n  ) as unknown as MessageContextValue<StreamChatGenerics>;\n\n  return contextValue;\n};\n\n/**\n * Typescript currently does not support partial inference so if MessageContext\n * typing is desired while using the HOC withMessageContextContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessageContext = <\n  P extends UnknownType,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof MessageContextValue<StreamChatGenerics>>> => {\n  const WithMessageContextComponent = (\n    props: Omit<P, keyof MessageContextValue<StreamChatGenerics>>,\n  ) => {\n    const messageContext = useMessageContext<StreamChatGenerics>();\n\n    return <Component {...(props as P)} {...messageContext} />;\n  };\n  WithMessageContextComponent.displayName = `WithMessageContext${getDisplayName(Component)}`;\n  return WithMessageContextComponent;\n};\n"]}