{"version":3,"sources":["MessagesContext.tsx"],"names":["MessagesContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","MessagesProvider","children","value","useMessagesContext","contextValue","Error","withMessagesContext","Component","WithMessagesContextComponent","props","messagesContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAmDA;;AAEA;;AACA;;;;;;;;;AA6ZO,IAAMA,eAAe,GAAGC,kBAAMC,aAAN,CAC7BC,mDAD6B,CAAxB;;;;AAIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAG9BC,QAH8B,QAG9BA,QAH8B;AAAA,MAI9BC,KAJ8B,QAI9BA,KAJ8B;AAAA,SAQ9B,gCAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEA,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAR8B;AAAA,CAAzB;;;;AAaA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,GAE3B;AACL,MAAMC,YAAY,GAAG,uBACnBR,eADmB,CAArB;;AAIA,MAAIQ,YAAY,KAAKL,mDAAjB,IAA+C,CAAC,2CAApD,EAAyE;AACvE,UAAM,IAAIM,KAAJ,yOAAN;AAGD;;AAED,SAAOD,YAAP;AACD,CAdM;;;;AAqBA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAIjCC,SAJiC,EAKqC;AACtE,MAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CACnCC,KADmC,EAEhC;AACH,QAAMC,eAAe,GAAGP,kBAAkB,EAA1C;AAEA,WAAO,gCAAC,SAAD,gCAAgBM,KAAhB,EAAiCC,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,4BAA4B,CAACG,WAA7B,2BAAiE,oCAAeJ,SAAf,CAAjE;AACA,SAAOC,4BAAP;AACD,CAfM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport type { TouchableOpacityProps } from 'react-native';\n\nimport type { MessagePinnedHeaderProps } from 'src/components/Message/MessageSimple/MessagePinnedHeader';\n\nimport type { Attachment, ChannelState, MessageResponse } from 'stream-chat';\n\nimport type { AttachmentProps } from '../../components/Attachment/Attachment';\nimport type { AttachmentActionsProps } from '../../components/Attachment/AttachmentActions';\nimport type { CardProps } from '../../components/Attachment/Card';\nimport type { FileAttachmentProps } from '../../components/Attachment/FileAttachment';\nimport type { FileAttachmentGroupProps } from '../../components/Attachment/FileAttachmentGroup';\nimport type { FileIconProps } from '../../components/Attachment/FileIcon';\nimport type { GalleryProps } from '../../components/Attachment/Gallery';\nimport type { GiphyProps } from '../../components/Attachment/Giphy';\nimport type { VideoThumbnailProps } from '../../components/Attachment/VideoThumbnail';\nimport type {\n  MessageProps,\n  MessageTouchableHandlerPayload,\n} from '../../components/Message/Message';\nimport type { MessageAvatarProps } from '../../components/Message/MessageSimple/MessageAvatar';\nimport type { MessageContentProps } from '../../components/Message/MessageSimple/MessageContent';\nimport type { MessageDeletedProps } from '../../components/Message/MessageSimple/MessageDeleted';\nimport type { MessageFooterProps } from '../../components/Message/MessageSimple/MessageFooter';\n\nimport type { MessageRepliesProps } from '../../components/Message/MessageSimple/MessageReplies';\nimport type { MessageRepliesAvatarsProps } from '../../components/Message/MessageSimple/MessageRepliesAvatars';\nimport type { MessageSimpleProps } from '../../components/Message/MessageSimple/MessageSimple';\nimport type { MessageStatusProps } from '../../components/Message/MessageSimple/MessageStatus';\nimport type { MessageTextProps } from '../../components/Message/MessageSimple/MessageTextContainer';\nimport type { ReactionListProps } from '../../components/Message/MessageSimple/ReactionList';\nimport type { MarkdownRules } from '../../components/Message/MessageSimple/utils/renderText';\nimport type { MessageActionsParams } from '../../components/Message/utils/messageActions';\nimport type { DateHeaderProps } from '../../components/MessageList/DateHeader';\nimport type { MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type { InlineDateSeparatorProps } from '../../components/MessageList/InlineDateSeparator';\nimport type { MessageListProps } from '../../components/MessageList/MessageList';\nimport type { MessageSystemProps } from '../../components/MessageList/MessageSystem';\nimport type { ScrollToBottomButtonProps } from '../../components/MessageList/ScrollToBottomButton';\nimport type { MessageActionType } from '../../components/MessageOverlay/MessageActionListItem';\nimport type { OverlayReactionListProps } from '../../components/MessageOverlay/OverlayReactionList';\nimport type { ReplyProps } from '../../components/Reply/Reply';\nimport type { FlatList } from '../../native';\nimport type { DefaultStreamChatGenerics, UnknownType } from '../../types/types';\nimport type { ReactionData } from '../../utils/utils';\nimport type { Alignment } from '../messageContext/MessageContext';\nimport type { SuggestionCommand } from '../suggestionsContext/SuggestionsContext';\nimport type { DeepPartial } from '../themeContext/ThemeContext';\nimport type { Theme } from '../themeContext/utils/theme';\nimport type { TDateTimeParserInput } from '../translationContext/TranslationContext';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\nimport { isTestEnvironment } from '../utils/isTestEnvironment';\n\nexport type MessageContentType = 'attachments' | 'files' | 'gallery' | 'quoted_reply' | 'text';\n\nexport type MessagesContextValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  /**\n   * UI component for Attachment.\n   * Defaults to: [Attachment](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Attachment/Attachment.tsx)\n   */\n  Attachment: React.ComponentType<AttachmentProps<StreamChatGenerics>>;\n  /**\n   * UI component to display AttachmentActions. e.g., send, shuffle, cancel in case of giphy\n   * Defaults to: [AttachmentActions](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Attachment/AttachmentActions.tsx)\n   */\n  AttachmentActions: React.ComponentType<AttachmentActionsProps<StreamChatGenerics>>;\n  /**\n   * UI component to display generic media type e.g. giphy, url preview etc\n   * Defaults to: [Card](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Attachment/Card.tsx)\n   */\n  Card: React.ComponentType<CardProps<StreamChatGenerics>>;\n  /**\n   * UI component for DateHeader\n   * Defaults to: [DateHeader](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageList/DateHeader.tsx)\n   **/\n  DateHeader: React.ComponentType<DateHeaderProps>;\n\n  /** Should keyboard be dismissed when messaged is touched */\n  dismissKeyboardOnMessageTouch: boolean;\n\n  enableMessageGroupingByUser: boolean;\n\n  /**\n   * UI component to display File type attachment.\n   * Defaults to: [FileAttachment](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Attachment/FileAttachment.tsx)\n   */\n  FileAttachment: React.ComponentType<FileAttachmentProps<StreamChatGenerics>>;\n  /**\n   * UI component to display group of File type attachments or multiple file attachments (in single message).\n   * Defaults to: [FileAttachmentGroup](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Attachment/FileAttachmentGroup.tsx)\n   */\n  FileAttachmentGroup: React.ComponentType<FileAttachmentGroupProps<StreamChatGenerics>>;\n  /**\n   * UI component for attachment icon for type 'file' attachment.\n   * Defaults to: https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Attachment/FileIcon.tsx\n   */\n  FileAttachmentIcon: React.ComponentType<FileIconProps>;\n  FlatList: typeof FlatList;\n  /**\n   * UI component to display image attachments\n   * Defaults to: [Gallery](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Attachment/Gallery.tsx)\n   */\n  Gallery: React.ComponentType<GalleryProps<StreamChatGenerics>>;\n  /**\n   * UI component for Giphy\n   * Defaults to: [Giphy](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Attachment/Giphy.tsx)\n   */\n  Giphy: React.ComponentType<GiphyProps<StreamChatGenerics>>;\n  /**\n   * The giphy version to render - check the keys of the [Image Object](https://developers.giphy.com/docs/api/schema#image-object) for possible values. Uses 'fixed_height' by default\n   * */\n  giphyVersion: keyof NonNullable<Attachment['giphy']>;\n  /**\n   * When true, messageList will be scrolled at first unread message, when opened.\n   */\n  initialScrollToFirstUnreadMessage: boolean;\n  /**\n   * UI component for Message Date Separator Component\n   * Defaults to: [InlineDateSeparator](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageList/InlineDateSeparator.tsx)\n   */\n  InlineDateSeparator: React.ComponentType<InlineDateSeparatorProps>;\n  /**\n   * UI component for InlineUnreadIndicator\n   * Defaults to: [InlineUnreadIndicator](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Message/MessageSimple/InlineUnreadIndicator.tsx)\n   **/\n  InlineUnreadIndicator: React.ComponentType;\n  Message: React.ComponentType<MessageProps<StreamChatGenerics>>;\n  /**\n   * UI component for MessageAvatar\n   * Defaults to: [MessageAvatar](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Message/MessageSimple/MessageAvatar.tsx)\n   **/\n  MessageAvatar: React.ComponentType<MessageAvatarProps<StreamChatGenerics>>;\n  /**\n   * UI component for MessageContent\n   * Defaults to: [MessageContent](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Message/MessageSimple/MessageContent.tsx)\n   */\n  MessageContent: React.ComponentType<MessageContentProps<StreamChatGenerics>>;\n  /** Order to render the message content */\n  messageContentOrder: MessageContentType[];\n  /**\n   * UI component for MessageDeleted\n   * Defaults to: [MessageDeleted](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageSimple/MessageDeleted.tsx)\n   */\n  MessageDeleted: React.ComponentType<MessageDeletedProps<StreamChatGenerics>>;\n  /**\n   * Custom message footer component\n   */\n  MessageFooter: React.ComponentType<MessageFooterProps<StreamChatGenerics>>;\n  MessageList: React.ComponentType<MessageListProps<StreamChatGenerics>>;\n  /**\n   * Custom message pinned component\n   */\n  MessagePinnedHeader: React.ComponentType<MessagePinnedHeaderProps<StreamChatGenerics>>;\n  /**\n   * UI component for MessageReplies\n   * Defaults to: [MessageReplies](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageSimple/MessageReplies.tsx)\n   */\n\n  MessageReplies: React.ComponentType<MessageRepliesProps<StreamChatGenerics>>;\n  /**\n   * UI Component for MessageRepliesAvatars\n   * Defaults to: [MessageRepliesAvatars](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageSimple/MessageRepliesAvatars.tsx)\n   */\n  MessageRepliesAvatars: React.ComponentType<MessageRepliesAvatarsProps<StreamChatGenerics>>;\n  /**\n   * UI component for MessageSimple\n   * Defaults to: [MessageSimple](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Message/MessageSimple/MessageSimple.tsx)\n   */\n  MessageSimple: React.ComponentType<MessageSimpleProps<StreamChatGenerics>>;\n  /**\n   * UI component for MessageStatus (delivered/read)\n   * Defaults to: [MessageStatus](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Message/MessageSimple/MessageStatus.tsx)\n   */\n  MessageStatus: React.ComponentType<MessageStatusProps<StreamChatGenerics>>;\n  /**\n   * UI component for MessageSystem\n   * Defaults to: [MessageSystem](https://getstream.io/chat/docs/sdk/reactnative/ui-components/message-system/)\n   */\n  MessageSystem: React.ComponentType<MessageSystemProps<StreamChatGenerics>>;\n  /**\n   * UI component for OverlayReactionList\n   */\n  OverlayReactionList: React.ComponentType<OverlayReactionListProps<StreamChatGenerics>>;\n  /**\n   * UI component for ReactionList\n   * Defaults to: [ReactionList](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Reaction/ReactionList.tsx)\n   */\n  ReactionList: React.ComponentType<ReactionListProps<StreamChatGenerics>>;\n  removeMessage: (message: { id: string; parent_id?: string }) => void;\n  /**\n   * UI component for Reply\n   * Defaults to: [Reply](https://getstream.io/chat/docs/sdk/reactnative/ui-components/reply/)\n   */\n  Reply: React.ComponentType<ReplyProps<StreamChatGenerics>>;\n  /**\n   * Override the api request for retry message functionality.\n   */\n  retrySendMessage: (message: MessageResponse<StreamChatGenerics>) => Promise<void>;\n  /**\n   * UI component for ScrollToBottomButton\n   * Defaults to: [ScrollToBottomButton](https://getstream.io/chat/docs/sdk/reactnative/ui-components/scroll-to-bottom-button/)\n   */\n  ScrollToBottomButton: React.ComponentType<ScrollToBottomButtonProps>;\n  setEditingState: (message: MessageType<StreamChatGenerics>) => void;\n  setQuotedMessageState: (message: MessageType<StreamChatGenerics>) => void;\n  supportedReactions: ReactionData[];\n  /**\n   * UI component for TypingIndicator\n   * Defaults to: [TypingIndicator](https://getstream.io/chat/docs/sdk/reactnative/ui-components/typing-indicator/)\n   */\n  TypingIndicator: React.ComponentType;\n  /**\n   * UI component for TypingIndicatorContainer\n   * Defaults to: [TypingIndicatorContainer](https://getstream.io/chat/docs/sdk/reactnative/contexts/messages-context/#typingindicatorcontainer)\n   */\n  TypingIndicatorContainer: React.ComponentType;\n  updateMessage: (\n    updatedMessage: MessageResponse<StreamChatGenerics>,\n    extraState?: {\n      commands?: SuggestionCommand<StreamChatGenerics>[];\n      messageInput?: string;\n      threadMessages?: ChannelState<StreamChatGenerics>['threads'][string];\n    },\n  ) => void;\n  /**\n   * Custom UI component to display enriched url preview.\n   * Defaults to https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Attachment/Card.tsx\n   */\n  UrlPreview: React.ComponentType<CardProps<StreamChatGenerics>>;\n  VideoThumbnail: React.ComponentType<VideoThumbnailProps>;\n  /**\n   * Provide any additional props for `TouchableOpacity` which wraps inner MessageContent component here.\n   * Please check docs for TouchableOpacity for supported props - https://reactnative.dev/docs/touchableopacity#props\n   *\n   * @overrideType Object\n   */\n  additionalTouchableProps?: Omit<TouchableOpacityProps, 'style'>;\n  /**\n   * Custom UI component to override default cover (between Header and Footer) of Card component.\n   * Accepts the same props as Card component.\n   */\n  CardCover?: React.ComponentType<CardProps<StreamChatGenerics>>;\n  /**\n   * Custom UI component to override default Footer of Card component.\n   * Accepts the same props as Card component.\n   */\n  CardFooter?: React.ComponentType<CardProps<StreamChatGenerics>>;\n  /**\n   * Custom UI component to override default header of Card component.\n   * Accepts the same props as Card component.\n   */\n  CardHeader?: React.ComponentType<CardProps<StreamChatGenerics>>;\n\n  /**\n   * Full override of the delete message button in the Message Actions\n   *\n   * Please check [cookbook](https://github.com/GetStream/stream-chat-react-native/wiki/Cookbook-v3.0#override-or-intercept-message-actions-edit-delete-reaction-reply-etc) for details.\n   */\n\n  /** Control if the deleted message is visible to both the send and reciever, either of them or none  */\n  deletedMessagesVisibilityType?: 'always' | 'never' | 'receiver' | 'sender';\n\n  disableTypingIndicator?: boolean;\n\n  /**\n   * Whether messages should be aligned to right or left part of screen.\n   * By default, messages will be received messages will be aligned to left and\n   * sent messages will be aligned to right.\n   */\n  forceAlignMessages?: Alignment | boolean;\n  /**\n   * Optional function to custom format the message date\n   */\n  formatDate?: (date: TDateTimeParserInput) => string;\n  handleBlock?: (message: MessageType<StreamChatGenerics>) => Promise<void>;\n  /** Handler to access when a copy message action is invoked */\n  handleCopy?: (message: MessageType<StreamChatGenerics>) => Promise<void>;\n  /** Handler to access when a delete message action is invoked */\n  handleDelete?: (message: MessageType<StreamChatGenerics>) => Promise<void>;\n  /** Handler to access when an edit message action is invoked */\n  handleEdit?: (message: MessageType<StreamChatGenerics>) => void;\n  /** Handler to access when a flag message action is invoked */\n  handleFlag?: (message: MessageType<StreamChatGenerics>) => Promise<void>;\n  /** Handler to access when a mute user action is invoked */\n  handleMute?: (message: MessageType<StreamChatGenerics>) => Promise<void>;\n  /** Handler to access when a pin/unpin user action is invoked*/\n  handlePinMessage?: ((message: MessageType<StreamChatGenerics>) => MessageActionType) | null;\n  /** Handler to access when a quoted reply action is invoked */\n  handleQuotedReply?: (message: MessageType<StreamChatGenerics>) => Promise<void>;\n  /** Handler to process a reaction */\n  handleReaction?: (\n    message: MessageType<StreamChatGenerics>,\n    reactionType: string,\n  ) => Promise<void>;\n  /** Handler to access when a retry action is invoked */\n  handleRetry?: (message: MessageType<StreamChatGenerics>) => Promise<void>;\n  /** Handler to access when a thread reply action is invoked */\n  handleThreadReply?: (message: MessageType<StreamChatGenerics>) => Promise<void>;\n  /** Handler to deal with custom memoization logic of Attachment */\n  isAttachmentEqual?: (\n    prevAttachment: Attachment<StreamChatGenerics>,\n    nextAttachment: Attachment<StreamChatGenerics>,\n  ) => boolean;\n  legacyImageViewerSwipeBehaviour?: boolean;\n  /** Object specifying rules defined within simple-markdown https://github.com/Khan/simple-markdown#adding-a-simple-extension */\n  markdownRules?: MarkdownRules;\n  /**\n   * Use this prop to override message actions (which pop-up in message overlay).\n   *\n   * You can either completely override the default messageActions object.\n   *\n   * ```\n   * <Channel\n   *   messageActions=[\n   *     {\n   *       action: () => { someAction() };\n   *       title: \"Pin Message\";\n   *       icon: PinIcon;\n   *       titleStyle: {};\n   *     },\n   *     {\n   *       action: () => { someAction() };\n   *       title: \"Delete Message\";\n   *       icon: PinIcon;\n   *       titleStyle: {};\n   *     }\n   *   ]\n   * >\n   * </Channel>\n   * ```\n   *\n   * Or you can selectly keep certain action and remove some:\n   *\n   * e.g. Lets say you only want to keep threadReply and copyMessage actions\n   *\n   * ```\n   * <Channel\n   *   messageActions={({\n   *     blockUser,\n   *     copyMessage,\n   *     deleteMessage,\n   *     editMessage,\n   *     flagMessage,\n   *     muteUser,\n   *     quotedReply,\n   *     retry,\n   *     threadReply,\n   *   }) => ([\n   *     threadReply, copyMessage\n   *   ])}\n   * >\n   *  </Channel>\n   *  ```\n   *\n   * @overrideType Function | Array<Objects>\n   */\n  messageActions?: (param: MessageActionsParams<StreamChatGenerics>) => MessageActionType[];\n  /**\n   * Custom message header component\n   */\n  MessageHeader?: React.ComponentType<MessageFooterProps<StreamChatGenerics>>;\n  /** Custom UI component for message text */\n  MessageText?: React.ComponentType<MessageTextProps<StreamChatGenerics>>;\n\n  /**\n   * Theme provided only to messages that are the current users\n   */\n  myMessageTheme?: DeepPartial<Theme>;\n  /**\n   * Override default handler for onLongPress on message. You have access to payload of that handler as param:\n   *\n   * ```\n   * <Channel\n   *  onLongPressMessage={({\n   *    actionHandlers: {\n   *        deleteMessage, // () => Promise<void>;\n   *        editMessage, // () => void;\n   *        quotedReply, // () => void;\n   *        resendMessage, // () => Promise<void>;\n   *        showMessageOverlay, // () => void;\n   *        toggleBanUser, // () => Promise<void>;\n   *        toggleMuteUser, // () => Promise<void>;\n   *        toggleReaction, // (reactionType: string) => Promise<void>;\n   *    },\n   *    defaultHandler, // () => void\n   *    event, // any event object corresponding to touchable feedback\n   *    emitter, // which component trigged this touchable feedback e.g. card, fileAttachment, gallery, message ... etc\n   *    message // message object on which longPress occured\n   *  }) => {\n   *    // Your custom action\n   *  }}\n   * />\n   * ```\n   */\n  onLongPressMessage?: (payload: MessageTouchableHandlerPayload<StreamChatGenerics>) => void;\n  /**\n   * Add onPressIn handler for attachments. You have access to payload of that handler as param:\n   *\n   * ```\n   * <Channel\n   *  onPressInMessage={({\n   *    actionHandlers: {\n   *        deleteMessage, // () => Promise<void>;\n   *        editMessage, // () => void;\n   *        quotedReply, // () => void;\n   *        resendMessage, // () => Promise<void>;\n   *        showMessageOverlay, // () => void;\n   *        toggleBanUser, // () => Promise<void>;\n   *        toggleMuteUser, // () => Promise<void>;\n   *        toggleReaction, // (reactionType: string) => Promise<void>;\n   *    },\n   *    defaultHandler, // () => void\n   *    event, // any event object corresponding to touchable feedback\n   *    emitter, // which component trigged this touchable feedback e.g. card, fileAttachment, gallery, message ... etc\n   *    message // message object on which longPress occured\n   *  }) => {\n   *    // Your custom action\n   *  }}\n   * />\n   * ```\n   */\n  onPressInMessage?: (payload: MessageTouchableHandlerPayload<StreamChatGenerics>) => void;\n  /**\n   * Override onPress handler for message. You have access to payload of that handler as param:\n   *\n   * ```\n   * <Channel\n   *  onPressMessage={({\n   *    actionHandlers: {\n   *        deleteMessage, // () => Promise<void>;\n   *        editMessage, // () => void;\n   *        quotedReply, // () => void;\n   *        resendMessage, // () => Promise<void>;\n   *        showMessageOverlay, // () => void;\n   *        toggleBanUser, // () => Promise<void>;\n   *        toggleMuteUser, // () => Promise<void>;\n   *        toggleReaction, // (reactionType: string) => Promise<void>;\n   *    },\n   *    defaultHandler, // () => void\n   *    event, // any event object corresponding to touchable feedback\n   *    emitter, // which component trigged this touchable feedback e.g. card, fileAttachment, gallery, message ... etc\n   *    message // message object on which longPress occurred\n   *  }) => {\n   *    // Your custom action\n   *  }}\n   * />\n   * ```\n   */\n  onPressMessage?: (payload: MessageTouchableHandlerPayload<StreamChatGenerics>) => void;\n\n  /**\n   * Full override of the reaction function on Message and Message Overlay\n   *\n   * Please check [cookbook](https://github.com/GetStream/stream-chat-react-native/wiki/Cookbook-v3.0#override-or-intercept-message-actions-edit-delete-reaction-reply-etc) for details.\n   * */\n  selectReaction?: (\n    message: MessageType<StreamChatGenerics>,\n  ) => (reactionType: string) => Promise<void>;\n\n  targetedMessage?: string;\n};\n\nexport const MessagesContext = React.createContext(\n  DEFAULT_BASE_CONTEXT_VALUE as MessagesContextValue,\n);\n\nexport const MessagesProvider = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value?: MessagesContextValue<StreamChatGenerics>;\n}>) => (\n  <MessagesContext.Provider value={value as unknown as MessagesContextValue}>\n    {children}\n  </MessagesContext.Provider>\n);\n\nexport const useMessagesContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const contextValue = useContext(\n    MessagesContext,\n  ) as unknown as MessagesContextValue<StreamChatGenerics>;\n\n  if (contextValue === DEFAULT_BASE_CONTEXT_VALUE && !isTestEnvironment()) {\n    throw new Error(\n      `The useMessagesContext hook was called outside of the MessagesContext provider. Make sure you have configured MessageList component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#message-list`,\n    );\n  }\n\n  return contextValue;\n};\n\n/**\n * Typescript currently does not support partial inference so if MessagesContext\n * typing is desired while using the HOC withMessagesContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessagesContext = <\n  P extends UnknownType,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof MessagesContextValue<StreamChatGenerics>>> => {\n  const WithMessagesContextComponent = (\n    props: Omit<P, keyof MessagesContextValue<StreamChatGenerics>>,\n  ) => {\n    const messagesContext = useMessagesContext<StreamChatGenerics>();\n\n    return <Component {...(props as P)} {...messagesContext} />;\n  };\n  WithMessagesContextComponent.displayName = `WithMessagesContext${getDisplayName(Component)}`;\n  return WithMessagesContextComponent;\n};\n"]}