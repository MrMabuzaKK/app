{"version":3,"sources":["ChannelsStateContext.tsx"],"names":["reducer","state","action","type","payload","cid","key","value","currentCount","subscriberCount","stateShallowCopy","Error","ChannelsStateContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","ChannelsStateProvider","children","dispatch","setState","increaseSubscriberCount","decreaseSubscriberCount","activeChannelsRef","Object","keys","current","useChannelsStateContext","contextValue","withChannelsStateContext","Component","WithChannelsStateContextComponent","props","channelsStateContext","displayName"],"mappings":"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","sourcesContent":["import React, {\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react';\n\nimport type { DefaultStreamChatGenerics, UnknownType } from '../../types/types';\nimport { ActiveChannelsProvider } from '../activeChannelsRefContext/ActiveChannelsRefContext';\n\nimport type { ChannelContextValue } from '../channelContext/ChannelContext';\nimport type { PaginatedMessageListContextValue } from '../paginatedMessageListContext/PaginatedMessageListContext';\nimport type { ThreadContextValue } from '../threadContext/ThreadContext';\nimport type { TypingContextValue } from '../typingContext/TypingContext';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\nimport { isTestEnvironment } from '../utils/isTestEnvironment';\n\nexport type ChannelState<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  members: ChannelContextValue<StreamChatGenerics>['members'];\n  messages: PaginatedMessageListContextValue<StreamChatGenerics>['messages'];\n  read: ChannelContextValue<StreamChatGenerics>['read'];\n  subscriberCount: number;\n  threadMessages: ThreadContextValue<StreamChatGenerics>['threadMessages'];\n  typing: TypingContextValue<StreamChatGenerics>['typing'];\n  watcherCount: ChannelContextValue<StreamChatGenerics>['watcherCount'];\n  watchers: ChannelContextValue<StreamChatGenerics>['watchers'];\n};\n\ntype ChannelsState<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  [cid: string]: ChannelState<StreamChatGenerics>;\n};\n\nexport type Keys = keyof ChannelState;\n\nexport type Payload<\n  Key extends Keys = Keys,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  cid: string;\n  key: Key;\n  value: ChannelState<StreamChatGenerics>[Key];\n};\n\ntype SetStateAction<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  payload: Payload<Keys, StreamChatGenerics>;\n  type: 'SET_STATE';\n};\n\ntype IncreaseSubscriberCountAction = {\n  payload: { cid: string };\n  type: 'INCREASE_SUBSCRIBER_COUNT';\n};\ntype DecreaseSubscriberCountAction = {\n  payload: { cid: string };\n  type: 'DECREASE_SUBSCRIBER_COUNT';\n};\n\ntype Action<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  | SetStateAction<StreamChatGenerics>\n  | IncreaseSubscriberCountAction\n  | DecreaseSubscriberCountAction;\n\nexport type ChannelsStateContextValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  decreaseSubscriberCount: (value: { cid: string }) => void;\n  increaseSubscriberCount: (value: { cid: string }) => void;\n  setState: (value: Payload<Keys, StreamChatGenerics>) => void;\n  state: ChannelsState<StreamChatGenerics>;\n};\n\ntype Reducer<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = (\n  state: ChannelsState<StreamChatGenerics>,\n  action: Action<StreamChatGenerics>,\n) => ChannelsState<StreamChatGenerics>;\n\nfunction reducer(state: ChannelsState, action: Action) {\n  switch (action.type) {\n    case 'SET_STATE':\n      return {\n        ...state,\n        [action.payload.cid]: {\n          ...(state[action.payload.cid] || {}),\n          [action.payload.key]: action.payload.value,\n        },\n      };\n\n    case 'INCREASE_SUBSCRIBER_COUNT': {\n      const currentCount = state[action.payload.cid]?.subscriberCount ?? 0;\n      return {\n        ...state,\n        [action.payload.cid]: {\n          ...(state[action.payload.cid] || {}),\n          subscriberCount: currentCount + 1,\n        },\n      };\n    }\n\n    case 'DECREASE_SUBSCRIBER_COUNT': {\n      const currentCount = state[action.payload.cid]?.subscriberCount ?? 0;\n\n      // If there last subscribed Channel component unsubscribes, we clear the channel state.\n      if (currentCount <= 1) {\n        const stateShallowCopy = {\n          ...state,\n        };\n\n        delete stateShallowCopy[action.payload.cid];\n\n        return stateShallowCopy;\n      }\n\n      return {\n        ...state,\n        [action.payload.cid]: {\n          ...(state[action.payload.cid] || {}),\n          subscriberCount: currentCount - 1,\n        },\n      };\n    }\n    default:\n      throw new Error();\n  }\n}\n\nconst ChannelsStateContext = React.createContext(\n  DEFAULT_BASE_CONTEXT_VALUE as ChannelsStateContextValue,\n);\n\nexport const ChannelsStateProvider = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  children,\n}: {\n  children: ReactNode;\n}) => {\n  const [state, dispatch] = useReducer(reducer as unknown as Reducer<StreamChatGenerics>, {});\n\n  const setState = useCallback((payload: Payload<Keys, StreamChatGenerics>) => {\n    dispatch({ payload, type: 'SET_STATE' });\n  }, []);\n\n  const increaseSubscriberCount = useCallback((payload: { cid: string }) => {\n    dispatch({ payload, type: 'INCREASE_SUBSCRIBER_COUNT' });\n  }, []);\n\n  const decreaseSubscriberCount = useCallback((payload: { cid: string }) => {\n    dispatch({ payload, type: 'DECREASE_SUBSCRIBER_COUNT' });\n  }, []);\n\n  const value = useMemo(\n    () => ({\n      decreaseSubscriberCount,\n      increaseSubscriberCount,\n      setState,\n      state,\n    }),\n    [state],\n  );\n\n  const activeChannelsRef = useRef(Object.keys(state));\n\n  useEffect(() => {\n    activeChannelsRef.current = Object.keys(state);\n  }, [state]);\n\n  return (\n    <ChannelsStateContext.Provider value={value as unknown as ChannelsStateContextValue}>\n      <ActiveChannelsProvider value={activeChannelsRef}>{children}</ActiveChannelsProvider>\n    </ChannelsStateContext.Provider>\n  );\n};\n\nexport const useChannelsStateContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const contextValue = useContext(\n    ChannelsStateContext,\n  ) as unknown as ChannelsStateContextValue<StreamChatGenerics>;\n\n  if (contextValue === DEFAULT_BASE_CONTEXT_VALUE && !isTestEnvironment()) {\n    throw new Error(\n      `The useChannelStateContext hook was called outside the ChannelStateContext Provider. Make sure you have configured OverlayProvider component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#overlay-provider`,\n    );\n  }\n\n  return contextValue;\n};\n\nexport const withChannelsStateContext = <\n  P extends UnknownType,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof ChannelsStateContextValue<StreamChatGenerics>>> => {\n  const WithChannelsStateContextComponent = (\n    props: Omit<P, keyof ChannelsStateContextValue<StreamChatGenerics>>,\n  ) => {\n    const channelsStateContext = useChannelsStateContext<StreamChatGenerics>();\n\n    return <Component {...(props as P)} {...channelsStateContext} />;\n  };\n  WithChannelsStateContextComponent.displayName = `WithChannelsStateContext${getDisplayName(\n    Component,\n  )}`;\n  return WithChannelsStateContextComponent;\n};\n"]}