{"version":3,"sources":["ThreadContext.tsx"],"names":["ThreadContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","ThreadProvider","children","value","useThreadContext","contextValue","Error","withThreadContext","Component","WithThreadContextComponent","props","threadContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAMA;;AAEA;;AACA;;;;;;;;;AAiBO,IAAMA,aAAa,GAAGC,kBAAMC,aAAN,CAAoBC,mDAApB,CAAtB;;;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAG5BC,QAH4B,QAG5BA,QAH4B;AAAA,MAI5BC,KAJ4B,QAI5BA,KAJ4B;AAAA,SAQ5B,gCAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAR4B;AAAA,CAAvB;;;;AAaA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,GAEzB;AACL,MAAMC,YAAY,GAAG,uBACnBR,aADmB,CAArB;;AAIA,MAAIQ,YAAY,KAAKL,mDAAjB,IAA+C,CAAC,2CAApD,EAAyE;AACvE,UAAM,IAAIM,KAAJ,4NAAN;AAGD;;AAED,SAAOD,YAAP;AACD,CAdM;;;;AAoBA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAI/BC,SAJ+B,EAKqC;AACpE,MAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCC,KADiC,EAE9B;AACH,QAAMC,aAAa,GAAGP,gBAAgB,EAAtC;AAEA,WAAO,gCAAC,SAAD,gCAAgBM,KAAhB,EAAiCC,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,0BAA0B,CAACG,WAA3B,yBAA6D,oCAAeJ,SAAf,CAA7D;AACA,SAAOC,0BAAP;AACD,CAfM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport type { ChannelState } from 'stream-chat';\n\nimport type { MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type { DefaultStreamChatGenerics, UnknownType } from '../../types/types';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\nimport { isTestEnvironment } from '../utils/isTestEnvironment';\n\nexport type ThreadContextValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  allowThreadMessagesInChannel: boolean;\n  closeThread: () => void;\n  loadMoreThread: () => Promise<void>;\n  openThread: (message: MessageType<StreamChatGenerics>) => void;\n  reloadThread: () => void;\n  setThreadLoadingMore: React.Dispatch<React.SetStateAction<boolean>>;\n  thread: MessageType<StreamChatGenerics> | null;\n  threadHasMore: boolean;\n  threadLoadingMore: boolean;\n  threadMessages: ChannelState<StreamChatGenerics>['threads'][string];\n};\n\nexport const ThreadContext = React.createContext(DEFAULT_BASE_CONTEXT_VALUE as ThreadContextValue);\n\nexport const ThreadProvider = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value: ThreadContextValue<StreamChatGenerics>;\n}>) => (\n  <ThreadContext.Provider value={value as unknown as ThreadContextValue}>\n    {children}\n  </ThreadContext.Provider>\n);\n\nexport const useThreadContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const contextValue = useContext(\n    ThreadContext,\n  ) as unknown as ThreadContextValue<StreamChatGenerics>;\n\n  if (contextValue === DEFAULT_BASE_CONTEXT_VALUE && !isTestEnvironment()) {\n    throw new Error(\n      `The useThreadContext hook was called outside of the ThreadContext provider. Make sure you have configured Channel component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#channel`,\n    );\n  }\n\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference so if ThreadContext\n * typing is desired while using the HOC withThreadContextContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withThreadContext = <\n  P extends UnknownType,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof ThreadContextValue<StreamChatGenerics>>> => {\n  const WithThreadContextComponent = (\n    props: Omit<P, keyof ThreadContextValue<StreamChatGenerics>>,\n  ) => {\n    const threadContext = useThreadContext<StreamChatGenerics>();\n\n    return <Component {...(props as P)} {...threadContext} />;\n  };\n  WithThreadContextComponent.displayName = `WithThreadContext${getDisplayName(Component)}`;\n  return WithThreadContextComponent;\n};\n"]}