{"version":3,"sources":["OverlayContext.tsx"],"names":["OverlayContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","useOverlayContext","contextValue","Error","withOverlayContext","Component","WithOverlayContextComponent","props","overlayContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAeA;;AAEA;;AACA;;;;;;;;;AAWO,IAAMA,cAAc,GAAGC,kBAAMC,aAAN,CAC5BC,mDAD4B,CAAvB;;;;AAmDA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AACrC,MAAMC,YAAY,GAAG,uBAAWL,cAAX,CAArB;;AAEA,MAAIK,YAAY,KAAKF,mDAAjB,IAA+C,CAAC,2CAApD,EAAyE;AACvE,UAAM,IAAIG,KAAJ,4OAAN;AAGD;;AAED,SAAOD,YAAP;AACD,CAVM;;;;AAYA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAGhCC,SAHgC,EAIkC;AAClE,MAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAClCC,KADkC,EAE/B;AACH,QAAMC,cAAc,GAAGP,iBAAiB,EAAxC;AAEA,WAAO,gCAAC,SAAD,gCAAgBM,KAAhB,EAAkDC,cAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,2BAA2B,CAACG,WAA5B,0BAA+D,oCAC7DJ,SAD6D,CAA/D;AAGA,SAAOC,2BAAP;AACD,CAhBM","sourcesContent":["import React, { useContext } from 'react';\n\nimport type { BottomSheetMethods } from '@gorhom/bottom-sheet/lib/typescript/types';\nimport type { Attachment } from 'stream-chat';\n\nimport type { AttachmentPickerProps } from '../../components/AttachmentPicker/AttachmentPicker';\nimport type { ImageGalleryCustomComponents } from '../../components/ImageGallery/ImageGallery';\n\nimport type { MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport type { Streami18n } from '../../utils/Streami18n';\nimport type { AttachmentPickerContextValue } from '../attachmentPickerContext/AttachmentPickerContext';\nimport type { MessageOverlayContextValue } from '../messageOverlayContext/MessageOverlayContext';\nimport type { DeepPartial } from '../themeContext/ThemeContext';\nimport type { Theme } from '../themeContext/utils/theme';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\nimport { isTestEnvironment } from '../utils/isTestEnvironment';\n\nexport type Overlay = 'alert' | 'gallery' | 'message' | 'none';\n\nexport type OverlayContextValue = {\n  overlay: Overlay;\n  setOverlay: React.Dispatch<React.SetStateAction<Overlay>>;\n  style?: DeepPartial<Theme>;\n  translucentStatusBar?: boolean;\n};\n\nexport const OverlayContext = React.createContext(\n  DEFAULT_BASE_CONTEXT_VALUE as OverlayContextValue,\n);\n\nexport type OverlayProviderProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<AttachmentPickerProps> &\n  Partial<\n    Pick<\n      AttachmentPickerContextValue,\n      | 'attachmentPickerBottomSheetHeight'\n      | 'attachmentSelectionBarHeight'\n      | 'bottomInset'\n      | 'CameraSelectorIcon'\n      | 'FileSelectorIcon'\n      | 'ImageSelectorIcon'\n      | 'topInset'\n    >\n  > &\n  ImageGalleryCustomComponents<StreamChatGenerics> &\n  Partial<\n    Pick<\n      MessageOverlayContextValue<StreamChatGenerics>,\n      | 'MessageActionList'\n      | 'MessageActionListItem'\n      | 'OverlayReactionList'\n      | 'OverlayReactions'\n      | 'OverlayReactionsAvatar'\n    >\n  > &\n  Pick<OverlayContextValue, 'translucentStatusBar'> & {\n    /**\n     * The giphy version to render - check the keys of the [Image Object](https://developers.giphy.com/docs/api/schema#image-object) for possible values. Uses 'fixed_height' by default\n     * */\n    closePicker?: (ref: React.RefObject<BottomSheetMethods>) => void;\n    error?: boolean | Error;\n    giphyVersion?: keyof NonNullable<Attachment['giphy']>;\n    /** https://github.com/GetStream/stream-chat-react-native/wiki/Internationalization-(i18n) */\n    i18nInstance?: Streami18n;\n    imageGalleryGridHandleHeight?: number;\n    imageGalleryGridSnapPoints?: [string | number, string | number];\n    isMyMessage?: boolean;\n    isThreadMessage?: boolean;\n    message?: MessageType<StreamChatGenerics>;\n    messageReactions?: boolean;\n    messageTextNumberOfLines?: number;\n    numberOfImageGalleryGridColumns?: number;\n    openPicker?: (ref: React.RefObject<BottomSheetMethods>) => void;\n    value?: Partial<OverlayContextValue>;\n  };\n\nexport const useOverlayContext = () => {\n  const contextValue = useContext(OverlayContext);\n\n  if (contextValue === DEFAULT_BASE_CONTEXT_VALUE && !isTestEnvironment()) {\n    throw new Error(\n      `The useOverlayContext hook was called outside the OverlayContext Provider. Make sure you have configured OverlayProvider component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#overlay-provider`,\n    );\n  }\n\n  return contextValue;\n};\n\nexport const withOverlayContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<StreamChatGenerics>,\n): React.FC<Omit<StreamChatGenerics, keyof OverlayContextValue>> => {\n  const WithOverlayContextComponent = (\n    props: Omit<StreamChatGenerics, keyof OverlayContextValue>,\n  ) => {\n    const overlayContext = useOverlayContext();\n\n    return <Component {...(props as StreamChatGenerics)} {...overlayContext} />;\n  };\n  WithOverlayContextComponent.displayName = `WithOverlayContext${getDisplayName(\n    Component as React.ComponentType,\n  )}`;\n  return WithOverlayContextComponent;\n};\n"]}