{"version":3,"sources":["useResettableState.test.tsx"],"names":["TestComponent","data","reset","setData","waitForOptions","timeout","test","getByTestId","expect","children","toBe","fireEvent","press"],"mappings":";;;;;;AAAA;;AAEA;;AAEA;;AAEA;;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,4BAAiC,6CAAmB,CAAnB,CAAjC;AAAA,MAAQC,IAAR,uBAAQA,IAAR;AAAA,MAAcC,KAAd,uBAAcA,KAAd;AAAA,MAAqBC,OAArB,uBAAqBA,OAArB;;AAEA,SACE,kEACE,gCAAC,iBAAD;AAAM,IAAA,MAAM,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAyBF,IAAzB,CADF,EAEE,gCAAC,mBAAD;AACE,IAAA,OAAO,EAAE,mBAAM;AACbE,MAAAA,OAAO,CAACF,IAAI,GAAG,CAAR,CAAP;AACD,KAHH;AAIE,IAAA,MAAM,EAAC,WAJT;AAKE,IAAA,KAAK,EAAC,0BALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EASE,gCAAC,mBAAD;AACE,IAAA,OAAO,EAAE,mBAAM;AACbC,MAAAA,KAAK;AACN,KAHH;AAIE,IAAA,MAAM,EAAC,OAJT;AAKE,IAAA,KAAK,EAAC,iBALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAmBD,CAtBD;;AAwBA,IAAME,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE;AADY,CAAvB;AAIAC,IAAI,CAAC,sDAAD,kEAAyD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACnC,0BAAO,gCAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP,CADmC,EACnDC,WADmD,WACnDA,WADmD;AAAA;AAAA,iBAGrD,2BAAQ;AAAA,mBAAMC,MAAM,CAACD,WAAW,CAAC,OAAD,CAAX,CAAqBE,QAArB,CAA8B,CAA9B,CAAD,CAAN,CAAyCC,IAAzC,CAA8C,GAA9C,CAAN;AAAA,WAAR,EAAkEN,cAAlE,CAHqD;;AAAA;AAK3DO,kCAAUC,KAAV,CAAgBL,WAAW,CAAC,WAAD,CAA3B;;AAL2D;AAAA,iBAMrD,2BAAQ;AAAA,mBAAMC,MAAM,CAACD,WAAW,CAAC,OAAD,CAAX,CAAqBE,QAArB,CAA8B,CAA9B,CAAD,CAAN,CAAyCC,IAAzC,CAA8C,GAA9C,CAAN;AAAA,WAAR,EAAkEN,cAAlE,CANqD;;AAAA;AAQ3DO,kCAAUC,KAAV,CAAgBL,WAAW,CAAC,OAAD,CAA3B;;AAR2D;AAAA,iBASrD,2BAAQ;AAAA,mBAAMC,MAAM,CAACD,WAAW,CAAC,OAAD,CAAX,CAAqBE,QAArB,CAA8B,CAA9B,CAAD,CAAN,CAAyCC,IAAzC,CAA8C,GAA9C,CAAN;AAAA,WAAR,EAAkEN,cAAlE,CATqD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzD,GAAJ","sourcesContent":["import React from 'react';\n\nimport { Button, Text } from 'react-native';\n\nimport { fireEvent, render, waitFor } from '@testing-library/react-native';\n\nimport { useResettableState } from './useResettableState';\n\nconst TestComponent = () => {\n  const { data, reset, setData } = useResettableState(0);\n\n  return (\n    <>\n      <Text testID='value'>{`${data}`}</Text>\n      <Button\n        onPress={() => {\n          setData(data + 1);\n        }}\n        testID='increment'\n        title='Super useful incrementer'\n      />\n      <Button\n        onPress={() => {\n          reset();\n        }}\n        testID='reset'\n        title='Oh no, go back!'\n      />\n    </>\n  );\n};\n\nconst waitForOptions = {\n  timeout: 1000,\n};\n\ntest('useResettableState can be reset to its initial state', async () => {\n  const { getByTestId } = render(<TestComponent />);\n\n  await waitFor(() => expect(getByTestId('value').children[0]).toBe('0'), waitForOptions);\n\n  fireEvent.press(getByTestId('increment'));\n  await waitFor(() => expect(getByTestId('value').children[0]).toBe('1'), waitForOptions);\n\n  fireEvent.press(getByTestId('reset'));\n  await waitFor(() => expect(getByTestId('value').children[0]).toBe('0'), waitForOptions);\n});\n"]}