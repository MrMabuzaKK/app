{"version":3,"sources":["AttachmentActions.tsx"],"names":["styles","StyleSheet","create","actionButton","borderRadius","borderWidth","paddingHorizontal","paddingVertical","container","flexDirection","justifyContent","padding","AttachmentActionsWithContext","props","actions","handleAction","stylesProp","theme","colors","accent_blue","black","border","transparent","white","messageSimple","button","defaultBackgroundColor","defaultBorderColor","primaryBackgroundColor","primaryBorderColor","buttonStyle","buttonText","defaultColor","primaryColor","buttonTextStyle","map","action","index","primary","style","value","name","backgroundColor","borderColor","color","text","areEqual","prevProps","nextProps","prevActions","nextActions","actionsEqual","length","MemoizedAttachmentActions","React","memo","AttachmentActions","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  TouchableOpacity,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport type { Attachment } from 'stream-chat';\n\nimport {\n  MessageContextValue,\n  useMessageContext,\n} from '../../contexts/messageContext/MessageContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\nconst styles = StyleSheet.create({\n  actionButton: {\n    borderRadius: 20,\n    borderWidth: 1,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n  },\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: 5,\n  },\n});\n\nexport type AttachmentActionsPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<Attachment<StreamChatGenerics>, 'actions'> &\n  Pick<MessageContextValue<StreamChatGenerics>, 'handleAction'> & {\n    styles?: Partial<{\n      actionButton: StyleProp<ViewStyle>;\n      buttonText: StyleProp<TextStyle>;\n      container: StyleProp<ViewStyle>;\n    }>;\n  };\n\nconst AttachmentActionsWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: AttachmentActionsPropsWithContext<StreamChatGenerics>,\n) => {\n  const { actions, handleAction, styles: stylesProp = {} } = props;\n\n  const {\n    theme: {\n      colors: { accent_blue, black, border, transparent, white },\n      messageSimple: {\n        actions: {\n          button: {\n            defaultBackgroundColor,\n            defaultBorderColor,\n            primaryBackgroundColor,\n            primaryBorderColor,\n            ...buttonStyle\n          },\n          buttonText: { defaultColor, primaryColor, ...buttonTextStyle },\n          container,\n        },\n      },\n    },\n  } = useTheme();\n\n  return (\n    <View style={[styles.container, container, stylesProp.container]} testID='attachment-actions'>\n      {actions?.map((action, index) => {\n        const primary = action.style === 'primary';\n\n        return (\n          <TouchableOpacity\n            key={`${index}-${action.value}`}\n            onPress={() => {\n              if (action.name && action.value && handleAction) {\n                handleAction(action.name, action.value);\n              }\n            }}\n            style={[\n              styles.actionButton,\n              {\n                backgroundColor: primary\n                  ? primaryBackgroundColor || accent_blue\n                  : defaultBackgroundColor || white,\n                borderColor: primary\n                  ? primaryBorderColor || border\n                  : defaultBorderColor || transparent,\n              },\n              buttonStyle,\n              stylesProp.actionButton,\n            ]}\n            testID={`attachment-actions-button-${action.name}`}\n          >\n            <Text\n              style={[\n                {\n                  color: primary ? primaryColor || white : defaultColor || black,\n                },\n                buttonTextStyle,\n                stylesProp.buttonText,\n              ]}\n            >\n              {action.text}\n            </Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: AttachmentActionsPropsWithContext<StreamChatGenerics>,\n  nextProps: AttachmentActionsPropsWithContext<StreamChatGenerics>,\n) => {\n  const { actions: prevActions } = prevProps;\n  const { actions: nextActions } = nextProps;\n\n  const actionsEqual = prevActions?.length === nextActions?.length;\n\n  return actionsEqual;\n};\n\nconst MemoizedAttachmentActions = React.memo(\n  AttachmentActionsWithContext,\n  areEqual,\n) as typeof AttachmentActionsWithContext;\n\nexport type AttachmentActionsProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Attachment<StreamChatGenerics> &\n  Partial<Pick<MessageContextValue<StreamChatGenerics>, 'handleAction'>>;\n\n/**\n * AttachmentActions - The actions you can take on an attachment.\n * Actions in combination with attachments can be used to build [commands](https://getstream.io/chat/docs/#channel_commands).\n */\nexport const AttachmentActions = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: AttachmentActionsProps<StreamChatGenerics>,\n) => {\n  const { handleAction } = useMessageContext<StreamChatGenerics>();\n  return <MemoizedAttachmentActions {...{ handleAction }} {...props} />;\n};\n\nAttachmentActions.displayName = 'AttachmentActions{messageSimple{actions}}';\n"]}