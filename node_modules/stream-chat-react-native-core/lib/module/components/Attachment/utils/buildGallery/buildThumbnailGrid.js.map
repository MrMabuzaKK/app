{"version":3,"sources":["buildThumbnailGrid.ts"],"names":["buildThumbnailGrid","grid","images","invertedDirections","sizeConfig","gridHeight","gridWidth","imageIndex","thumbnailGrid","numOfColumns","length","forEach","rows","colIndex","totalFlexValue","reduce","acc","curr","flexValue","tHeight","tWidth","currentImage","thumbnail","height","image","resizeMode","width","push"],"mappings":";;;;;AAEA;;AAqIO,SAASA,kBAAT,OAYyB;AAAA,MAT9BC,IAS8B,QAT9BA,IAS8B;AAAA,MAR9BC,MAQ8B,QAR9BA,MAQ8B;AAAA,mCAP9BC,kBAO8B;AAAA,MAP9BA,kBAO8B,sCAPT,KAOS;AAAA,MAN9BC,UAM8B,QAN9BA,UAM8B;AAC9B,MAAQC,UAAR,GAAkCD,UAAlC,CAAQC,UAAR;AAAA,MAAoBC,SAApB,GAAkCF,UAAlC,CAAoBE,SAApB;AAEA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAMC,aAA4B,GAAG,EAArC;AACA,MAAMC,YAAY,GAAGR,IAAI,CAACS,MAA1B;AACAT,EAAAA,IAAI,CAACU,OAAL,CAAa,UAACC,IAAD,EAAOC,QAAP,EAAoB;AAC/B,QAAMC,cAAc,GAAGF,IAAI,CAACG,MAAL,CAAY,UAACC,GAAD,EAAMC,IAAN;AAAA,aAAeD,GAAG,GAAGC,IAArB;AAAA,KAAZ,EAAuC,CAAvC,CAAvB;AAEAL,IAAAA,IAAI,CAACD,OAAL,CAAa,UAACO,SAAD,EAAe;AAC1B,UAAMC,OAAO,GAAGhB,kBAAkB,GAC9BE,UAAU,GAAGI,YADiB,GAE9BJ,UAAU,IAAIa,SAAS,GAAGJ,cAAhB,CAFd;AAIA,UAAMM,MAAM,GAAGjB,kBAAkB,GAC7BG,SAAS,IAAIY,SAAS,GAAGJ,cAAhB,CADoB,GAE7BR,SAAS,GAAGG,YAFhB;AAIA,UAAMY,YAAY,GAAGnB,MAAM,CAACK,UAAD,CAA3B;AACA,UAAMe,SAAS,GAAG,oCAAe;AAC/BC,QAAAA,MAAM,EAAEJ,OADuB;AAE/BK,QAAAA,KAAK,EAAEH,YAFwB;AAG/BI,QAAAA,UAAU,EAAE,OAHmB;AAI/BC,QAAAA,KAAK,EAAEN;AAJwB,OAAf,CAAlB;;AAOA,UAAI,CAACZ,aAAa,CAACK,QAAD,CAAlB,EAA8B;AAC5BL,QAAAA,aAAa,CAACK,QAAD,CAAb,GAA0B,EAA1B;AACD;;AAEDL,MAAAA,aAAa,CAACK,QAAD,CAAb,CAAwBc,IAAxB,CAA6BL,SAA7B;AACAf,MAAAA,UAAU;AACX,KAvBD;AAwBD,GA3BD;AA4BA,SAAO;AACLgB,IAAAA,MAAM,EAAElB,UADH;AAELF,IAAAA,kBAAkB,EAAlBA,kBAFK;AAGLK,IAAAA,aAAa,EAAbA,aAHK;AAILkB,IAAAA,KAAK,EAAEpB;AAJF,GAAP;AAMD","sourcesContent":["import type { Attachment } from 'stream-chat';\n\nimport { buildThumbnail } from './buildThumbnail';\nimport type { GallerySizeAndThumbnailGrid, GallerySizeConfig, ThumbnailGrid } from './types';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\n\n/**\n * Builds a grid of thumbnail images from image attachments.\n * This function take a object parameter with following properties:\n *\n * @params\n *\n * - {number[][]} grid - Grid pattern of the gallery. Each numeric value in the array represents the flex value of corresponding image in grid.\n * - {Attachment[]} images - Array of image attachments.\n * - {GallerySizeConfig} sizeConfig - Theme config for the gallery.\n * - {boolean} invertedDirections - Whether to invert the direction of the grid. By default grid is rendered with column as primary direction and row as secondary direction.\n *\n * @usage\n *\n * ```\n * const { thumbnailGrid, invertedDirection } = buildThumbnailGrid({\n *  grid: [[1], [1]],\n *  images: [image1, image2],\n *  sizeConfig: {\n *    gridHeight: 200,\n *    gridWidth: 200,\n *    maxHeight: 200,\n *    maxWidth: 200,\n *    minHeight: 200,\n *    minWidth: 200,\n *  },\n * })\n *\n * Rendering logic on UI:\n *\n * ```\n * <View style={{ flexDirection: invertedDirection ? 'row' : 'column }}>\n * {\n *  thumbnailGrid.forEach(rows => {\n *    return (\n *      <View style={{ flexDirection: invertedDirection ? 'column' : 'row' }}>\n *       {\n *        rows.forEach(thumbnail => (\n *          <Image\n *            source={{ uri: thumbnail.url }}\n *            resizeMode={thumbnail.resizeMode}\n *            width={thumbnail.width}\n *            height={thumbnail.height}\n *          />\n *       ))}\n *      </View>\n *    )});\n * }\n * </View>\n * ```\n *\n * Lets look at different examples of grid and invertedDirections param:\n *\n * EXAMPLE 1:\n *\n * ```\n * {\n *  grid: [[2, 1], [2, 1]]\n *  invertedDirections: false\n * }\n * ```\n *\n * Resulting thumbnail grid on rendered UI:\n *\n *  __________________\n * |            |     |\n * |            |     |\n * |------------------|\n * |            |     |\n * |            |     |\n *  ------------------\n *\n * EXAMPLE 2:\n *\n * ```\n * {\n *  grid: [[2, 1], [2, 1]]\n *  invertedDirections: true\n * }\n * ```\n * Resulting thumbnail grid on rendered UI:\n *  __________________\n * |         |        |\n * |         |        |\n * |         |        |\n * |         |        |\n * |------------------|\n * |         |        |\n * |         |        |\n *  ------------------\n *\n * EXAMPLE 3:\n *\n * ```\n * {\n *  grid: [[2, 1]]\n *  invertedDirections: false\n * }\n * ```\n * Resulting thumbnail grid on rendered UI:\n *  __________________\n * |                  |\n * |                  |\n * |                  |\n * |                  |\n * |------------------|\n * |                  |\n * |                  |\n *  ------------------\n *\n * EXAMPLE 4:\n *\n * ```\n * {\n *  grid: [[2, 1]]\n *  invertedDirections: true\n * }\n * ```\n * Resulting thumbnail grid on rendered UI:\n *  __________________\n * |            |     |\n * |            |     |\n * |            |     |\n * |            |     |\n * |            |     |\n *  ------------------\n *\n * @return {GallerySizeAndThumbnailGrid}\n */\nexport function buildThumbnailGrid<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  grid,\n  images,\n  invertedDirections = false,\n  sizeConfig,\n}: {\n  grid: number[][];\n  images: Attachment<StreamChatGenerics>[];\n  invertedDirections: boolean;\n  sizeConfig: GallerySizeConfig;\n}): GallerySizeAndThumbnailGrid {\n  const { gridHeight, gridWidth } = sizeConfig;\n\n  let imageIndex = 0;\n  const thumbnailGrid: ThumbnailGrid = [];\n  const numOfColumns = grid.length;\n  grid.forEach((rows, colIndex) => {\n    const totalFlexValue = rows.reduce((acc, curr) => acc + curr, 0);\n\n    rows.forEach((flexValue) => {\n      const tHeight = invertedDirections\n        ? gridHeight / numOfColumns\n        : gridHeight * (flexValue / totalFlexValue);\n\n      const tWidth = invertedDirections\n        ? gridWidth * (flexValue / totalFlexValue)\n        : gridWidth / numOfColumns;\n\n      const currentImage = images[imageIndex];\n      const thumbnail = buildThumbnail({\n        height: tHeight,\n        image: currentImage,\n        resizeMode: 'cover',\n        width: tWidth,\n      });\n\n      if (!thumbnailGrid[colIndex]) {\n        thumbnailGrid[colIndex] = [];\n      }\n\n      thumbnailGrid[colIndex].push(thumbnail);\n      imageIndex++;\n    });\n  });\n  return {\n    height: gridHeight,\n    invertedDirections,\n    thumbnailGrid,\n    width: gridWidth,\n  };\n}\n"]}