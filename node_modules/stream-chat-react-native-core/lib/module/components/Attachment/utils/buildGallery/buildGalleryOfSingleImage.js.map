{"version":3,"sources":["buildGalleryOfSingleImage.ts"],"names":["clamp","number","min","max","Math","getContainerSize","image","sizeConfig","height","original_height","width","original_width","gridHeight","gridWidth","maxHeight","maxWidth","minHeight","minWidth","aspectRatio","containerHeight","containerWidth","buildGalleryOfSingleImage","container","thumbnail","column","thumbnailGrid"],"mappings":";;;;;;;;;AAEA;;AAKA;;AAUA,SAASA,KAAT,CAAeC,MAAf,EAA+BC,GAA/B,EAA4CC,GAA5C,EAAyD;AACvD,SAAOC,IAAI,CAACF,GAAL,CAASE,IAAI,CAACD,GAAL,CAASF,MAAT,EAAiBC,GAAjB,CAAT,EAAgCC,GAAhC,CAAP;AACD;;AAED,SAASE,gBAAT,OAEmG;AAAA,MAA/FC,KAA+F,QAA/FA,KAA+F;AAAA,MAAxFC,UAAwF,QAAxFA,UAAwF;AACjG,MAAyBC,MAAzB,GAA2DF,KAA3D,CAAQG,eAAR;AAAA,MAAiDC,KAAjD,GAA2DJ,KAA3D,CAAiCK,cAAjC;AACA,MAAQC,UAAR,GAA4EL,UAA5E,CAAQK,UAAR;AAAA,MAAoBC,SAApB,GAA4EN,UAA5E,CAAoBM,SAApB;AAAA,MAA+BC,SAA/B,GAA4EP,UAA5E,CAA+BO,SAA/B;AAAA,MAA0CC,QAA1C,GAA4ER,UAA5E,CAA0CQ,QAA1C;AAAA,MAAoDC,SAApD,GAA4ET,UAA5E,CAAoDS,SAApD;AAAA,MAA+DC,QAA/D,GAA4EV,UAA5E,CAA+DU,QAA/D;;AAEA,MAAI,CAACT,MAAD,IAAW,CAACE,KAAhB,EAAuB;AACrB,WAAO;AAAEF,MAAAA,MAAM,EAAEI,UAAV;AAAsBF,MAAAA,KAAK,EAAEG;AAA7B,KAAP;AACD;;AAED,MAAMK,WAAW,GAAG,oCAAeZ,KAAf,CAApB;;AAEA,MAAIY,WAAW,IAAI,CAAnB,EAAsB;AACpB,QAAMC,gBAAe,GAAGnB,KAAK,CAACQ,MAAD,EAASQ,SAAT,EAAoBF,SAApB,CAA7B;;AACA,QAAMM,eAAc,GAAGpB,KAAK,CAACmB,gBAAe,GAAGD,WAAnB,EAAgCD,QAAhC,EAA0CF,QAA1C,CAA5B;;AAEA,QAAIK,eAAc,KAAKL,QAAvB,EAAiC;AAC/B,aAAO;AACLP,QAAAA,MAAM,EAAER,KAAK,CAACoB,eAAc,GAAGF,WAAlB,EAA+BF,SAA/B,EAA0CF,SAA1C,CADR;AAELJ,QAAAA,KAAK,EAAEU;AAFF,OAAP;AAID;;AACD,WAAO;AACLZ,MAAAA,MAAM,EAAEW,gBADH;AAELT,MAAAA,KAAK,EAAEU;AAFF,KAAP;AAID;;AAED,MAAMA,cAAc,GAAGpB,KAAK,CAACU,KAAD,EAAQO,QAAR,EAAkBF,QAAlB,CAA5B;AACA,MAAMI,eAAe,GAAGnB,KAAK,CAACoB,cAAc,GAAGF,WAAlB,EAA+BF,SAA/B,EAA0CF,SAA1C,CAA7B;;AAEA,MAAIK,eAAe,KAAKL,SAAxB,EAAmC;AACjC,WAAO;AACLN,MAAAA,MAAM,EAAEW,eADH;AAELT,MAAAA,KAAK,EAAEV,KAAK,CAACmB,eAAe,GAAGD,WAAnB,EAAgCF,SAAhC,EAA2CF,SAA3C;AAFP,KAAP;AAID;;AAED,SAAO;AACLN,IAAAA,MAAM,EAAEW,eADH;AAELT,IAAAA,KAAK,EAAEU;AAFF,GAAP;AAID;;AAEM,SAASC,yBAAT,QAQyB;AAAA,MAL9Bf,KAK8B,SAL9BA,KAK8B;AAAA,MAJ9BC,UAI8B,SAJ9BA,UAI8B;AAC9B,MAAMe,SAAS,GAAGjB,gBAAgB,CAAC;AACjCC,IAAAA,KAAK,EAALA,KADiC;AAEjCC,IAAAA,UAAU,EAAVA;AAFiC,GAAD,CAAlC;AAKA,MAAMgB,SAAS,GAAG;AAChBjB,IAAAA,KAAK,EAALA;AADgB,KAEbgB,SAFa,EAAlB;AAKA,MAAME,MAAM,GAAG,CAACD,SAAD,CAAf;AAEA,uCACKD,SADL;AAEEG,IAAAA,aAAa,EAAE,CAACD,MAAD;AAFjB;AAID","sourcesContent":["import type { Attachment } from 'stream-chat';\n\nimport { buildThumbnail } from './buildThumbnail';\n\nimport type { GallerySizeAndThumbnailGrid, GallerySizeConfig } from './types';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\nimport { getAspectRatio } from '../getAspectRatio';\n\n/**\n * Bound a number to a range.\n * @param number The number to bound.\n * @param min The minimum value.\n * @param max The maximum value.\n *\n * @returns The bounded number.\n */\nfunction clamp(number: number, min: number, max: number) {\n  return Math.min(Math.max(number, min), max);\n}\n\nfunction getContainerSize<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({ image, sizeConfig }: { image: Attachment<StreamChatGenerics>; sizeConfig: GallerySizeConfig }) {\n  const { original_height: height, original_width: width } = image;\n  const { gridHeight, gridWidth, maxHeight, maxWidth, minHeight, minWidth } = sizeConfig;\n\n  if (!height || !width) {\n    return { height: gridHeight, width: gridWidth };\n  }\n\n  const aspectRatio = getAspectRatio(image);\n\n  if (aspectRatio <= 1) {\n    const containerHeight = clamp(height, minHeight, maxHeight);\n    const containerWidth = clamp(containerHeight * aspectRatio, minWidth, maxWidth);\n\n    if (containerWidth === maxWidth) {\n      return {\n        height: clamp(containerWidth / aspectRatio, minHeight, maxHeight),\n        width: containerWidth,\n      };\n    }\n    return {\n      height: containerHeight,\n      width: containerWidth,\n    };\n  }\n\n  const containerWidth = clamp(width, minWidth, maxWidth);\n  const containerHeight = clamp(containerWidth / aspectRatio, minHeight, maxHeight);\n\n  if (containerHeight === maxHeight) {\n    return {\n      height: containerHeight,\n      width: clamp(containerHeight * aspectRatio, minHeight, maxHeight),\n    };\n  }\n\n  return {\n    height: containerHeight,\n    width: containerWidth,\n  };\n}\n\nexport function buildGalleryOfSingleImage<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  image,\n  sizeConfig,\n}: {\n  image: Attachment<StreamChatGenerics>;\n  sizeConfig: GallerySizeConfig;\n}): GallerySizeAndThumbnailGrid {\n  const container = getContainerSize({\n    image,\n    sizeConfig,\n  });\n\n  const thumbnail = buildThumbnail({\n    image,\n    ...container,\n  });\n\n  const column = [thumbnail];\n\n  return {\n    ...container,\n    thumbnailGrid: [column],\n  };\n}\n"]}