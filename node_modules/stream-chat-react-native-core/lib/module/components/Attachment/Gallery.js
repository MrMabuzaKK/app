var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Gallery = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _buildGallery = require("./utils/buildGallery/buildGallery");

var _getGalleryImageBorderRadius = require("./utils/getGalleryImageBorderRadius");

var _openUrlSafely = require("./utils/openUrlSafely");

var _ImageGalleryContext = require("../../contexts/imageGalleryContext/ImageGalleryContext");

var _MessageContext = require("../../contexts/messageContext/MessageContext");

var _MessagesContext = require("../../contexts/messagesContext/MessagesContext");

var _OverlayContext = require("../../contexts/overlayContext/OverlayContext");

var _ThemeContext = require("../../contexts/themeContext/ThemeContext");

var _native = require("../../native");

var _utils = require("../../utils/utils");

var _excluded = ["uri"];

var _this = this,
    _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Attachment/Gallery.tsx";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var GalleryImage = function GalleryImage(props) {
  var uri = props.uri,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);
  return _react["default"].createElement(_reactNative.Image, (0, _extends2["default"])({}, rest, {
    source: {
      uri: (0, _utils.makeImageCompatibleUrl)(uri)
    },
    testID: "image-attachment-single",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 40,
      columnNumber: 5
    }
  }));
};

var MemoizedGalleryImage = _react["default"].memo(GalleryImage, function (prevProps, nextProps) {
  return (0, _utils.getUrlWithoutParams)(prevProps.uri) === (0, _utils.getUrlWithoutParams)(nextProps.uri);
});

var styles = _reactNative.StyleSheet.create({
  flex: {
    flex: 1
  },
  galleryContainer: {
    borderTopLeftRadius: 13,
    borderTopRightRadius: 13,
    flexDirection: 'row',
    flexWrap: 'wrap',
    overflow: 'hidden'
  },
  imageContainer: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'center',
    padding: 1
  },
  moreImagesContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    margin: 1
  },
  moreImagesText: {
    color: '#FFFFFF',
    fontSize: 26,
    fontWeight: '700'
  }
});

var GalleryWithContext = function GalleryWithContext(props) {
  var additionalTouchableProps = props.additionalTouchableProps,
      alignment = props.alignment,
      groupStyles = props.groupStyles,
      hasThreadReplies = props.hasThreadReplies,
      images = props.images,
      legacyImageViewerSwipeBehaviour = props.legacyImageViewerSwipeBehaviour,
      message = props.message,
      _onLongPress = props.onLongPress,
      _onPress = props.onPress,
      _onPressIn = props.onPressIn,
      preventPress = props.preventPress,
      setImage = props.setImage,
      setImages = props.setImages,
      setOverlay = props.setOverlay,
      threadList = props.threadList,
      videos = props.videos,
      VideoThumbnail = props.VideoThumbnail;

  var _useTheme = (0, _ThemeContext.useTheme)(),
      _useTheme$theme = _useTheme.theme,
      overlay = _useTheme$theme.colors.overlay,
      _useTheme$theme$messa = _useTheme$theme.messageSimple.gallery,
      galleryContainer = _useTheme$theme$messa.galleryContainer,
      galleryItemColumn = _useTheme$theme$messa.galleryItemColumn,
      gridHeight = _useTheme$theme$messa.gridHeight,
      gridWidth = _useTheme$theme$messa.gridWidth,
      image = _useTheme$theme$messa.image,
      imageContainer = _useTheme$theme$messa.imageContainer,
      maxHeight = _useTheme$theme$messa.maxHeight,
      maxWidth = _useTheme$theme$messa.maxWidth,
      minHeight = _useTheme$theme$messa.minHeight,
      minWidth = _useTheme$theme$messa.minWidth,
      moreImagesContainer = _useTheme$theme$messa.moreImagesContainer,
      moreImagesText = _useTheme$theme$messa.moreImagesText;

  var sizeConfig = {
    gridHeight: gridHeight,
    gridWidth: gridWidth,
    maxHeight: maxHeight,
    maxWidth: maxWidth,
    minHeight: minHeight,
    minWidth: minWidth
  };
  var imagesAndVideos = [].concat((0, _toConsumableArray2["default"])(images || []), (0, _toConsumableArray2["default"])(videos || []));

  var _useMemo = (0, _react.useMemo)(function () {
    return (0, _buildGallery.buildGallery)({
      images: imagesAndVideos,
      sizeConfig: sizeConfig
    });
  }, [imagesAndVideos.length]),
      height = _useMemo.height,
      invertedDirections = _useMemo.invertedDirections,
      thumbnailGrid = _useMemo.thumbnailGrid,
      width = _useMemo.width;

  if (!(imagesAndVideos != null && imagesAndVideos.length)) return null;
  var messageText = message == null ? void 0 : message.text;
  var messageId = message == null ? void 0 : message.id;
  var numOfColumns = thumbnailGrid.length;
  return _react["default"].createElement(_reactNative.View, {
    style: [styles.galleryContainer, {
      height: height,
      width: width
    }, galleryContainer, {
      flexDirection: invertedDirections ? 'column' : 'row'
    }],
    testID: "gallery-container",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 183,
      columnNumber: 5
    }
  }, thumbnailGrid.map(function (rows, colIndex) {
    var numOfRows = rows.length;
    return _react["default"].createElement(_reactNative.View, {
      key: "gallery-" + (invertedDirections ? 'row' : 'column') + "-" + colIndex,
      style: [{
        flexDirection: invertedDirections ? 'row' : 'column'
      }, galleryItemColumn],
      testID: "gallery-" + (invertedDirections ? 'row' : 'column') + "-" + colIndex,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 200,
        columnNumber: 11
      }
    }, rows.map(function (_ref, rowIndex) {
      var height = _ref.height,
          resizeMode = _ref.resizeMode,
          type = _ref.type,
          url = _ref.url,
          width = _ref.width;

      var openImageViewer = function openImageViewer() {
        if (!legacyImageViewerSwipeBehaviour && message) {
          setImages([message]);
          setImage({
            messageId: message.id,
            url: url
          });
          setOverlay('gallery');
        } else if (legacyImageViewerSwipeBehaviour) {
          setImage({
            messageId: message == null ? void 0 : message.id,
            url: url
          });
          setOverlay('gallery');
        }
      };

      var defaultOnPress = function defaultOnPress() {
        if (type === 'video' && !(0, _native.isVideoPackageAvailable)()) {
          (0, _openUrlSafely.openUrlSafely)(url);
        } else {
          openImageViewer();
        }
      };

      var borderRadius = (0, _getGalleryImageBorderRadius.getGalleryImageBorderRadius)({
        alignment: alignment,
        colIndex: colIndex,
        groupStyles: groupStyles,
        hasThreadReplies: hasThreadReplies,
        height: height,
        invertedDirections: invertedDirections,
        messageText: messageText,
        numOfColumns: numOfColumns,
        numOfRows: numOfRows,
        rowIndex: rowIndex,
        sizeConfig: sizeConfig,
        threadList: threadList,
        width: width
      });
      return _react["default"].createElement(_reactNative.TouchableOpacity, (0, _extends2["default"])({
        activeOpacity: 0.8,
        disabled: preventPress,
        key: "gallery-item-" + messageId + "/" + colIndex + "/" + rowIndex + "/" + imagesAndVideos.length,
        onLongPress: function onLongPress(event) {
          if (_onLongPress) {
            _onLongPress({
              emitter: 'gallery',
              event: event
            });
          }
        },
        onPress: function onPress(event) {
          if (_onPress) {
            _onPress({
              defaultHandler: defaultOnPress,
              emitter: 'gallery',
              event: event
            });
          }
        },
        onPressIn: function onPressIn(event) {
          if (_onPressIn) {
            _onPressIn({
              defaultHandler: defaultOnPress,
              emitter: 'gallery',
              event: event
            });
          }
        },
        style: [styles.imageContainer, {
          height: height,
          width: width
        }, imageContainer],
        testID: "gallery-" + (invertedDirections ? 'row' : 'column') + "-" + colIndex + "-item-" + rowIndex
      }, additionalTouchableProps, {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 252,
          columnNumber: 17
        }
      }), type === 'video' ? _react["default"].createElement(VideoThumbnail, {
        style: [borderRadius, image, {
          height: height - 1,
          width: width - 1
        }],
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 296,
          columnNumber: 21
        }
      }) : _react["default"].createElement(MemoizedGalleryImage, {
        resizeMode: resizeMode,
        style: [borderRadius, image, {
          height: height - 1,
          width: width - 1
        }],
        uri: url,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 307,
          columnNumber: 21
        }
      }), colIndex === numOfColumns - 1 && rowIndex === numOfRows - 1 && imagesAndVideos.length > 4 ? _react["default"].createElement(_reactNative.View, {
        style: [_reactNative.StyleSheet.absoluteFillObject, styles.moreImagesContainer, {
          backgroundColor: overlay
        }, moreImagesContainer],
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 323,
          columnNumber: 21
        }
      }, _react["default"].createElement(_reactNative.Text, {
        style: [styles.moreImagesText, moreImagesText],
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 331,
          columnNumber: 23
        }
      }, "+" + (imagesAndVideos.length - 4))) : null);
    }));
  }));
};

var areEqual = function areEqual(prevProps, nextProps) {
  var prevGroupStyles = prevProps.groupStyles,
      prevHasThreadReplies = prevProps.hasThreadReplies,
      prevImages = prevProps.images,
      prevMessage = prevProps.message,
      prevVideos = prevProps.videos;
  var nextGroupStyles = nextProps.groupStyles,
      nextHasThreadReplies = nextProps.hasThreadReplies,
      nextImages = nextProps.images,
      nextMessage = nextProps.message,
      nextVideos = nextProps.videos;
  var messageEqual = (prevMessage == null ? void 0 : prevMessage.id) === (nextMessage == null ? void 0 : nextMessage.id);
  if (!messageEqual) return false;
  var groupStylesEqual = prevGroupStyles.length === nextGroupStyles.length && prevGroupStyles[0] === nextGroupStyles[0];
  if (!groupStylesEqual) return false;
  var hasThreadRepliesEqual = prevHasThreadReplies === nextHasThreadReplies;
  if (!hasThreadRepliesEqual) return false;
  var imagesEqual = prevImages.length === nextImages.length && prevImages.every(function (image, index) {
    return (0, _utils.getUrlWithoutParams)(image.image_url) === (0, _utils.getUrlWithoutParams)(nextImages[index].image_url) && (0, _utils.getUrlWithoutParams)(image.thumb_url) === (0, _utils.getUrlWithoutParams)(nextImages[index].thumb_url);
  });
  if (!imagesEqual) return false;
  var videosEqual = prevVideos.length === nextVideos.length && prevVideos.every(function (image, index) {
    return (0, _utils.getUrlWithoutParams)(image.image_url) === (0, _utils.getUrlWithoutParams)(nextVideos[index].image_url) && (0, _utils.getUrlWithoutParams)(image.thumb_url) === (0, _utils.getUrlWithoutParams)(nextVideos[index].thumb_url);
  });
  if (!videosEqual) return false;
  return true;
};

var MemoizedGallery = _react["default"].memo(GalleryWithContext, areEqual);

var Gallery = function Gallery(props) {
  var propAdditionalTouchableProps = props.additionalTouchableProps,
      propAlignment = props.alignment,
      propGroupStyles = props.groupStyles,
      hasThreadReplies = props.hasThreadReplies,
      propImages = props.images,
      propOnLongPress = props.onLongPress,
      propOnPress = props.onPress,
      propOnPressIn = props.onPressIn,
      propPreventPress = props.preventPress,
      propSetImage = props.setImage,
      propSetOverlay = props.setOverlay,
      propThreadList = props.threadList,
      propVideos = props.videos,
      PropVideoThumbnail = props.VideoThumbnail;

  var _useImageGalleryConte = (0, _ImageGalleryContext.useImageGalleryContext)(),
      contextSetImage = _useImageGalleryConte.setImage,
      setImages = _useImageGalleryConte.setImages;

  var _useMessageContext = (0, _MessageContext.useMessageContext)(),
      contextAlignment = _useMessageContext.alignment,
      contextGroupStyles = _useMessageContext.groupStyles,
      contextImages = _useMessageContext.images,
      message = _useMessageContext.message,
      contextOnLongPress = _useMessageContext.onLongPress,
      contextOnPress = _useMessageContext.onPress,
      contextOnPressIn = _useMessageContext.onPressIn,
      contextPreventPress = _useMessageContext.preventPress,
      contextThreadList = _useMessageContext.threadList,
      contextVideos = _useMessageContext.videos;

  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
      contextAdditionalTouchableProps = _useMessagesContext.additionalTouchableProps,
      legacyImageViewerSwipeBehaviour = _useMessagesContext.legacyImageViewerSwipeBehaviour,
      ContextVideoThumnbnail = _useMessagesContext.VideoThumbnail;

  var _useOverlayContext = (0, _OverlayContext.useOverlayContext)(),
      contextSetOverlay = _useOverlayContext.setOverlay;

  var images = propImages || contextImages;
  var videos = propVideos || contextVideos;
  if (!images.length && !videos.length) return null;
  var additionalTouchableProps = propAdditionalTouchableProps || contextAdditionalTouchableProps;
  var alignment = propAlignment || contextAlignment;
  var groupStyles = propGroupStyles || contextGroupStyles;
  var onLongPress = propOnLongPress || contextOnLongPress;
  var onPressIn = propOnPressIn || contextOnPressIn;
  var onPress = propOnPress || contextOnPress;
  var preventPress = typeof propPreventPress === 'boolean' ? propPreventPress : contextPreventPress;
  var setImage = propSetImage || contextSetImage;
  var setOverlay = propSetOverlay || contextSetOverlay;
  var threadList = propThreadList || contextThreadList;
  var VideoThumbnail = PropVideoThumbnail || ContextVideoThumnbnail;
  return _react["default"].createElement(MemoizedGallery, {
    additionalTouchableProps: additionalTouchableProps,
    alignment: alignment,
    channelId: message == null ? void 0 : message.cid,
    groupStyles: groupStyles,
    hasThreadReplies: hasThreadReplies || !!(message != null && message.reply_count),
    images: images,
    legacyImageViewerSwipeBehaviour: legacyImageViewerSwipeBehaviour,
    message: message,
    onLongPress: onLongPress,
    onPress: onPress,
    onPressIn: onPressIn,
    preventPress: preventPress,
    setImage: setImage,
    setImages: setImages,
    setOverlay: setOverlay,
    threadList: threadList,
    videos: videos,
    VideoThumbnail: VideoThumbnail,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 466,
      columnNumber: 5
    }
  });
};

exports.Gallery = Gallery;
Gallery.displayName = 'Gallery{messageSimple{gallery}}';
//# sourceMappingURL=Gallery.js.map