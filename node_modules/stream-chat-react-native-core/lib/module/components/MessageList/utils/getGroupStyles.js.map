{"version":3,"sources":["getGroupStyles.ts"],"names":["getGroupStyles","params","dateSeparators","hideDateSeparators","maxTimeBetweenGroupedMessages","messages","noGroupByUser","userId","messageGroupStyles","messagesFilteredForNonUser","filter","message","isMessageTypeDeleted","type","user","id","i","length","previousMessage","nextMessage","groupStyles","isPrevMessageTypeDeleted","isNextMessageTypeDeleted","isTopMessage","includes","isBottomMessage","undefined","created_at","getTime","push","splice"],"mappings":"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","sourcesContent":["import type { DateSeparators } from './getDateSeparators';\n\nimport type { PaginatedMessageListContextValue } from '../../../contexts/paginatedMessageListContext/PaginatedMessageListContext';\nimport type { ThreadContextValue } from '../../../contexts/threadContext/ThreadContext';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\nimport type { GroupType } from '../hooks/useMessageList';\n\nexport type GetGroupStylesParams<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  dateSeparators: DateSeparators;\n  messages:\n    | PaginatedMessageListContextValue<StreamChatGenerics>['messages']\n    | ThreadContextValue<StreamChatGenerics>['threadMessages'];\n  hideDateSeparators?: boolean;\n  maxTimeBetweenGroupedMessages?: number;\n  noGroupByUser?: boolean;\n  userId?: string;\n};\n\nexport const getGroupStyles = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  params: GetGroupStylesParams<StreamChatGenerics>,\n) => {\n  const {\n    dateSeparators,\n    hideDateSeparators,\n    maxTimeBetweenGroupedMessages,\n    messages,\n    noGroupByUser,\n    userId,\n  } = params;\n\n  if (noGroupByUser) return {};\n\n  const messageGroupStyles: { [key: string]: GroupType[] } = {};\n\n  const messagesFilteredForNonUser = messages.filter((message) => {\n    const isMessageTypeDeleted = message.type === 'deleted';\n    return !isMessageTypeDeleted || userId === message.user?.id;\n  });\n\n  for (let i = 0; i < messagesFilteredForNonUser.length; i++) {\n    const previousMessage = messagesFilteredForNonUser[i - 1] as\n      | typeof messagesFilteredForNonUser[0]\n      | undefined;\n    const message = messagesFilteredForNonUser[i];\n    const nextMessage = messagesFilteredForNonUser[i + 1] as\n      | typeof messagesFilteredForNonUser[0]\n      | undefined;\n    const groupStyles: GroupType[] = [];\n\n    const isPrevMessageTypeDeleted = previousMessage?.type === 'deleted';\n    const isNextMessageTypeDeleted = nextMessage?.type === 'deleted';\n\n    const userId = message?.user?.id || null;\n\n    const isTopMessage =\n      !previousMessage ||\n      previousMessage.type === 'system' ||\n      userId !== previousMessage?.user?.id ||\n      previousMessage.type === 'error' ||\n      !!isPrevMessageTypeDeleted ||\n      (!hideDateSeparators && dateSeparators[message.id]) ||\n      messageGroupStyles[previousMessage.id]?.includes('bottom');\n\n    const isBottomMessage =\n      !nextMessage ||\n      nextMessage.type === 'system' ||\n      userId !== nextMessage?.user?.id ||\n      nextMessage.type === 'error' ||\n      !!isNextMessageTypeDeleted ||\n      (!hideDateSeparators && dateSeparators[nextMessage.id]) ||\n      (maxTimeBetweenGroupedMessages !== undefined &&\n        nextMessage.created_at.getTime() - message.created_at.getTime() >\n          maxTimeBetweenGroupedMessages);\n\n    /**\n     * Add group styles key for top message\n     */\n    if (isTopMessage) {\n      groupStyles.push('top');\n    }\n\n    /**\n     * Add group styles key for bottom message\n     */\n\n    const isMessageTypeDeleted = message.type === 'deleted';\n    if (isBottomMessage) {\n      /**\n       * If the bottom message is also the top, or deleted, or an error,\n       * add the key for single message instead of bottom\n       */\n      if (isTopMessage || isMessageTypeDeleted || message.type === 'error') {\n        groupStyles.splice(0, groupStyles.length);\n        groupStyles.push('single');\n      } else {\n        groupStyles.push('bottom');\n      }\n    }\n\n    /**\n     * Add the key for all non top or bottom messages, if the message is\n     * deleted or an error add the key for single otherwise middle\n     */\n    if (!isTopMessage && !isBottomMessage) {\n      if (isMessageTypeDeleted || message.type === 'error') {\n        groupStyles.splice(0, groupStyles.length);\n        groupStyles.push('single');\n      } else {\n        groupStyles.splice(0, groupStyles.length);\n        groupStyles.push('middle');\n      }\n    }\n\n    if (message.id) {\n      messageGroupStyles[message.id] = groupStyles;\n    }\n  }\n\n  return messageGroupStyles;\n};\n"]}