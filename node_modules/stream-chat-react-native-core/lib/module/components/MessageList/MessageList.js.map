{"version":3,"sources":["MessageList.tsx"],"names":["styles","StyleSheet","create","container","alignItems","flex","width","contentContainer","flexGrow","paddingBottom","invert","transform","scaleY","listContainer","messagePadding","paddingHorizontal","stickyHeader","position","top","keyExtractor","item","id","created_at","toISOString","Date","now","toString","flatListViewabilityConfig","viewAreaCoveragePercentThreshold","MessageListWithContext","props","LoadingMoreIndicator","threadList","InlineLoadingMoreThreadIndicator","InlineLoadingMoreIndicator","additionalFlatListProps","channel","client","closePicker","DateHeader","deletedMessagesVisibilityType","disabled","disableTypingIndicator","EmptyStateIndicator","FlatList","FooterComponent","HeaderComponent","InlineLoadingMoreRecentIndicator","hideStickyDateHeader","initialScrollToFirstUnreadMessage","InlineDateSeparator","InlineUnreadIndicator","inverted","isListActive","legacyImageViewerSwipeBehaviour","loadChannelAtMessage","loading","LoadingIndicator","loadMore","loadMoreRecent","loadMoreThread","markRead","Message","MessageSystem","myMessageTheme","NetworkDownIndicator","noGroupByUser","onListScroll","onThreadSelect","overlay","reloadChannel","ScrollToBottomButton","scrollToFirstUnreadThreshold","selectedPicker","setFlatListRef","setImages","setSelectedPicker","setTargetedMessage","StickyHeader","targetedMessage","tDateTimeParser","thread","TypingIndicator","TypingIndicatorContainer","theme","white_snow","colors","messageList","modifiedTheme","style","messageListLengthBeforeUpdate","messageListLengthAfterUpdate","length","topMessageBeforeUpdate","topMessageAfterUpdate","autoscrollToTop","setAutoscrollToTop","onStartReachedTracker","onEndReachedTracker","onStartReachedInPromise","onEndReachedInPromise","flatListRef","initialScrollSet","channelResyncScrollSet","hasMoved","setHasMoved","lastReceivedId","setLastReceivedId","scrollToBottomButtonVisible","setScrollToBottomButtonVisible","stickyHeaderDate","setStickyHeaderDate","stickyHeaderDateRef","getLastReadSafely","initialized","lastRead","undefined","channelLastRead","isUnreadMessage","message","setInitialScrollIfNeeded","current","scrollToEnd","setTimeout","updateStickyHeaderDateIfNeeded","viewableItems","lastItem","pop","isMessageTypeDeleted","type","toDateString","onViewableItemsChanged","Platform","OS","resetPaginationTrackers","shouldMarkReadOnFirstLoad","countUnread","lastReceivedMessage","hasNewMessage","isMyMessage","user","userID","scrollToBottomIfNeeded","scrollToOffset","offset","state","isUpToDate","maybeCallOnStartReached","renderItem","index","lastMessage","showUnreadUnderlay","insertInlineUnreadIndicator","wrapMessageInTheme","goToMessage","groupStyles","dateSeparator","quoted_message_id","limit","callback","Promise","resolve","onError","then","maybeCallOnEndReached","handleScroll","event","nativeEvent","contentOffset","y","visibleLength","layoutMeasurement","height","contentLength","contentSize","isScrollAtStart","isScrollAtEnd","isScrollAtBottom","showScrollToBottomButton","shouldMarkRead","goToNewMessages","messageId","indexOfParentInMessageList","findIndex","scrollToIndex","viewPosition","_","messagesWithImages","filter","attachments","some","attachment","title_link","og_scrape_url","image_url","thumb_url","imageString","map","join","numberOfMessagesWithImages","threadExists","stickyHeaderFormatDate","getFullYear","tStickyHeaderDate","stickyHeaderDateToRender","format","dismissImagePicker","onScrollBeginDrag","onScrollEndDrag","refCallback","ref","renderListEmptyComponent","backgroundColor","autoscrollToTopThreshold","minIndexForVisible","MessageList","enableMessageGroupingByUser","error","isChannelActive","t"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  FlatListProps,\n  FlatList as FlatListType,\n  Platform,\n  ScrollViewProps,\n  StyleSheet,\n  View,\n  ViewToken,\n} from 'react-native';\n\nimport type { Channel as StreamChannel } from 'stream-chat';\n\nimport {\n  isMessageWithStylesReadByAndDateSeparator,\n  MessageType,\n  useMessageList,\n} from './hooks/useMessageList';\nimport { InlineLoadingMoreIndicator } from './InlineLoadingMoreIndicator';\nimport { InlineLoadingMoreRecentIndicator } from './InlineLoadingMoreRecentIndicator';\nimport { InlineLoadingMoreThreadIndicator } from './InlineLoadingMoreThreadIndicator';\nimport { getLastReceivedMessage } from './utils/getLastReceivedMessage';\n\nimport {\n  AttachmentPickerContextValue,\n  useAttachmentPickerContext,\n} from '../../contexts/attachmentPickerContext/AttachmentPickerContext';\nimport {\n  ChannelContextValue,\n  useChannelContext,\n} from '../../contexts/channelContext/ChannelContext';\nimport { ChatContextValue, useChatContext } from '../../contexts/chatContext/ChatContext';\nimport {\n  ImageGalleryContextValue,\n  useImageGalleryContext,\n} from '../../contexts/imageGalleryContext/ImageGalleryContext';\nimport {\n  MessagesContextValue,\n  useMessagesContext,\n} from '../../contexts/messagesContext/MessagesContext';\nimport {\n  OverlayContextValue,\n  useOverlayContext,\n} from '../../contexts/overlayContext/OverlayContext';\nimport {\n  PaginatedMessageListContextValue,\n  usePaginatedMessageListContext,\n} from '../../contexts/paginatedMessageListContext/PaginatedMessageListContext';\nimport { mergeThemes, ThemeProvider, useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { ThreadContextValue, useThreadContext } from '../../contexts/threadContext/ThreadContext';\nimport {\n  isDayOrMoment,\n  TranslationContextValue,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    width: '100%',\n  },\n  contentContainer: {\n    flexGrow: 1,\n    /**\n     * paddingBottom is set to 4 to account for the default date\n     * header and inline indicator alignment. The top margin is 8\n     * on the header but 4 on the inline date, this adjusts the spacing\n     * to allow the \"first\" inline date to align with the date header.\n     */\n    paddingBottom: 4,\n  },\n  flex: { flex: 1 },\n  invert: { transform: [{ scaleY: -1 }] },\n  listContainer: {\n    flex: 1,\n    width: '100%',\n  },\n  messagePadding: {\n    paddingHorizontal: 8,\n  },\n  stickyHeader: {\n    position: 'absolute',\n    top: 0,\n  },\n});\n\nconst keyExtractor = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  item: MessageType<StreamChatGenerics>,\n) =>\n  item.id ||\n  (item.created_at\n    ? typeof item.created_at === 'string'\n      ? item.created_at\n      : item.created_at.toISOString()\n    : Date.now().toString());\n\nconst flatListViewabilityConfig = {\n  viewAreaCoveragePercentThreshold: 1,\n};\n\ntype MessageListPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<AttachmentPickerContextValue, 'closePicker' | 'selectedPicker' | 'setSelectedPicker'> &\n  Pick<\n    ChannelContextValue<StreamChatGenerics>,\n    | 'channel'\n    | 'disabled'\n    | 'EmptyStateIndicator'\n    | 'hideStickyDateHeader'\n    | 'loadChannelAtMessage'\n    | 'loading'\n    | 'LoadingIndicator'\n    | 'markRead'\n    | 'NetworkDownIndicator'\n    | 'reloadChannel'\n    | 'scrollToFirstUnreadThreshold'\n    | 'setTargetedMessage'\n    | 'StickyHeader'\n    | 'targetedMessage'\n  > &\n  Pick<ChatContextValue<StreamChatGenerics>, 'client'> &\n  Pick<ImageGalleryContextValue<StreamChatGenerics>, 'setImages'> &\n  Pick<PaginatedMessageListContextValue<StreamChatGenerics>, 'loadMore' | 'loadMoreRecent'> &\n  Pick<OverlayContextValue, 'overlay'> &\n  Pick<\n    MessagesContextValue<StreamChatGenerics>,\n    | 'deletedMessagesVisibilityType'\n    | 'DateHeader'\n    | 'disableTypingIndicator'\n    | 'FlatList'\n    | 'initialScrollToFirstUnreadMessage'\n    | 'InlineDateSeparator'\n    | 'InlineUnreadIndicator'\n    | 'legacyImageViewerSwipeBehaviour'\n    | 'Message'\n    | 'ScrollToBottomButton'\n    | 'MessageSystem'\n    | 'myMessageTheme'\n    | 'TypingIndicator'\n    | 'TypingIndicatorContainer'\n  > &\n  Pick<ThreadContextValue<StreamChatGenerics>, 'loadMoreThread' | 'thread'> &\n  Pick<TranslationContextValue, 't' | 'tDateTimeParser'> & {\n    /**\n     * Besides existing (default) UX behavior of underlying FlatList of MessageList component, if you want\n     * to attach some additional props to underlying FlatList, you can add it to following prop.\n     *\n     * You can find list of all the available FlatList props here - https://facebook.github.io/react-native/docs/flatlist#props\n     *\n     * **NOTE** Don't use `additionalFlatListProps` to get access to ref of flatlist. Use `setFlatListRef` instead.\n     *\n     * e.g.\n     * ```js\n     * <MessageList\n     *  additionalFlatListProps={{ bounces: true, keyboardDismissMode: true }} />\n     * ```\n     */\n    additionalFlatListProps?: Partial<FlatListProps<MessageType<StreamChatGenerics>>>;\n    /**\n     * UI component for footer of message list. By default message list will use `InlineLoadingMoreIndicator`\n     * as FooterComponent. If you want to implement your own inline loading indicator, you can access `loadingMore`\n     * from context.\n     *\n     * This is a [ListHeaderComponent](https://facebook.github.io/react-native/docs/flatlist#listheadercomponent) of FlatList\n     * used in MessageList. Should be used for header by default if inverted is true or defaulted\n     */\n    FooterComponent?: React.ComponentType;\n    /**\n     * UI component for header of message list. By default message list will use `InlineLoadingMoreRecentIndicator`\n     * as HeaderComponent. If you want to implement your own inline loading indicator, you can access `loadingMoreRecent`\n     * from context.\n     *\n     * This is a [ListFooterComponent](https://facebook.github.io/react-native/docs/flatlist#listheadercomponent) of FlatList\n     * used in MessageList. Should be used for header if inverted is false\n     */\n    HeaderComponent?: React.ComponentType;\n    /** Whether or not the FlatList is inverted. Defaults to true */\n    inverted?: boolean;\n    isListActive?: boolean;\n    /** Turn off grouping of messages by user */\n    noGroupByUser?: boolean;\n    onListScroll?: ScrollViewProps['onScroll'];\n    /**\n     * Handler to open the thread on message. This is callback for touch event for replies button.\n     *\n     * @param message A message object to open the thread upon.\n     */\n    onThreadSelect?: (message: ThreadContextValue<StreamChatGenerics>['thread']) => void;\n    /**\n     * Use `setFlatListRef` to get access to ref to inner FlatList.\n     *\n     * e.g.\n     * ```js\n     * <MessageList\n     *  setFlatListRef={(ref) => {\n     *    // Use ref for your own good\n     *  }}\n     * ```\n     */\n    setFlatListRef?: (ref: FlatListType<MessageType<StreamChatGenerics>> | null) => void;\n    /**\n     * Boolean whether or not the Messages in the MessageList are part of a Thread\n     **/\n    threadList?: boolean;\n  };\n\n/**\n * The message list component renders a list of messages. It consumes the following contexts:\n *\n * [ChannelContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/channel-context/)\n * [ChatContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/chat-context/)\n * [MessagesContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/messages-context/)\n * [ThreadContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/thread-context/)\n * [TranslationContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/translation-context/)\n */\nconst MessageListWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageListPropsWithContext<StreamChatGenerics>,\n) => {\n  const LoadingMoreIndicator = props.threadList\n    ? InlineLoadingMoreThreadIndicator\n    : InlineLoadingMoreIndicator;\n  const {\n    additionalFlatListProps,\n    channel,\n    client,\n    closePicker,\n    DateHeader,\n    deletedMessagesVisibilityType,\n    disabled,\n    disableTypingIndicator,\n    EmptyStateIndicator,\n    FlatList,\n    FooterComponent = LoadingMoreIndicator,\n    HeaderComponent = InlineLoadingMoreRecentIndicator,\n    hideStickyDateHeader,\n    initialScrollToFirstUnreadMessage,\n    InlineDateSeparator,\n    InlineUnreadIndicator,\n    inverted = true,\n    isListActive = false,\n    legacyImageViewerSwipeBehaviour,\n    loadChannelAtMessage,\n    loading,\n    LoadingIndicator,\n    loadMore,\n    loadMoreRecent,\n    loadMoreThread,\n    markRead,\n    Message,\n    MessageSystem,\n    myMessageTheme,\n    NetworkDownIndicator,\n    noGroupByUser,\n    onListScroll,\n    onThreadSelect,\n    overlay,\n    reloadChannel,\n    ScrollToBottomButton,\n    scrollToFirstUnreadThreshold,\n    selectedPicker,\n    setFlatListRef,\n    setImages,\n    setSelectedPicker,\n    setTargetedMessage,\n    StickyHeader,\n    targetedMessage,\n    tDateTimeParser,\n    thread,\n    threadList = false,\n    TypingIndicator,\n    TypingIndicatorContainer,\n  } = props;\n\n  const { theme } = useTheme();\n\n  const {\n    colors: { white_snow },\n    messageList: { container, contentContainer, listContainer },\n  } = theme;\n\n  const modifiedTheme = useMemo(\n    () => mergeThemes({ style: myMessageTheme, theme }),\n    [myMessageTheme, theme],\n  );\n\n  const messageList = useMessageList<StreamChatGenerics>({\n    deletedMessagesVisibilityType,\n    inverted,\n    noGroupByUser,\n    threadList,\n  });\n  const messageListLengthBeforeUpdate = useRef(0);\n  const messageListLengthAfterUpdate = messageList.length;\n\n  /**\n   * We need topMessage and channelLastRead values to set the initial scroll position.\n   * So these values only get used if `initialScrollToFirstUnreadMessage` prop is true.\n   */\n  const topMessageBeforeUpdate = useRef<MessageType<StreamChatGenerics>>();\n  const topMessageAfterUpdate = messageList[messageList.length - 1];\n\n  const [autoscrollToTop, setAutoscrollToTop] = useState(false);\n\n  /**\n   * We want to call onEndReached and onStartReached only once, per content length.\n   * We keep track of calls to these functions per content length, with following trackers.\n   */\n  const onStartReachedTracker = useRef<Record<number, boolean>>({});\n  const onEndReachedTracker = useRef<Record<number, boolean>>({});\n\n  const onStartReachedInPromise = useRef<Promise<void> | null>(null);\n  const onEndReachedInPromise = useRef<Promise<void> | null>(null);\n\n  const flatListRef = useRef<FlatListType<MessageType<StreamChatGenerics>> | null>(null);\n\n  const initialScrollSet = useRef<boolean>(false);\n  const channelResyncScrollSet = useRef<boolean>(true);\n\n  const [hasMoved, setHasMoved] = useState(false);\n  const [lastReceivedId, setLastReceivedId] = useState(getLastReceivedMessage(messageList)?.id);\n  const [scrollToBottomButtonVisible, setScrollToBottomButtonVisible] = useState(false);\n\n  const [stickyHeaderDate, setStickyHeaderDate] = useState<Date | undefined>();\n  const stickyHeaderDateRef = useRef<Date | undefined>();\n  /**\n   * channel.lastRead throws error if the channel is not initialized.\n   */\n  const getLastReadSafely = () => (channel?.initialized ? channel.lastRead() : undefined);\n\n  const channelLastRead = useRef(getLastReadSafely());\n\n  const isUnreadMessage = (\n    message: MessageType<StreamChatGenerics> | undefined,\n    lastRead?: ReturnType<StreamChannel<StreamChatGenerics>['lastRead']>,\n  ) => message && lastRead && message.created_at && lastRead < message.created_at;\n\n  /**\n   * If the top message in the list is unread, then we should scroll to top of the list.\n   * This is to handle the case when entire message list is unread.\n   * This scroll get set only on load, and never again.\n   */\n  const setInitialScrollIfNeeded = () => {\n    // If the feature is disabled or initial scroll position is already set.\n    if (!initialScrollToFirstUnreadMessage || initialScrollSet.current) {\n      initialScrollSet.current = true;\n      return;\n    }\n    if (isUnreadMessage(topMessageBeforeUpdate.current, channelLastRead.current)) {\n      if (flatListRef.current) {\n        flatListRef.current.scrollToEnd();\n      }\n      setTimeout(() => {\n        initialScrollSet.current = true;\n      }, 500);\n    } else if (!initialScrollSet.current) {\n      initialScrollSet.current = true;\n    }\n  };\n\n  const updateStickyHeaderDateIfNeeded = (viewableItems: ViewToken[]) => {\n    if (viewableItems.length) {\n      const lastItem = viewableItems.pop() as {\n        item: MessageType<StreamChatGenerics>;\n      };\n\n      const isMessageTypeDeleted = lastItem.item.type === 'deleted';\n\n      if (\n        lastItem?.item?.created_at &&\n        !isMessageTypeDeleted &&\n        typeof lastItem.item.created_at !== 'string' &&\n        lastItem.item.created_at.toDateString() !== stickyHeaderDateRef.current?.toDateString()\n      ) {\n        stickyHeaderDateRef.current = lastItem.item.created_at;\n        setStickyHeaderDate(lastItem.item.created_at);\n      }\n    }\n  };\n\n  /**\n   * FlatList doesn't accept changeable function for onViewableItemsChanged prop.\n   * Thus useRef.\n   */\n  const onViewableItemsChanged = useRef(\n    ({ viewableItems }: { viewableItems: ViewToken[] | undefined }) => {\n      /**\n       * When a new message comes in, list scrolls down to the bottom automatically (using prop `maintainVisibleContentPosition`)\n       * and we mark the channel as read from handleScroll function.\n       * Although this logic is dependent on the fact that `onScroll` event gets triggered during this process.\n       * But for Android, this event is not triggered when messages length is lesser than visible screen height.\n       *\n       * And thus we need to check if the message list length is lesser than visible screen height and mark the channel as read.\n       */\n      if (\n        Platform.OS === 'android' &&\n        viewableItems?.length &&\n        viewableItems?.length >= messageListLengthBeforeUpdate.current\n      ) {\n        channel.markRead();\n      }\n\n      if (viewableItems && !hideStickyDateHeader) {\n        updateStickyHeaderDateIfNeeded(viewableItems);\n      }\n      setInitialScrollIfNeeded();\n    },\n  );\n\n  const resetPaginationTrackers = () => {\n    onStartReachedTracker.current = {};\n    onEndReachedTracker.current = {};\n  };\n\n  useEffect(() => {\n    setScrollToBottomButtonVisible(false);\n  }, [disabled]);\n\n  useEffect(() => {\n    /**\n     * 1. !initialScrollToFirstUnreadMessage && channel.countUnread() > 0\n     *\n     *    In this case MessageList won't scroll to first unread message when opened, so we can mark\n     *    the channel as read right after opening.\n     *\n     * 2. initialScrollToFirstUnreadMessage && channel.countUnread() <= scrollToFirstUnreadThreshold\n     *\n     *    In this case MessageList will be opened to first unread message.\n     *    But if there are not enough (scrollToFirstUnreadThreshold) unread messages, then MessageList\n     *    won't need to scroll up. So we can safely mark the channel as read right after opening.\n     */\n    const shouldMarkReadOnFirstLoad =\n      !loading &&\n      channel &&\n      ((!initialScrollToFirstUnreadMessage && channel.countUnread() > 0) ||\n        (initialScrollToFirstUnreadMessage &&\n          channel.countUnread() <= scrollToFirstUnreadThreshold));\n\n    if (shouldMarkReadOnFirstLoad) {\n      markRead();\n    }\n  }, [loading]);\n\n  useEffect(() => {\n    const lastReceivedMessage = getLastReceivedMessage(messageList);\n\n    const hasNewMessage = lastReceivedId !== lastReceivedMessage?.id;\n    const isMyMessage = lastReceivedMessage?.user?.id === client.userID;\n\n    setLastReceivedId(lastReceivedMessage?.id);\n\n    /**\n     * Scroll down when\n     * 1. you send a new message to channel\n     * 2. new message list is small than the one before update - channel has resynced\n     * 3. created_at timestamp of top message before update is lesser than created_at timestamp of top message after update - channel has resynced\n     */\n    const scrollToBottomIfNeeded = () => {\n      if (!client || !channel || messageList.length === 0) {\n        return;\n      }\n      if (\n        (hasNewMessage && isMyMessage) ||\n        messageListLengthAfterUpdate < messageListLengthBeforeUpdate.current ||\n        (topMessageBeforeUpdate.current?.created_at &&\n          topMessageAfterUpdate?.created_at &&\n          topMessageBeforeUpdate.current.created_at < topMessageAfterUpdate.created_at)\n      ) {\n        channelResyncScrollSet.current = false;\n        setScrollToBottomButtonVisible(false);\n        resetPaginationTrackers();\n\n        setTimeout(\n          () =>\n            flatListRef.current?.scrollToOffset({\n              offset: 0,\n            }),\n          50,\n        );\n        setTimeout(() => {\n          channelResyncScrollSet.current = true;\n          if (channel.countUnread() > 0) {\n            markRead();\n          }\n        }, 500);\n      }\n    };\n\n    if (threadList || channel?.state.isUpToDate) {\n      scrollToBottomIfNeeded();\n    } else if (!scrollToBottomButtonVisible) {\n      setScrollToBottomButtonVisible(true);\n    }\n\n    if (\n      !channel?.state.isUpToDate &&\n      flatListRef.current &&\n      messageListLengthBeforeUpdate.current === 0 &&\n      messageListLengthAfterUpdate < 10\n    ) {\n      /**\n       * Trigger onStartReached on first load, if messages are not enough to fill the screen.\n       * This is important especially for android, where you can't overscroll.\n       */\n      maybeCallOnStartReached(10);\n    }\n\n    /**\n     * channelLastRead and topMessage are only used for setting initial scroll.\n     * So lets not set it if `initialScrollToFirstUnreadMessage` prop is false.\n     * OR if the scroll is already set.\n     */\n    if (initialScrollToFirstUnreadMessage && !initialScrollSet.current) {\n      channelLastRead.current = getLastReadSafely();\n    }\n\n    messageListLengthBeforeUpdate.current = messageListLengthAfterUpdate;\n    topMessageBeforeUpdate.current = topMessageAfterUpdate;\n  }, [messageListLengthAfterUpdate, topMessageAfterUpdate?.id]);\n\n  useEffect(() => {\n    if (!channel?.state.isUpToDate && autoscrollToTop) {\n      setAutoscrollToTop(false);\n    } else if (channel?.state.isUpToDate && !autoscrollToTop) {\n      setAutoscrollToTop(true);\n    }\n  }, [messageListLengthAfterUpdate]);\n\n  const renderItem = ({\n    index,\n    item: message,\n  }: {\n    index: number;\n    item: MessageType<StreamChatGenerics>;\n  }) => {\n    if (!channel || !channel.initialized) return null;\n\n    const lastRead = getLastReadSafely();\n\n    const lastMessage = messageList?.[index + 1];\n\n    const showUnreadUnderlay = !!isUnreadMessage(message, lastRead) && scrollToBottomButtonVisible;\n    const insertInlineUnreadIndicator =\n      showUnreadUnderlay && !isUnreadMessage(lastMessage, lastRead);\n\n    if (message.type === 'system') {\n      return (\n        <>\n          <View testID={`message-list-item-${index}`}>\n            <MessageSystem message={message} style={styles.messagePadding} />\n          </View>\n          {insertInlineUnreadIndicator && <InlineUnreadIndicator />}\n        </>\n      );\n    }\n\n    const wrapMessageInTheme = client.userID === message.user?.id && !!myMessageTheme;\n    return wrapMessageInTheme ? (\n      <>\n        <ThemeProvider mergedStyle={modifiedTheme}>\n          <View testID={`message-list-item-${index}`}>\n            <Message\n              goToMessage={goToMessage}\n              groupStyles={\n                isMessageWithStylesReadByAndDateSeparator(message) ? message.groupStyles : []\n              }\n              isTargetedMessage={targetedMessage === message.id}\n              lastReceivedId={lastReceivedId === message.id ? lastReceivedId : undefined}\n              message={message}\n              onThreadSelect={onThreadSelect}\n              showUnreadUnderlay={showUnreadUnderlay}\n              style={styles.messagePadding}\n              threadList={threadList}\n            />\n          </View>\n        </ThemeProvider>\n        {isMessageWithStylesReadByAndDateSeparator(message) && message.dateSeparator && (\n          <InlineDateSeparator date={message.dateSeparator} />\n        )}\n        {/* Adding indicator below the messages, since the list is inverted */}\n        {insertInlineUnreadIndicator && <InlineUnreadIndicator />}\n      </>\n    ) : (\n      <>\n        <View testID={`message-list-item-${index}`}>\n          <Message\n            goToMessage={goToMessage}\n            groupStyles={\n              isMessageWithStylesReadByAndDateSeparator(message) ? message.groupStyles : []\n            }\n            isTargetedMessage={targetedMessage === message.id}\n            lastReceivedId={\n              lastReceivedId === message.id || message.quoted_message_id\n                ? lastReceivedId\n                : undefined\n            }\n            message={message}\n            onThreadSelect={onThreadSelect}\n            showUnreadUnderlay={showUnreadUnderlay}\n            style={styles.messagePadding}\n            threadList={threadList}\n          />\n        </View>\n        {isMessageWithStylesReadByAndDateSeparator(message) && message.dateSeparator && (\n          <InlineDateSeparator date={message.dateSeparator} />\n        )}\n        {/* Adding indicator below the messages, since the list is inverted */}\n        {insertInlineUnreadIndicator && <InlineUnreadIndicator />}\n      </>\n    );\n  };\n\n  /**\n   * We are keeping full control on message pagination, and not relying on react-native for it.\n   * The reasons being,\n   * 1. FlatList doesn't support onStartReached prop\n   * 2. `onEndReached` function prop available on react-native, gets executed\n   *    once per content length (and thats actually a nice optimization strategy).\n   *    But it also means, we always need to prioritize onEndReached above our\n   *    logic for `onStartReached`.\n   * 3. `onEndReachedThreshold` prop decides - at which scroll position to call `onEndReached`.\n   *    Its a factor of content length (which is necessary for \"real\" infinite scroll). But on\n   *    the other hand, it also makes calls to `onEndReached` (and this `channel.query`) way\n   *    too early during scroll, which we don't really need. So we are going to instead\n   *    keep some fixed offset distance, to decide when to call `loadMore` or `loadMoreRecent`.\n   *\n   * We are still gonna keep the optimization, which react-native does - only call onEndReached\n   * once per content length.\n   */\n\n  /**\n   * 1. Makes a call to `loadMoreRecent` function, which queries more recent messages.\n   * 2. Ensures that we call `loadMoreRecent`, once per content length\n   * 3. If the call to `loadMore` is in progress, we wait for it to finish to make sure scroll doesn't jump.\n   */\n  const maybeCallOnStartReached = (limit?: number) => {\n    // If onStartReached has already been called for given data length, then ignore.\n    if (messageList?.length && onStartReachedTracker.current[messageList.length]) {\n      return;\n    }\n\n    if (messageList?.length) {\n      onStartReachedTracker.current[messageList.length] = true;\n    }\n\n    const callback = () => {\n      onStartReachedInPromise.current = null;\n\n      return Promise.resolve();\n    };\n\n    const onError = () => {\n      /** Release the onStartReached trigger after 2 seconds, to try again */\n      setTimeout(() => {\n        onStartReachedTracker.current = {};\n      }, 2000);\n    };\n\n    // If onEndReached is in progress, better to wait for it to finish for smooth UX\n    if (onEndReachedInPromise.current) {\n      onEndReachedInPromise.current.finally(() => {\n        onStartReachedInPromise.current = loadMoreRecent(limit).then(callback).catch(onError);\n      });\n    } else {\n      onStartReachedInPromise.current = loadMoreRecent(limit).then(callback).catch(onError);\n    }\n  };\n\n  /**\n   * 1. Makes a call to `loadMore` function, which queries more older messages.\n   * 2. Ensures that we call `loadMore`, once per content length\n   * 3. If the call to `loadMoreRecent` is in progress, we wait for it to finish to make sure scroll doesn't jump.\n   */\n  const maybeCallOnEndReached = () => {\n    // If onEndReached has already been called for given messageList length, then ignore.\n    if (messageList?.length && onEndReachedTracker.current[messageList.length]) {\n      return;\n    }\n\n    if (messageList?.length) {\n      onEndReachedTracker.current[messageList.length] = true;\n    }\n\n    const callback = () => {\n      onEndReachedInPromise.current = null;\n      return Promise.resolve();\n    };\n\n    const onError = () => {\n      /** Release the onEndReachedTracker trigger after 2 seconds, to try again */\n      setTimeout(() => {\n        onEndReachedTracker.current = {};\n      }, 2000);\n    };\n\n    // If onStartReached is in progress, better to wait for it to finish for smooth UX\n    if (onStartReachedInPromise.current) {\n      onStartReachedInPromise.current.finally(() => {\n        onEndReachedInPromise.current = (threadList ? loadMoreThread() : loadMore())\n          .then(callback)\n          .catch(onError);\n      });\n    } else {\n      onEndReachedInPromise.current = (threadList ? loadMoreThread() : loadMore())\n        .then(callback)\n        .catch(onError);\n    }\n  };\n\n  /**\n   * Following if condition covers following cases:\n   * 1. If I scroll up -> show scrollToBottom button.\n   * 2. If I scroll to bottom of screen\n   *    |-> hide scrollToBottom button.\n   *    |-> if channel is unread, call markRead().\n   */\n  const handleScroll: ScrollViewProps['onScroll'] = (event) => {\n    if (!channel || !initialScrollSet.current || !channelResyncScrollSet.current) {\n      return;\n    }\n\n    const offset = event.nativeEvent.contentOffset.y;\n    const visibleLength = event.nativeEvent.layoutMeasurement.height;\n    const contentLength = event.nativeEvent.contentSize.height;\n    // Check if scroll has reached either start of end of list.\n    const isScrollAtStart = offset < 100;\n    const isScrollAtEnd = contentLength - visibleLength - offset < 100;\n\n    if (isScrollAtStart) {\n      maybeCallOnStartReached();\n    }\n\n    if (isScrollAtEnd) {\n      maybeCallOnEndReached();\n    }\n\n    // Show scrollToBottom button once scroll position goes beyond 300.\n    const isScrollAtBottom = offset <= 300;\n    const showScrollToBottomButton = !isScrollAtBottom || !channel?.state.isUpToDate;\n\n    const shouldMarkRead =\n      !threadList && offset <= 0 && channel?.state.isUpToDate && channel.countUnread() > 0;\n\n    if (shouldMarkRead) {\n      markRead();\n    }\n\n    if (showScrollToBottomButton && !scrollToBottomButtonVisible) {\n      setScrollToBottomButtonVisible(true);\n    } else if (!showScrollToBottomButton && scrollToBottomButtonVisible) {\n      setScrollToBottomButtonVisible(false);\n    }\n\n    if (onListScroll) {\n      onListScroll(event);\n    }\n  };\n\n  const goToNewMessages = async () => {\n    if (!channel?.state.isUpToDate) {\n      resetPaginationTrackers();\n\n      await reloadChannel();\n    } else if (flatListRef.current) {\n      flatListRef.current.scrollToOffset({\n        offset: 0,\n      });\n    }\n\n    setScrollToBottomButtonVisible(false);\n    if (!threadList) {\n      markRead();\n    }\n  };\n\n  const goToMessage = useCallback(\n    (messageId: string) => {\n      const indexOfParentInMessageList = messageList.findIndex(\n        (message) => message?.id === messageId,\n      );\n\n      if (indexOfParentInMessageList > -1) {\n        try {\n          if (flatListRef.current) {\n            flatListRef.current.scrollToIndex({\n              index: indexOfParentInMessageList,\n              viewPosition: 0.5,\n            });\n            setTargetedMessage(messageId);\n\n            return;\n          }\n        } catch (_) {\n          // do nothing;\n        }\n      }\n\n      loadChannelAtMessage({ messageId });\n      resetPaginationTrackers();\n    },\n    [messageListLengthAfterUpdate],\n  );\n\n  const messagesWithImages =\n    legacyImageViewerSwipeBehaviour &&\n    messageList.filter((message) => {\n      const isMessageTypeDeleted = message.type === 'deleted';\n      if (!isMessageTypeDeleted && message.attachments) {\n        return message.attachments.some(\n          (attachment) =>\n            attachment.type === 'image' &&\n            !attachment.title_link &&\n            !attachment.og_scrape_url &&\n            (attachment.image_url || attachment.thumb_url),\n        );\n      }\n      return false;\n    });\n\n  /**\n   * This is for the useEffect to run again in the case that a message\n   * gets edited with more or the same number of images\n   */\n  const imageString =\n    legacyImageViewerSwipeBehaviour &&\n    messagesWithImages &&\n    messagesWithImages\n      .map((message) =>\n        message.attachments\n          ?.map((attachment) => attachment.image_url || attachment.thumb_url || '')\n          .join(),\n      )\n      .join();\n\n  const numberOfMessagesWithImages =\n    legacyImageViewerSwipeBehaviour && messagesWithImages && messagesWithImages.length;\n  const threadExists = !!thread;\n\n  useEffect(() => {\n    if (\n      legacyImageViewerSwipeBehaviour &&\n      isListActive &&\n      ((threadList && thread) || (!threadList && !thread))\n    ) {\n      setImages(messagesWithImages as MessageType<StreamChatGenerics>[]);\n    }\n  }, [\n    imageString,\n    isListActive,\n    legacyImageViewerSwipeBehaviour,\n    numberOfMessagesWithImages,\n    threadExists,\n    threadList,\n  ]);\n\n  const stickyHeaderFormatDate =\n    stickyHeaderDate?.getFullYear() === new Date().getFullYear() ? 'MMM D' : 'MMM D, YYYY';\n  const tStickyHeaderDate =\n    stickyHeaderDate && !hideStickyDateHeader ? tDateTimeParser(stickyHeaderDate) : null;\n  const stickyHeaderDateToRender =\n    tStickyHeaderDate === null || hideStickyDateHeader\n      ? null\n      : isDayOrMoment(tStickyHeaderDate)\n      ? tStickyHeaderDate.format(stickyHeaderFormatDate)\n      : new Date(tStickyHeaderDate).toDateString();\n\n  const dismissImagePicker = () => {\n    if (!hasMoved && selectedPicker) {\n      setSelectedPicker(undefined);\n      closePicker();\n    }\n  };\n  const onScrollBeginDrag = () => !hasMoved && selectedPicker && setHasMoved(true);\n  const onScrollEndDrag = () => hasMoved && selectedPicker && setHasMoved(false);\n\n  const refCallback = (ref: FlatListType<MessageType<StreamChatGenerics>>) => {\n    flatListRef.current = ref;\n\n    if (setFlatListRef) {\n      setFlatListRef(ref);\n    }\n  };\n  const renderListEmptyComponent = () => (\n    <View style={[styles.flex, styles.invert]} testID='empty-state'>\n      <EmptyStateIndicator listType='message' />\n    </View>\n  );\n\n  if (!FlatList) return null;\n\n  if (loading) {\n    return (\n      <View style={styles.flex}>\n        <LoadingIndicator listType='message' />\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, { backgroundColor: white_snow }, container]}\n      testID='message-flat-list-wrapper'\n    >\n      <FlatList\n        contentContainerStyle={[styles.contentContainer, contentContainer]}\n        data={messageList}\n        /** Disables the MessageList UI. Which means, message actions, reactions won't work. */\n        extraData={disabled || !channel?.state.isUpToDate}\n        inverted={inverted}\n        keyboardShouldPersistTaps='handled'\n        keyExtractor={keyExtractor}\n        ListEmptyComponent={renderListEmptyComponent}\n        ListFooterComponent={FooterComponent}\n        ListHeaderComponent={HeaderComponent}\n        maintainVisibleContentPosition={{\n          autoscrollToTopThreshold: autoscrollToTop ? 10 : undefined,\n          minIndexForVisible: 1,\n        }}\n        onScroll={handleScroll}\n        onScrollBeginDrag={onScrollBeginDrag}\n        onScrollEndDrag={onScrollEndDrag}\n        onTouchEnd={dismissImagePicker}\n        onViewableItemsChanged={onViewableItemsChanged.current}\n        ref={refCallback}\n        renderItem={renderItem}\n        scrollEnabled={overlay === 'none'}\n        style={[styles.listContainer, listContainer]}\n        testID='message-flat-list'\n        viewabilityConfig={flatListViewabilityConfig}\n        {...additionalFlatListProps}\n      />\n      {!loading && (\n        <>\n          <View style={styles.stickyHeader}>\n            {stickyHeaderDateToRender &&\n              (StickyHeader ? (\n                <StickyHeader dateString={stickyHeaderDateToRender} />\n              ) : messageListLengthAfterUpdate ? (\n                <DateHeader dateString={stickyHeaderDateToRender} />\n              ) : null)}\n          </View>\n          {!disableTypingIndicator && TypingIndicator && (\n            <TypingIndicatorContainer>\n              <TypingIndicator />\n            </TypingIndicatorContainer>\n          )}\n          <ScrollToBottomButton\n            onPress={goToNewMessages}\n            showNotification={scrollToBottomButtonVisible}\n            unreadCount={threadList ? 0 : channel?.countUnread()}\n          />\n        </>\n      )}\n      <NetworkDownIndicator />\n    </View>\n  );\n};\n\nexport type MessageListProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<MessageListPropsWithContext<StreamChatGenerics>>;\n\nexport const MessageList = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageListProps<StreamChatGenerics>,\n) => {\n  const { closePicker, selectedPicker, setSelectedPicker } = useAttachmentPickerContext();\n  const {\n    channel,\n    disabled,\n    EmptyStateIndicator,\n    enableMessageGroupingByUser,\n    error,\n    hideStickyDateHeader,\n    isChannelActive,\n    loadChannelAtMessage,\n    loading,\n    LoadingIndicator,\n    markRead,\n    NetworkDownIndicator,\n    reloadChannel,\n    scrollToFirstUnreadThreshold,\n    setTargetedMessage,\n    StickyHeader,\n    targetedMessage,\n  } = useChannelContext<StreamChatGenerics>();\n  const { client } = useChatContext<StreamChatGenerics>();\n  const { setImages } = useImageGalleryContext<StreamChatGenerics>();\n  const {\n    DateHeader,\n    deletedMessagesVisibilityType,\n    disableTypingIndicator,\n    FlatList,\n    initialScrollToFirstUnreadMessage,\n    InlineDateSeparator,\n    InlineUnreadIndicator,\n    legacyImageViewerSwipeBehaviour,\n    Message,\n    MessageSystem,\n    myMessageTheme,\n    ScrollToBottomButton,\n    TypingIndicator,\n    TypingIndicatorContainer,\n  } = useMessagesContext<StreamChatGenerics>();\n  const { loadMore, loadMoreRecent } = usePaginatedMessageListContext<StreamChatGenerics>();\n  const { overlay } = useOverlayContext();\n  const { loadMoreThread, thread } = useThreadContext<StreamChatGenerics>();\n  const { t, tDateTimeParser } = useTranslationContext();\n\n  return (\n    <MessageListWithContext\n      {...{\n        channel,\n        client,\n        closePicker,\n        DateHeader,\n        deletedMessagesVisibilityType,\n        disabled,\n        disableTypingIndicator,\n        EmptyStateIndicator,\n        enableMessageGroupingByUser,\n        error,\n        FlatList,\n        hideStickyDateHeader,\n        initialScrollToFirstUnreadMessage,\n        InlineDateSeparator,\n        InlineUnreadIndicator,\n        isListActive: isChannelActive,\n        legacyImageViewerSwipeBehaviour,\n        loadChannelAtMessage,\n        loading,\n        LoadingIndicator,\n        loadMore,\n        loadMoreRecent,\n        loadMoreThread,\n        markRead,\n        Message,\n        MessageSystem,\n        myMessageTheme,\n        NetworkDownIndicator,\n        overlay,\n        reloadChannel,\n        ScrollToBottomButton,\n        scrollToFirstUnreadThreshold,\n        selectedPicker,\n        setImages,\n        setSelectedPicker,\n        setTargetedMessage,\n        StickyHeader,\n        t,\n        targetedMessage,\n        tDateTimeParser,\n        thread,\n        TypingIndicator,\n        TypingIndicatorContainer,\n      }}\n      {...props}\n      noGroupByUser={!enableMessageGroupingByUser || props.noGroupByUser}\n    />\n  );\n};\n"]}