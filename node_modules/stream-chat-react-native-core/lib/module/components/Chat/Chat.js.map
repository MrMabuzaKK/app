{"version":3,"sources":["Chat.tsx"],"names":["ChatWithContext","props","children","client","closeConnectionOnBackground","i18nInstance","style","channel","setChannel","t","key","tDateTimeParser","input","translators","setTranslators","loadingTranslators","connectionRecovering","isOnline","mutedUsers","setUserAgent","SDK","Platform","OS","version","recoverStateOnReconnect","setActiveChannel","newChannel","appSettings","chatContext","Chat"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport { Platform } from 'react-native';\n\nimport Dayjs from 'dayjs';\n\nimport type { Channel } from 'stream-chat';\n\nimport { useAppSettings } from './hooks/useAppSettings';\nimport { useCreateChatContext } from './hooks/useCreateChatContext';\nimport { useIsOnline } from './hooks/useIsOnline';\nimport { useMutedUsers } from './hooks/useMutedUsers';\n\nimport { ChatContextValue, ChatProvider } from '../../contexts/chatContext/ChatContext';\nimport { useOverlayContext } from '../../contexts/overlayContext/OverlayContext';\nimport { DeepPartial, ThemeProvider } from '../../contexts/themeContext/ThemeContext';\nimport type { Theme } from '../../contexts/themeContext/utils/theme';\nimport {\n  TranslationContextValue,\n  TranslationProvider,\n} from '../../contexts/translationContext/TranslationContext';\nimport { useStreami18n } from '../../hooks/useStreami18n';\nimport init from '../../init';\n\nimport { SDK } from '../../native';\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport type { Streami18n } from '../../utils/Streami18n';\nimport { version } from '../../version.json';\n\ninit();\n\nexport type ChatProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<ChatContextValue<StreamChatGenerics>, 'client'> & {\n  /**\n   * When false, ws connection won't be disconnection upon backgrounding the app.\n   * To receive push notifications, its necessary that user doesn't have active\n   * websocket connection. So by default, we disconnect websocket connection when\n   * app goes to background, and reconnect when app comes to foreground.\n   */\n  closeConnectionOnBackground?: boolean;\n  /**\n   * Instance of Streami18n class should be provided to Chat component to enable internationalization.\n   *\n   * Stream provides following list of in-built translations:\n   * 1. English (en)\n   * 2. Dutch (nl)\n   * 3. ...\n   * 4. ...\n   *\n   * Simplest way to start using chat components in one of the in-built languages would be following:\n   *\n   * ```\n   * const i18n = new Streami18n('nl');\n   * <Chat client={chatClient} i18nInstance={i18n}>\n   *  ...\n   * </Chat>\n   * ```\n   *\n   * If you would like to override certain keys in in-built translation.\n   * UI will be automatically updated in this case.\n   *\n   * ```\n   * const i18n = new Streami18n('nl');\n   *\n   * i18n.registerTranslation('nl', {\n   *  'Nothing yet...': 'Nog Niet ...',\n   *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',\n   * });\n   *\n   * <Chat client={chatClient} i18nInstance={i18n}>\n   *  ...\n   * </Chat>\n   * ```\n   *\n   * You can use the same function to add whole new language.\n   *\n   * ```\n   * const i18n = new Streami18n('it');\n   *\n   * i18n.registerTranslation('it', {\n   *  'Nothing yet...': 'Non ancora ...',\n   *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} a {{ secondUser }} stanno scrivendo...',\n   * });\n   *\n   * // Make sure to call setLanguage to reflect new language in UI.\n   * i18n.setLanguage('it');\n   * <Chat client={chatClient} i18nInstance={i18n}>\n   *  ...\n   * </Chat>\n   * ```\n   */\n  i18nInstance?: Streami18n;\n  /**\n   * You can pass the theme object to customize the styles of Chat components. You can check the default theme in [theme.ts](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/contexts/themeContext/utils/theme.ts)\n   *\n   * Please check section about [themes in cookbook](https://github.com/GetStream/stream-chat-react-native/wiki/Cookbook-v3.0#theme) for details.\n   *\n   * ```\n   * import type { DeepPartial, Theme } from 'stream-chat-react-native';\n   *\n   * const theme: DeepPartial<Theme> = {\n   *   messageSimple: {\n   *     file: {\n   *       container: {\n   *         backgroundColor: 'red',\n   *       },\n   *       icon: {\n   *         height: 16,\n   *         width: 16,\n   *       },\n   *     },\n   *   },\n   * };\n   *\n   * <Chat style={theme}>\n   * </Chat>\n   * ```\n   *\n   * @overrideType object\n   */\n  style?: DeepPartial<Theme>;\n};\n\nconst ChatWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: PropsWithChildren<ChatProps<StreamChatGenerics>>,\n) => {\n  const { children, client, closeConnectionOnBackground = true, i18nInstance, style } = props;\n\n  const [channel, setChannel] = useState<Channel<StreamChatGenerics>>();\n  const [translators, setTranslators] = useState<TranslationContextValue>({\n    t: (key: string) => key,\n    tDateTimeParser: (input?: string | number | Date) => Dayjs(input),\n  });\n\n  /**\n   * Setup translators\n   */\n  const loadingTranslators = useStreami18n({ i18nInstance, setTranslators });\n\n  /**\n   * Setup connection event listeners\n   */\n  const { connectionRecovering, isOnline } = useIsOnline<StreamChatGenerics>(\n    client,\n    closeConnectionOnBackground,\n  );\n\n  /**\n   * Setup muted user listener\n   */\n  const mutedUsers = useMutedUsers<StreamChatGenerics>(client);\n\n  useEffect(() => {\n    if (client.setUserAgent) {\n      client.setUserAgent(`${SDK}-${Platform.OS}-${version}`);\n      // This is to disable recovery related logic in js client, since we handle it in this SDK\n      client.recoverStateOnReconnect = false;\n    }\n  }, []);\n\n  const setActiveChannel = (newChannel?: Channel<StreamChatGenerics>) => setChannel(newChannel);\n\n  const appSettings = useAppSettings(client, isOnline);\n\n  const chatContext = useCreateChatContext({\n    appSettings,\n    channel,\n    client,\n    connectionRecovering,\n    isOnline,\n    mutedUsers,\n    setActiveChannel,\n  });\n\n  if (loadingTranslators) return null;\n\n  return (\n    <ChatProvider<StreamChatGenerics> value={chatContext}>\n      <TranslationProvider value={translators}>\n        <ThemeProvider style={style}>{children}</ThemeProvider>\n      </TranslationProvider>\n    </ChatProvider>\n  );\n};\n\n/**\n * Chat - Wrapper component for Chat. The needs to be placed around any other chat components.\n * This Chat component provides the ChatContext to all other components.\n *\n * The ChatContext provides the following props:\n *\n * - channel - currently active channel\n * - client - client connection\n * - connectionRecovering - whether or not websocket is reconnecting\n * - isOnline - whether or not set user is active\n * - setActiveChannel - function to set the currently active channel\n *\n * The Chat Component takes the following generics in order:\n * - At (AttachmentType) - custom Attachment object extension\n * - Ct (ChannelType) - custom Channel object extension\n * - Co (CommandType) - custom Command string union extension\n * - Ev (EventType) - custom Event object extension\n * - Me (MessageType) - custom Message object extension\n * - Re (ReactionType) - custom Reaction object extension\n * - Us (UserType) - custom User object extension\n */\nexport const Chat = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: PropsWithChildren<ChatProps<StreamChatGenerics>>,\n) => {\n  const { style } = useOverlayContext();\n\n  return <ChatWithContext {...{ style }} {...props} />;\n};\n"]}