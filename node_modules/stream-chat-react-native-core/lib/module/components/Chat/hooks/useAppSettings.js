var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAppSettings = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var useAppSettings = function useAppSettings(client, isOnline) {
  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      appSettings = _useState2[0],
      setAppSettings = _useState2[1];

  var isMounted = (0, _react.useRef)(true);
  (0, _react.useEffect)(function () {
    function getAppSettings() {
      return _getAppSettings.apply(this, arguments);
    }

    function _getAppSettings() {
      _getAppSettings = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
        var _appSettings;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return client.getAppSettings();

              case 3:
                _appSettings = _context.sent;

                if (isMounted.current) {
                  setAppSettings(_appSettings);
                }

                _context.next = 10;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);

                if (_context.t0 instanceof Error) {
                  console.error("An error occurred while getting app settings: " + _context.t0);
                }

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 7]]);
      }));
      return _getAppSettings.apply(this, arguments);
    }

    if (isOnline) {
      getAppSettings();
    }

    return function () {
      isMounted.current = false;
    };
  }, [client, isOnline]);
  return appSettings;
};

exports.useAppSettings = useAppSettings;
//# sourceMappingURL=useAppSettings.js.map