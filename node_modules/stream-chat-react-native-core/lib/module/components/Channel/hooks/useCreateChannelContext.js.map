{"version":3,"sources":["useCreateChannelContext.ts"],"names":["useCreateChannelContext","channel","disabled","EmptyStateIndicator","enableMessageGroupingByUser","enforceUniqueReaction","error","giphyEnabled","hideDateSeparators","hideStickyDateHeader","isAdmin","isChannelActive","isModerator","isOwner","lastRead","loadChannelAtMessage","loading","LoadingIndicator","markRead","maxTimeBetweenGroupedMessages","members","NetworkDownIndicator","read","reloadChannel","scrollToFirstUnreadThreshold","setLastRead","setTargetedMessage","StickyHeader","targetedMessage","threadList","watcherCount","watchers","channelId","id","lastReadTime","getTime","membersLength","Object","keys","length","readUsers","values","readUsersLength","readUsersLastReads","map","last_read","toISOString","join","channelContext"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\n\nimport type { ChannelContextValue } from '../../../contexts/channelContext/ChannelContext';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\nexport const useCreateChannelContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  channel,\n  disabled,\n  EmptyStateIndicator,\n  enableMessageGroupingByUser,\n  enforceUniqueReaction,\n  error,\n  giphyEnabled,\n  hideDateSeparators,\n  hideStickyDateHeader,\n  isAdmin,\n  isChannelActive,\n  isModerator,\n  isOwner,\n  lastRead,\n  loadChannelAtMessage,\n  loading,\n  LoadingIndicator,\n  markRead,\n  maxTimeBetweenGroupedMessages,\n  members,\n  NetworkDownIndicator,\n  read,\n  reloadChannel,\n  scrollToFirstUnreadThreshold,\n  setLastRead,\n  setTargetedMessage,\n  StickyHeader,\n  targetedMessage,\n  threadList,\n  watcherCount,\n  watchers,\n}: ChannelContextValue<StreamChatGenerics>) => {\n  const channelId = channel?.id;\n  const lastReadTime = lastRead?.getTime();\n  const membersLength = Object.keys(members).length;\n\n  const readUsers = Object.values(read);\n  const readUsersLength = readUsers.length;\n  const readUsersLastReads = readUsers.map(({ last_read }) => last_read.toISOString()).join();\n\n  const channelContext: ChannelContextValue<StreamChatGenerics> = useMemo(\n    () => ({\n      channel,\n      disabled,\n      EmptyStateIndicator,\n      enableMessageGroupingByUser,\n      enforceUniqueReaction,\n      error,\n      giphyEnabled,\n      hideDateSeparators,\n      hideStickyDateHeader,\n      isAdmin,\n      isChannelActive,\n      isModerator,\n      isOwner,\n      lastRead,\n      loadChannelAtMessage,\n      loading,\n      LoadingIndicator,\n      markRead,\n      maxTimeBetweenGroupedMessages,\n      members,\n      NetworkDownIndicator,\n      read,\n      reloadChannel,\n      scrollToFirstUnreadThreshold,\n      setLastRead,\n      setTargetedMessage,\n      StickyHeader,\n      targetedMessage,\n      threadList,\n      watcherCount,\n      watchers,\n    }),\n    [\n      channelId,\n      disabled,\n      error,\n      isChannelActive,\n      lastReadTime,\n      loading,\n      membersLength,\n      readUsersLength,\n      readUsersLastReads,\n      targetedMessage,\n      threadList,\n      watcherCount,\n    ],\n  );\n\n  return channelContext;\n};\n"]}