{"version":3,"sources":["useImageGalleryGestures.tsx"],"names":["HasPinched","IsSwiping","MARGIN","useImageGalleryGestures","currentImageHeight","halfScreenHeight","halfScreenWidth","headerFooterVisible","offsetScale","overlayOpacity","photoLength","scale","screenHeight","screenWidth","setSelectedIndex","translateX","translateY","translationX","setOverlay","isAndroid","Platform","OS","hasHitBottomScale","hasHitTopScale","originX","originY","oldFocalX","oldFocalY","focalX","focalY","index","offsetX","offsetY","focalOffsetX","focalOffsetY","adjustedFocalX","adjustedFocalY","tapX","tapY","numberOfPinchFingers","isSwiping","isPinch","hasPinched","resetTouchValues","value","UNDETERMINED","resetMovementValues","onPan","onActive","evt","numberOfPointers","TRUE","FALSE","translationY","maxXYRatio","Math","abs","localEvtScale","onFinish","finalXPosition","velocityX","finalYPosition","velocityY","duration","easing","Easing","out","ease","clamp","deceleration","velocity","onStart","onPinch","triggerHaptic","onSingleTap","onDoubleTap","absoluteX","absoluteY","translateYTopBottom","lowerBound","upperBound","min","max"],"mappings":";;;;;AAAA;;AAMA;;AAWA;;AACA;;IAEYA,U;;;WAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,0BAAAA,U;;IAKAC,S;;;WAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,yBAAAA,S;;AAMZ,IAAMC,MAAM,GAAG,EAAf;;AAEO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,OA8BjC;AAAA,MA7BJC,kBA6BI,QA7BJA,kBA6BI;AAAA,MA5BJC,gBA4BI,QA5BJA,gBA4BI;AAAA,MA3BJC,eA2BI,QA3BJA,eA2BI;AAAA,MA1BJC,mBA0BI,QA1BJA,mBA0BI;AAAA,MAzBJC,WAyBI,QAzBJA,WAyBI;AAAA,MAxBJC,cAwBI,QAxBJA,cAwBI;AAAA,MAvBJC,WAuBI,QAvBJA,WAuBI;AAAA,MAtBJC,KAsBI,QAtBJA,KAsBI;AAAA,MArBJC,YAqBI,QArBJA,YAqBI;AAAA,MApBJC,WAoBI,QApBJA,WAoBI;AAAA,MAnBJC,gBAmBI,QAnBJA,gBAmBI;AAAA,MAlBJC,UAkBI,QAlBJA,UAkBI;AAAA,MAjBJC,UAiBI,QAjBJA,UAiBI;AAAA,MAhBJC,YAgBI,QAhBJA,YAgBI;;AACJ,2BAAuB,wCAAvB;AAAA,MAAQC,UAAR,sBAAQA,UAAR;;AACA,MAAMC,SAAS,GAAGC,sBAASC,EAAT,KAAgB,SAAlC;AAKA,MAAMC,iBAAiB,GAAG,2CAAe,CAAf,CAA1B;AACA,MAAMC,cAAc,GAAG,2CAAe,CAAf,CAAvB;AAKA,MAAMC,OAAO,GAAG,2CAAe,CAAf,CAAhB;AACA,MAAMC,OAAO,GAAG,2CAAe,CAAf,CAAhB;AACA,MAAMC,SAAS,GAAG,2CAAe,CAAf,CAAlB;AACA,MAAMC,SAAS,GAAG,2CAAe,CAAf,CAAlB;AACA,MAAMC,MAAM,GAAG,2CAAe,CAAf,CAAf;AACA,MAAMC,MAAM,GAAG,2CAAe,CAAf,CAAf;AACA,MAAMC,KAAK,GAAG,2CAAe,CAAf,CAAd;AAKA,MAAMC,OAAO,GAAG,2CAAe,CAAf,CAAhB;AACA,MAAMC,OAAO,GAAG,2CAAe,CAAf,CAAhB;AAKA,MAAMC,YAAY,GAAG,2CAAe,CAAf,CAArB;AACA,MAAMC,YAAY,GAAG,2CAAe,CAAf,CAArB;AACA,MAAMC,cAAc,GAAG,2CAAe,CAAf,CAAvB;AACA,MAAMC,cAAc,GAAG,2CAAe,CAAf,CAAvB;AACA,MAAMC,IAAI,GAAG,2CAAe,CAAf,CAAb;AACA,MAAMC,IAAI,GAAG,2CAAe,CAAf,CAAb;AAKA,MAAMC,oBAAoB,GAAG,2CAAe,CAAf,CAA7B;AACA,MAAMC,SAAS,GAAG,2CAAe,CAAf,CAAlB;AACA,MAAMC,OAAO,GAAG,2CAAe,KAAf,CAAhB;AACA,MAAMC,UAAU,GAAG,2CAAe,CAAf,CAAnB;;AAKA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B;;AACAf,IAAAA,MAAM,CAACgB,KAAP,GAAe,CAAf;AACAf,IAAAA,MAAM,CAACe,KAAP,GAAe,CAAf;AACAlB,IAAAA,SAAS,CAACkB,KAAV,GAAkB,CAAlB;AACAjB,IAAAA,SAAS,CAACiB,KAAV,GAAkB,CAAlB;AACApB,IAAAA,OAAO,CAACoB,KAAR,GAAgB,CAAhB;AACAnB,IAAAA,OAAO,CAACmB,KAAR,GAAgB,CAAhB;AACAX,IAAAA,YAAY,CAACW,KAAb,GAAqB,CAArB;AACAV,IAAAA,YAAY,CAACU,KAAb,GAAqB,CAArB;AACAL,IAAAA,oBAAoB,CAACK,KAArB,GAA6B,CAA7B;AACAH,IAAAA,OAAO,CAACG,KAAR,GAAgB,KAAhB;AACAJ,IAAAA,SAAS,CAACI,KAAV,GAAkB3C,SAAS,CAAC4C,YAA5B;AACD,GAbD;;AAkBA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC;;AACA/B,IAAAA,UAAU,CAAC6B,KAAX,GAAmB,CAAnB;AACA5B,IAAAA,UAAU,CAAC4B,KAAX,GAAmB,CAAnB;AACAjC,IAAAA,KAAK,CAACiC,KAAN,GAAc,CAAd;AACApC,IAAAA,WAAW,CAACoC,KAAZ,GAAoB,CAApB;AACD,GAND;;AAcA,MAAMG,KAAK,GAAG,sDACZ;AACEC,IAAAA,QAAQ,EAAE,kBAACC,GAAD,EAAS;AACjB,UAAIA,GAAG,CAACC,gBAAJ,KAAyB,CAAzB,IAA8B,CAACT,OAAO,CAACG,KAA3C,EAAkD;AAMhD,YAAIzB,SAAS,IAAIuB,UAAU,CAACE,KAAX,KAAqB5C,UAAU,CAACmD,IAAjD,EAAuD;AACrDT,UAAAA,UAAU,CAACE,KAAX,GAAmB5C,UAAU,CAACoD,KAA9B;AACAZ,UAAAA,SAAS,CAACI,KAAV,GAAkB3C,SAAS,CAACmD,KAA5B;AACArB,UAAAA,OAAO,CAACa,KAAR,GAAgB7B,UAAU,CAAC6B,KAAX,GAAmBK,GAAG,CAAChC,YAAvC;AACAe,UAAAA,OAAO,CAACY,KAAR,GAAgB5B,UAAU,CAAC4B,KAAX,GAAmBK,GAAG,CAACI,YAAvC;AACD;;AAQD,YAAIb,SAAS,CAACI,KAAV,KAAoB3C,SAAS,CAAC4C,YAAlC,EAAgD;AAC9C,cAAMS,UAAU,GAAGnC,SAAS,GAAG,CAAH,GAAO,IAAnC;;AACA,cACEoC,IAAI,CAACC,GAAL,CAASP,GAAG,CAAChC,YAAJ,GAAmBgC,GAAG,CAACI,YAAhC,IAAgDC,UAAhD,KACCC,IAAI,CAACC,GAAL,CAAS,CAAClD,eAAD,IAAoBK,KAAK,CAACiC,KAAN,GAAc,CAAlC,IAAuCb,OAAO,CAACa,KAAxD,IAAiE,CAAjE,IACCW,IAAI,CAACC,GAAL,CAASlD,eAAe,IAAIK,KAAK,CAACiC,KAAN,GAAc,CAAlB,CAAf,GAAsCb,OAAO,CAACa,KAAvD,IAAgE,CAFlE,CADF,EAIE;AACAJ,YAAAA,SAAS,CAACI,KAAV,GAAkB3C,SAAS,CAACkD,IAA5B;AACD;;AACD,cAAII,IAAI,CAACC,GAAL,CAASP,GAAG,CAACI,YAAb,IAA6B,EAAjC,EAAqC;AACnCb,YAAAA,SAAS,CAACI,KAAV,GAAkB3C,SAAS,CAACmD,KAA5B;AACD;AACF;;AAKD,YAAMK,aAAa,GAAG9C,KAAK,CAACiC,KAAN,GAAcpC,WAAW,CAACoC,KAAhD;AASA7B,QAAAA,UAAU,CAAC6B,KAAX,GACEjC,KAAK,CAACiC,KAAN,KAAgBpC,WAAW,CAACoC,KAA5B,GACIb,OAAO,CAACa,KAAR,GAAgBa,aAAhB,GAAgCR,GAAG,CAAChC,YADxC,GAEIc,OAAO,CAACa,KAAR,GAAgBK,GAAG,CAAChC,YAH1B;AAIAD,QAAAA,UAAU,CAAC4B,KAAX,GACEJ,SAAS,CAACI,KAAV,KAAoB3C,SAAS,CAACkD,IAA9B,GACIxC,KAAK,CAACiC,KAAN,KAAgBpC,WAAW,CAACoC,KAA5B,GACEZ,OAAO,CAACY,KAAR,GAAgBa,aAAhB,GAAgCR,GAAG,CAACI,YADtC,GAEErB,OAAO,CAACY,KAAR,GAAgBK,GAAG,CAACI,YAH1B,GAIIrC,UAAU,CAAC4B,KALjB;AAWAjC,QAAAA,KAAK,CAACiC,KAAN,GACExC,kBAAkB,GAAGI,WAAW,CAACoC,KAAjC,GAAyChC,YAAzC,IAAyDI,UAAU,CAAC4B,KAAX,GAAmB,CAA5E,GACIpC,WAAW,CAACoC,KAAZ,IAAqB,IAAK,IAAI,CAAL,IAAW5B,UAAU,CAAC4B,KAAX,GAAmBhC,YAA9B,CAAzB,CADJ,GAEIR,kBAAkB,GAAGI,WAAW,CAACoC,KAAjC,GAAyChC,YAAzC,IACAI,UAAU,CAAC4B,KAAX,GAAoBxC,kBAAkB,GAAG,CAAtB,GAA2BI,WAAW,CAACoC,KAAvC,GAA+CvC,gBADlE,GAEAG,WAAW,CAACoC,KAAZ,IACC,IACE,IAAI,CAAL,IACG,CAAC5B,UAAU,CAAC4B,KAAX,IACExC,kBAAkB,GAAG,CAAtB,GAA2BI,WAAW,CAACoC,KAAvC,GAA+CvC,gBADhD,CAAD,IAECO,YAHJ,CAFF,CAFA,GAQAD,KAAK,CAACiC,KAXZ;AAaAnC,QAAAA,cAAc,CAACmC,KAAf,GAAuBa,aAAvB;AACD;AACF,KA7EH;AA8EEC,IAAAA,QAAQ,EAAE,kBAACT,GAAD,EAAS;AACjB,UAAI,CAACR,OAAO,CAACG,KAAT,IAAkBK,GAAG,CAACC,gBAAJ,GAAuB,CAA7C,EAAgD;AAM9C,YAAMS,cAAc,GAAGV,GAAG,CAAChC,YAAJ,GAAmBgC,GAAG,CAACW,SAAJ,GAAgB,GAA1D;AACA,YAAMC,cAAc,GAAGZ,GAAG,CAACI,YAAJ,GAAmBJ,GAAG,CAACa,SAAJ,GAAgB,GAA1D;;AAOA,YACEhC,KAAK,CAACc,KAAN,GAAclC,WAAW,GAAG,CAA5B,IACA6C,IAAI,CAACC,GAAL,CAASlD,eAAe,IAAIK,KAAK,CAACiC,KAAN,GAAc,CAAlB,CAAf,GAAsCb,OAAO,CAACa,KAAvD,IAAgE,CADhE,IAEA7B,UAAU,CAAC6B,KAAX,GAAmB,CAFnB,IAGAe,cAAc,GAAG,CAACrD,eAHlB,IAIAkC,SAAS,CAACI,KAAV,KAAoB3C,SAAS,CAACkD,IALhC,EAME;AACA,sDAAgBlC,YAAhB;AACAA,UAAAA,YAAY,CAAC2B,KAAb,GAAqB,uCACnB,EAAE/B,WAAW,GAAGX,MAAhB,KAA2B4B,KAAK,CAACc,KAAN,GAAc,CAAzC,CADmB,EAEnB;AACEmB,YAAAA,QAAQ,EAAE,GADZ;AAEEC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFV,WAFmB,EAMnB,YAAM;AACJrB,YAAAA,mBAAmB;AACnBhB,YAAAA,KAAK,CAACc,KAAN,GAAcd,KAAK,CAACc,KAAN,GAAc,CAA5B;AACA,gDAAQ9B,gBAAR,EAA0BgB,KAAK,CAACc,KAAhC;AACD,WAVkB,CAArB;AAkBD,SA1BD,MA0BO,IACLd,KAAK,CAACc,KAAN,GAAc,CAAd,IACAW,IAAI,CAACC,GAAL,CAAS,CAAClD,eAAD,IAAoBK,KAAK,CAACiC,KAAN,GAAc,CAAlC,IAAuCb,OAAO,CAACa,KAAxD,IAAiE,CADjE,IAEA7B,UAAU,CAAC6B,KAAX,GAAmB,CAFnB,IAGAe,cAAc,GAAGrD,eAHjB,IAIAkC,SAAS,CAACI,KAAV,KAAoB3C,SAAS,CAACkD,IALzB,EAML;AACA,sDAAgBlC,YAAhB;AACAA,UAAAA,YAAY,CAAC2B,KAAb,GAAqB,uCACnB,EAAE/B,WAAW,GAAGX,MAAhB,KAA2B4B,KAAK,CAACc,KAAN,GAAc,CAAzC,CADmB,EAEnB;AACEmB,YAAAA,QAAQ,EAAE,GADZ;AAEEC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFV,WAFmB,EAMnB,YAAM;AACJrB,YAAAA,mBAAmB;AACnBhB,YAAAA,KAAK,CAACc,KAAN,GAAcd,KAAK,CAACc,KAAN,GAAc,CAA5B;AACA,gDAAQ9B,gBAAR,EAA0BgB,KAAK,CAACc,KAAhC;AACD,WAVkB,CAArB;AAYD;;AASD7B,QAAAA,UAAU,CAAC6B,KAAX,GACEjC,KAAK,CAACiC,KAAN,GAAc,CAAd,GACI,uCAAW,CAAX,CADJ,GAEI7B,UAAU,CAAC6B,KAAX,GAAmBtC,eAAe,IAAIK,KAAK,CAACiC,KAAN,GAAc,CAAlB,CAAlC,GACA,uCAAWtC,eAAe,IAAIK,KAAK,CAACiC,KAAN,GAAc,CAAlB,CAA1B,EAAgD;AAC9CmB,UAAAA,QAAQ,EAAE;AADoC,SAAhD,CADA,GAIAhD,UAAU,CAAC6B,KAAX,GAAmB,CAACtC,eAAD,IAAoBK,KAAK,CAACiC,KAAN,GAAc,CAAlC,CAAnB,GACA,uCAAW,CAACtC,eAAD,IAAoBK,KAAK,CAACiC,KAAN,GAAc,CAAlC,CAAX,EAAiD;AAC/CmB,UAAAA,QAAQ,EAAE;AADqC,SAAjD,CADA,GAIA,sCAAU;AACRK,UAAAA,KAAK,EAAE,CACL,CAAC9D,eAAD,IAAoBK,KAAK,CAACiC,KAAN,GAAc,CAAlC,CADK,EAELtC,eAAe,IAAIK,KAAK,CAACiC,KAAN,GAAc,CAAlB,CAFV,CADC;AAKRyB,UAAAA,YAAY,EAAE,IALN;AAMRC,UAAAA,QAAQ,EAAE,CAACrB,GAAG,CAACW;AANP,SAAV,CAXN;AA2BA5C,QAAAA,UAAU,CAAC4B,KAAX,GACExC,kBAAkB,GAAGO,KAAK,CAACiC,KAA3B,GAAmChC,YAAnC,GACI,uCAAW,CAAX,CADJ,GAEII,UAAU,CAAC4B,KAAX,GAAoBxC,kBAAkB,GAAG,CAAtB,GAA2BO,KAAK,CAACiC,KAAjC,GAAyCvC,gBAA5D,GACA,uCAAYD,kBAAkB,GAAG,CAAtB,GAA2BO,KAAK,CAACiC,KAAjC,GAAyCvC,gBAApD,CADA,GAEAW,UAAU,CAAC4B,KAAX,GAAoB,CAACxC,kBAAD,GAAsB,CAAvB,GAA4BO,KAAK,CAACiC,KAAlC,GAA0CvC,gBAA7D,GACA,uCAAY,CAACD,kBAAD,GAAsB,CAAvB,GAA4BO,KAAK,CAACiC,KAAlC,GAA0CvC,gBAArD,CADA,GAEA,sCAAU;AACR+D,UAAAA,KAAK,EAAE,CACJ,CAAChE,kBAAD,GAAsB,CAAvB,GAA4BO,KAAK,CAACiC,KAAlC,GAA0CvC,gBADrC,EAEJD,kBAAkB,GAAG,CAAtB,GAA2BO,KAAK,CAACiC,KAAjC,GAAyCvC,gBAFpC,CADC;AAKRgE,UAAAA,YAAY,EAAE,IALN;AAMRC,UAAAA,QAAQ,EAAErB,GAAG,CAACa;AANN,SAAV,CAPN;AAgBAnB,QAAAA,gBAAgB;AAMhBhC,QAAAA,KAAK,CAACiC,KAAN,GACEjC,KAAK,CAACiC,KAAN,KAAgBpC,WAAW,CAACoC,KAA5B,GAAoC,uCAAWpC,WAAW,CAACoC,KAAvB,CAApC,GAAoEpC,WAAW,CAACoC,KADlF;;AASA,YACEiB,cAAc,GAAGxD,gBAAjB,IACA2B,OAAO,CAACY,KAAR,GAAgB,CAAhB,IAAsBxC,kBAAkB,GAAG,CAAtB,GAA2BO,KAAK,CAACiC,KAAjC,GAAyCvC,gBAD9D,IAEAmC,SAAS,CAACI,KAAV,KAAoB3C,SAAS,CAACkD,IAF9B,IAGAnC,UAAU,CAAC4B,KAAX,KAAqB,CAHrB,IAIA,EACEW,IAAI,CAACC,GAAL,CAASlD,eAAe,IAAIK,KAAK,CAACiC,KAAN,GAAc,CAAlB,CAAf,GAAsCb,OAAO,CAACa,KAAvD,IAAgE,CAAhE,IACA7B,UAAU,CAAC6B,KAAX,GAAmB,CADnB,IAEAe,cAAc,GAAG,CAACrD,eAHpB,CAJA,IASA,EACEiD,IAAI,CAACC,GAAL,CAAS,CAAClD,eAAD,IAAoBK,KAAK,CAACiC,KAAN,GAAc,CAAlC,IAAuCb,OAAO,CAACa,KAAxD,IAAiE,CAAjE,IACA7B,UAAU,CAAC6B,KAAX,GAAmB,CADnB,IAEAe,cAAc,GAAGrD,eAHnB,CAVF,EAeE;AACA,sDAAgBS,UAAhB;AACA,sDAAgBC,UAAhB;AACA,sDAAgBL,KAAhB;AACAF,UAAAA,cAAc,CAACmC,KAAf,GAAuB,uCACrB,CADqB,EAErB;AACEmB,YAAAA,QAAQ,EAAE,GADZ;AAEEC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFV,WAFqB,EAMrB,YAAM;AACJ,gDAAQjD,UAAR,EAAoB,MAApB;AACD,WARoB,CAAvB;AAUAP,UAAAA,KAAK,CAACiC,KAAN,GAAc,uCAAW,GAAX,EAAgB;AAC5BmB,YAAAA,QAAQ,EAAE,GADkB;AAE5BC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFoB,WAAhB,CAAd;AAIAnD,UAAAA,UAAU,CAAC4B,KAAX,GACEK,GAAG,CAACa,SAAJ,GAAgB,IAAhB,GACI,sCAAU;AACRQ,YAAAA,QAAQ,EAAErB,GAAG,CAACa;AADN,WAAV,CADJ,GAII,uCAAWzD,gBAAgB,GAAID,kBAAkB,GAAG,CAAtB,GAA2BO,KAAK,CAACiC,KAA/D,EAAsE;AACpEmB,YAAAA,QAAQ,EAAE,GAD0D;AAEpEC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAF4D,WAAtE,CALN;AASApD,UAAAA,UAAU,CAAC6B,KAAX,GAAmB,sCAAU;AAC3B0B,YAAAA,QAAQ,EAAE,CAACrB,GAAG,CAACW;AADY,WAAV,CAAnB;AAGD;AACF;AACF,KA7PH;AA8PEW,IAAAA,OAAO,EAAE,mBAAM;AACb,UAAI,CAAC9B,OAAO,CAACG,KAAb,EAAoB;AAKlB,oDAAgB7B,UAAhB;AACA,oDAAgBC,UAAhB;AACA,oDAAgBL,KAAhB;AACAoB,QAAAA,OAAO,CAACa,KAAR,GAAgB7B,UAAU,CAAC6B,KAA3B;AACAZ,QAAAA,OAAO,CAACY,KAAR,GAAgB5B,UAAU,CAAC4B,KAA3B;AACD;;AAKDF,MAAAA,UAAU,CAACE,KAAX,GAAmB5C,UAAU,CAACoD,KAA9B;AACD;AA/QH,GADY,EAkRZ,CAAChD,kBAAD,EAAqBM,WAArB,CAlRY,CAAd;AA0RA,MAAM8D,OAAO,GAAG,sDACd;AACExB,IAAAA,QAAQ,EAAE,kBAACC,GAAD,EAAS;AAMjB,UAAI,CAACR,OAAO,CAACG,KAAT,IAAkBzB,SAAtB,EAAiC;AAK/BuB,QAAAA,UAAU,CAACE,KAAX,GAAmB5C,UAAU,CAACmD,IAA9B;AAMA,oDAAgBpC,UAAhB;AACA,oDAAgBC,UAAhB;AACA,oDAAgBL,KAAhB;AAKA6B,QAAAA,SAAS,CAACI,KAAV,GAAkB3C,SAAS,CAAC4C,YAA5B;AAKAN,QAAAA,oBAAoB,CAACK,KAArB,GAA6BK,GAAG,CAACC,gBAAjC;AACAnB,QAAAA,OAAO,CAACa,KAAR,GAAgB7B,UAAU,CAAC6B,KAA3B;AACAZ,QAAAA,OAAO,CAACY,KAAR,GAAgB5B,UAAU,CAAC4B,KAA3B;AACAT,QAAAA,cAAc,CAACS,KAAf,GAAuBK,GAAG,CAACrB,MAAJ,IAActB,eAAe,GAAGyB,OAAO,CAACa,KAAxC,CAAvB;AACAR,QAAAA,cAAc,CAACQ,KAAf,GAAuBK,GAAG,CAACpB,MAAJ,IAAcxB,gBAAgB,GAAG2B,OAAO,CAACY,KAAzC,CAAvB;AACApB,QAAAA,OAAO,CAACoB,KAAR,GAAgBT,cAAc,CAACS,KAA/B;AACAnB,QAAAA,OAAO,CAACmB,KAAR,GAAgBR,cAAc,CAACQ,KAA/B;AACApC,QAAAA,WAAW,CAACoC,KAAZ,GAAoBjC,KAAK,CAACiC,KAA1B;AACD;;AAMDH,MAAAA,OAAO,CAACG,KAAR,GAAgB,IAAhB;AASAjC,MAAAA,KAAK,CAACiC,KAAN,GAAcwB,KAAK,CAAC5D,WAAW,CAACoC,KAAZ,GAAoBK,GAAG,CAACtC,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC,CAAnB;AACA,UAAM8C,aAAa,GAAG9C,KAAK,CAACiC,KAAN,GAAcpC,WAAW,CAACoC,KAAhD;;AAMA,UAAIjC,KAAK,CAACiC,KAAN,KAAgB,CAAhB,IAAqBjC,KAAK,CAACiC,KAAN,KAAgB,CAAzC,EAA4C;AAC1CrB,QAAAA,cAAc,CAACqB,KAAf,GAAuB,CAAvB;AACAtB,QAAAA,iBAAiB,CAACsB,KAAlB,GAA0B,CAA1B;AACD,OAHD,MAGO,IAAIjC,KAAK,CAACiC,KAAN,KAAgB,CAAhB,IAAqBrB,cAAc,CAACqB,KAAf,KAAyB,CAAlD,EAAqD;AAC1DrB,QAAAA,cAAc,CAACqB,KAAf,GAAuB,CAAvB;AACA,4CAAQ6B,qBAAR,EAAuB,aAAvB;AACD,OAHM,MAGA,IAAI9D,KAAK,CAACiC,KAAN,KAAgB,CAAhB,IAAqBtB,iBAAiB,CAACsB,KAAlB,KAA4B,CAArD,EAAwD;AAC7DtB,QAAAA,iBAAiB,CAACsB,KAAlB,GAA0B,CAA1B;AACA,4CAAQ6B,qBAAR,EAAuB,aAAvB;AACD;;AAMDtC,MAAAA,cAAc,CAACS,KAAf,GAAuBK,GAAG,CAACrB,MAAJ,IAActB,eAAe,GAAGyB,OAAO,CAACa,KAAxC,CAAvB;AACAR,MAAAA,cAAc,CAACQ,KAAf,GAAuBK,GAAG,CAACpB,MAAJ,IAAcxB,gBAAgB,GAAG2B,OAAO,CAACY,KAAzC,CAAvB;;AAaA,UAAIL,oBAAoB,CAACK,KAArB,KAA+BK,GAAG,CAACC,gBAAvC,EAAyD;AACvDX,QAAAA,oBAAoB,CAACK,KAArB,GAA6BK,GAAG,CAACC,gBAAjC;;AACA,YAAID,GAAG,CAACC,gBAAJ,KAAyB,CAA7B,EAAgC;AAC9BjB,UAAAA,YAAY,CAACW,KAAb,GAAqBlB,SAAS,CAACkB,KAAV,GAAkBT,cAAc,CAACS,KAAtD;AACAV,UAAAA,YAAY,CAACU,KAAb,GAAqBjB,SAAS,CAACiB,KAAV,GAAkBR,cAAc,CAACQ,KAAtD;AACD,SAHD,MAGO,IAAIL,oBAAoB,CAACK,KAArB,GAA6B,CAAjC,EAAoC;AACzCpB,UAAAA,OAAO,CAACoB,KAAR,GACEpB,OAAO,CAACoB,KAAR,IACClB,SAAS,CAACkB,KAAV,GAAkBa,aAAlB,GAAkCtB,cAAc,CAACS,KAAf,GAAuBa,aAD1D,CADF;AAGAhC,UAAAA,OAAO,CAACmB,KAAR,GACEnB,OAAO,CAACmB,KAAR,IACCjB,SAAS,CAACiB,KAAV,GAAkBa,aAAlB,GAAkCrB,cAAc,CAACQ,KAAf,GAAuBa,aAD1D,CADF;AAGD;AACF;;AAQD,UAAIlB,oBAAoB,CAACK,KAArB,KAA+B,CAAnC,EAAsC;AACpClB,QAAAA,SAAS,CAACkB,KAAV,GAAkBT,cAAc,CAACS,KAAf,GAAuBX,YAAY,CAACW,KAAtD;AACAjB,QAAAA,SAAS,CAACiB,KAAV,GAAkBR,cAAc,CAACQ,KAAf,GAAuBV,YAAY,CAACU,KAAtD;AACA7B,QAAAA,UAAU,CAAC6B,KAAX,GAAmBb,OAAO,CAACa,KAAR,GAAgBlB,SAAS,CAACkB,KAA1B,GAAkCa,aAAa,GAAGjC,OAAO,CAACoB,KAA7E;AACA5B,QAAAA,UAAU,CAAC4B,KAAX,GAAmBZ,OAAO,CAACY,KAAR,GAAgBjB,SAAS,CAACiB,KAA1B,GAAkCa,aAAa,GAAGhC,OAAO,CAACmB,KAA7E;AAOD,OAXD,MAWO,IAAIL,oBAAoB,CAACK,KAArB,GAA6B,CAAjC,EAAoC;AACzClB,QAAAA,SAAS,CAACkB,KAAV,GAAkBT,cAAc,CAACS,KAAjC;AACAjB,QAAAA,SAAS,CAACiB,KAAV,GAAkBR,cAAc,CAACQ,KAAjC;AACA7B,QAAAA,UAAU,CAAC6B,KAAX,GAAmBb,OAAO,CAACa,KAAR,GAAgBT,cAAc,CAACS,KAA/B,GAAuCa,aAAa,GAAGjC,OAAO,CAACoB,KAAlF;AACA5B,QAAAA,UAAU,CAAC4B,KAAX,GAAmBZ,OAAO,CAACY,KAAR,GAAgBR,cAAc,CAACQ,KAA/B,GAAuCa,aAAa,GAAGhC,OAAO,CAACmB,KAAlF;AACD;AACF,KA/HH;AAgIEc,IAAAA,QAAQ,EAAE,oBAAM;AACd,UAAIjB,OAAO,CAACG,KAAZ,EAAmB;AAOjB7B,QAAAA,UAAU,CAAC6B,KAAX,GACEjC,KAAK,CAACiC,KAAN,GAAc,CAAd,GACI,uCAAW,CAAX,CADJ,GAEI7B,UAAU,CAAC6B,KAAX,GAAmBtC,eAAe,IAAIK,KAAK,CAACiC,KAAN,GAAc,CAAlB,CAAlC,GACA,uCAAWtC,eAAe,IAAIK,KAAK,CAACiC,KAAN,GAAc,CAAlB,CAA1B,CADA,GAEA7B,UAAU,CAAC6B,KAAX,GAAmB,CAACtC,eAAD,IAAoBK,KAAK,CAACiC,KAAN,GAAc,CAAlC,CAAnB,GACA,uCAAW,CAACtC,eAAD,IAAoBK,KAAK,CAACiC,KAAN,GAAc,CAAlC,CAAX,CADA,GAEA7B,UAAU,CAAC6B,KAPjB;AAeA5B,QAAAA,UAAU,CAAC4B,KAAX,GACExC,kBAAkB,GAAGO,KAAK,CAACiC,KAA3B,GAAmChC,YAAnC,GACI,uCAAW,CAAX,CADJ,GAEII,UAAU,CAAC4B,KAAX,GAAoBxC,kBAAkB,GAAG,CAAtB,GAA2BO,KAAK,CAACiC,KAAjC,GAAyChC,YAAY,GAAG,CAA3E,GACA,uCAAYR,kBAAkB,GAAG,CAAtB,GAA2BO,KAAK,CAACiC,KAAjC,GAAyChC,YAAY,GAAG,CAAnE,CADA,GAEAI,UAAU,CAAC4B,KAAX,GAAoB,CAACxC,kBAAD,GAAsB,CAAvB,GAA4BO,KAAK,CAACiC,KAAlC,GAA0ChC,YAAY,GAAG,CAA5E,GACA,uCAAY,CAACR,kBAAD,GAAsB,CAAvB,GAA4BO,KAAK,CAACiC,KAAlC,GAA0ChC,YAAY,GAAG,CAApE,CADA,GAEAI,UAAU,CAAC4B,KAPjB;AAaApC,QAAAA,WAAW,CAACoC,KAAZ,GAAoBjC,KAAK,CAACiC,KAAN,GAAc,CAAd,GAAkB,CAAlB,GAAsBjC,KAAK,CAACiC,KAAhD;AACAjC,QAAAA,KAAK,CAACiC,KAAN,GAAcjC,KAAK,CAACiC,KAAN,GAAc,CAAd,GAAkB,uCAAW,CAAX,CAAlB,GAAkCjC,KAAK,CAACiC,KAAtD;AACAD,QAAAA,gBAAgB;AACjB;AACF,KAxKH;AAyKE4B,IAAAA,OAAO,EAAE,iBAACtB,GAAD,EAAS;AAMhB,UAAI,CAAC9B,SAAL,EAAgB;AAKd,oDAAgBJ,UAAhB;AACA,oDAAgBC,UAAhB;AACA,oDAAgBL,KAAhB;AAKA8B,QAAAA,OAAO,CAACG,KAAR,GAAgB,IAAhB;AAKAJ,QAAAA,SAAS,CAACI,KAAV,GAAkB3C,SAAS,CAAC4C,YAA5B;AAKAN,QAAAA,oBAAoB,CAACK,KAArB,GAA6BK,GAAG,CAACC,gBAAjC;AACAnB,QAAAA,OAAO,CAACa,KAAR,GAAgB7B,UAAU,CAAC6B,KAA3B;AACAZ,QAAAA,OAAO,CAACY,KAAR,GAAgB5B,UAAU,CAAC4B,KAA3B;AACAT,QAAAA,cAAc,CAACS,KAAf,GAAuBK,GAAG,CAACrB,MAAJ,IAActB,eAAe,GAAGyB,OAAO,CAACa,KAAxC,CAAvB;AACAR,QAAAA,cAAc,CAACQ,KAAf,GAAuBK,GAAG,CAACpB,MAAJ,IAAcxB,gBAAgB,GAAG2B,OAAO,CAACY,KAAzC,CAAvB;AACApB,QAAAA,OAAO,CAACoB,KAAR,GAAgBT,cAAc,CAACS,KAA/B;AACAnB,QAAAA,OAAO,CAACmB,KAAR,GAAgBR,cAAc,CAACQ,KAA/B;AACApC,QAAAA,WAAW,CAACoC,KAAZ,GAAoBjC,KAAK,CAACiC,KAA1B;AACD;;AAKDF,MAAAA,UAAU,CAACE,KAAX,GAAmB5C,UAAU,CAACoD,KAA9B;AACD;AAnNH,GADc,EAsNd,CAAChD,kBAAD,CAtNc,CAAhB;AA4NA,MAAMsE,WAAW,GAAG,sDAAyD;AAC3E1B,IAAAA,QAAQ,EAAE,oBAAM;AACd,kDAAgBzC,mBAAhB;AACAA,MAAAA,mBAAmB,CAACqC,KAApB,GAA4BrC,mBAAmB,CAACqC,KAApB,GAA4B,CAA5B,GAAgC,uCAAW,CAAX,CAAhC,GAAgD,uCAAW,CAAX,CAA5E;AACD;AAJ0E,GAAzD,CAApB;AAUA,MAAM+B,WAAW,GAAG,sDAAyD;AAC3E3B,IAAAA,QAAQ,EAAE,kBAACC,GAAD,EAAS;AACjB,UAAIM,IAAI,CAACC,GAAL,CAASnB,IAAI,CAACO,KAAL,GAAaK,GAAG,CAAC2B,SAA1B,IAAuC,EAAvC,IAA6CrB,IAAI,CAACC,GAAL,CAASlB,IAAI,CAACM,KAAL,GAAaK,GAAG,CAAC4B,SAA1B,IAAuC,EAAxF,EAA4F;AAC1F,YAAIrE,WAAW,CAACoC,KAAZ,KAAsB,CAAtB,IAA2Bb,OAAO,CAACa,KAAR,KAAkB,CAA7C,IAAkDZ,OAAO,CAACY,KAAR,KAAkB,CAAxE,EAA2E;AACzEpC,UAAAA,WAAW,CAACoC,KAAZ,GAAoB,CAApB;AACAjC,UAAAA,KAAK,CAACiC,KAAN,GAAc,uCAAW,CAAX,EAAc;AAC1BmB,YAAAA,QAAQ,EAAE,GADgB;AAE1BC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFkB,WAAd,CAAd;AAIApD,UAAAA,UAAU,CAAC6B,KAAX,GAAmB,uCAAWK,GAAG,CAAC2B,SAAJ,GAAgBtE,eAA3B,EAA4C;AAC7DyD,YAAAA,QAAQ,EAAE,GADmD;AAE7DC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFqD,WAA5C,CAAnB;;AAIA,cAAI/D,kBAAkB,GAAG,CAArB,GAAyBQ,YAA7B,EAA2C;AACzC,gBAAMkE,mBAAmB,GACvB7B,GAAG,CAAC4B,SAAJ,GAAgBxE,gBAAhB,GACI,EAAED,kBAAkB,GAAG,CAArB,GAAyBQ,YAA3B,IAA2C,CAD/C,GAEI,CAACR,kBAAkB,GAAG,CAArB,GAAyBQ,YAA1B,IAA0C,CAHhD;AAIAI,YAAAA,UAAU,CAAC4B,KAAX,GAAmB,uCAAWkC,mBAAX,EAAgC;AACjDf,cAAAA,QAAQ,EAAE,GADuC;AAEjDC,cAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFyC,aAAhC,CAAnB;AAID;AACF,SApBD,MAoBO;AACL3D,UAAAA,WAAW,CAACoC,KAAZ,GAAoB,CAApB;AACAjC,UAAAA,KAAK,CAACiC,KAAN,GAAc,uCAAW,CAAX,EAAc;AAC1BmB,YAAAA,QAAQ,EAAE,GADgB;AAE1BC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFkB,WAAd,CAAd;AAIApC,UAAAA,OAAO,CAACa,KAAR,GAAgB,CAAhB;AACAZ,UAAAA,OAAO,CAACY,KAAR,GAAgB,CAAhB;AACA7B,UAAAA,UAAU,CAAC6B,KAAX,GAAmB,uCAAW,CAAX,EAAc;AAC/BmB,YAAAA,QAAQ,EAAE,GADqB;AAE/BC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFuB,WAAd,CAAnB;AAIAnD,UAAAA,UAAU,CAAC4B,KAAX,GAAmB,uCAAW,CAAX,EAAc;AAC/BmB,YAAAA,QAAQ,EAAE,GADqB;AAE/BC,YAAAA,MAAM,EAAEC,8BAAOC,GAAP,CAAWD,8BAAOE,IAAlB;AAFuB,WAAd,CAAnB;;AAIA,cAAI5D,mBAAmB,CAACqC,KAApB,KAA8B,CAAlC,EAAqC;AACnC,wDAAgBrC,mBAAhB;AACAA,YAAAA,mBAAmB,CAACqC,KAApB,GAA4B,uCAAW,CAAX,CAA5B;AACD;AACF;AACF;AACF,KA7C0E;AA8C3E2B,IAAAA,OAAO,EAAE,iBAACtB,GAAD,EAAS;AAChBZ,MAAAA,IAAI,CAACO,KAAL,GAAaK,GAAG,CAAC2B,SAAjB;AACAtC,MAAAA,IAAI,CAACM,KAAL,GAAaK,GAAG,CAAC4B,SAAjB;AACD;AAjD0E,GAAzD,CAApB;AAoDA,SAAO;AACLF,IAAAA,WAAW,EAAXA,WADK;AAEL5B,IAAAA,KAAK,EAALA,KAFK;AAGLyB,IAAAA,OAAO,EAAPA,OAHK;AAILE,IAAAA,WAAW,EAAXA;AAJK,GAAP;AAMD,CAxqBM;;;;AA6qBA,IAAMN,KAAK,GAAG,SAARA,KAAQ,CAACxB,KAAD,EAAgBmC,UAAhB,EAAoCC,UAApC,EAA2D;AAC9E;;AACA,SAAOzB,IAAI,CAAC0B,GAAL,CAAS1B,IAAI,CAAC2B,GAAL,CAASH,UAAT,EAAqBnC,KAArB,CAAT,EAAsCoC,UAAtC,CAAP;AACD,CAHM","sourcesContent":["import { Platform } from 'react-native';\nimport type {\n  PanGestureHandlerGestureEvent,\n  PinchGestureHandlerGestureEvent,\n  TapGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport {\n  cancelAnimation,\n  Easing,\n  runOnJS,\n  SharedValue,\n  useAnimatedGestureHandler,\n  useSharedValue,\n  withDecay,\n  withTiming,\n} from 'react-native-reanimated';\n\nimport { useOverlayContext } from '../../../contexts/overlayContext/OverlayContext';\nimport { triggerHaptic } from '../../../native';\n\nexport enum HasPinched {\n  FALSE = 0,\n  TRUE,\n}\n\nexport enum IsSwiping {\n  UNDETERMINED = 0,\n  TRUE,\n  FALSE,\n}\n\nconst MARGIN = 32;\n\nexport const useImageGalleryGestures = ({\n  currentImageHeight,\n  halfScreenHeight,\n  halfScreenWidth,\n  headerFooterVisible,\n  offsetScale,\n  overlayOpacity,\n  photoLength,\n  scale,\n  screenHeight,\n  screenWidth,\n  setSelectedIndex,\n  translateX,\n  translateY,\n  translationX,\n}: {\n  currentImageHeight: number;\n  halfScreenHeight: number;\n  halfScreenWidth: number;\n  headerFooterVisible: SharedValue<number>;\n  offsetScale: SharedValue<number>;\n  overlayOpacity: SharedValue<number>;\n  photoLength: number;\n  scale: SharedValue<number>;\n  screenHeight: number;\n  screenWidth: number;\n  setSelectedIndex: React.Dispatch<React.SetStateAction<number>>;\n  translateX: SharedValue<number>;\n  translateY: SharedValue<number>;\n  translationX: SharedValue<number>;\n}) => {\n  const { setOverlay } = useOverlayContext();\n  const isAndroid = Platform.OS === 'android';\n\n  /**\n   * Values to track scale for haptic feedback firing\n   */\n  const hasHitBottomScale = useSharedValue(1);\n  const hasHitTopScale = useSharedValue(0);\n\n  /**\n   * Shared values for touch tracking\n   */\n  const originX = useSharedValue(0);\n  const originY = useSharedValue(0);\n  const oldFocalX = useSharedValue(0);\n  const oldFocalY = useSharedValue(0);\n  const focalX = useSharedValue(0);\n  const focalY = useSharedValue(0);\n  const index = useSharedValue(0);\n\n  /**\n   * Shared values for movement\n   */\n  const offsetX = useSharedValue(0);\n  const offsetY = useSharedValue(0);\n\n  /**\n   * Shared values for touch tracking\n   */\n  const focalOffsetX = useSharedValue(0);\n  const focalOffsetY = useSharedValue(0);\n  const adjustedFocalX = useSharedValue(0);\n  const adjustedFocalY = useSharedValue(0);\n  const tapX = useSharedValue(0);\n  const tapY = useSharedValue(0);\n\n  /**\n   * Shared values for gesture tracking\n   */\n  const numberOfPinchFingers = useSharedValue(0);\n  const isSwiping = useSharedValue(0);\n  const isPinch = useSharedValue(false);\n  const hasPinched = useSharedValue(0);\n\n  /**\n   * Reset gesture values for use on touch release\n   */\n  const resetTouchValues = () => {\n    'worklet';\n    focalX.value = 0;\n    focalY.value = 0;\n    oldFocalX.value = 0;\n    oldFocalY.value = 0;\n    originX.value = 0;\n    originY.value = 0;\n    focalOffsetX.value = 0;\n    focalOffsetY.value = 0;\n    numberOfPinchFingers.value = 0;\n    isPinch.value = false;\n    isSwiping.value = IsSwiping.UNDETERMINED;\n  };\n\n  /**\n   * Reset movement values for use on selected photo change\n   */\n  const resetMovementValues = () => {\n    'worklet';\n    translateX.value = 0;\n    translateY.value = 0;\n    scale.value = 1;\n    offsetScale.value = 1;\n  };\n\n  /**\n   * We use simultaneousHandlers to allow pan and pinch gesture handlers\n   * depending on the gesture. The touch is fully handled by the pinch\n   * gesture handler once it has began so all interactions by the pan\n   * handler are blocked if isPinch.value is true\n   */\n  const onPan = useAnimatedGestureHandler<PanGestureHandlerGestureEvent>(\n    {\n      onActive: (evt) => {\n        if (evt.numberOfPointers === 1 && !isPinch.value) {\n          /**\n           * If Android where a second finger cannot be added back and\n           * removing one finger returns to Pan Handler then adjust origin\n           * on finger remove and set swiping false\n           */\n          if (isAndroid && hasPinched.value === HasPinched.TRUE) {\n            hasPinched.value = HasPinched.FALSE;\n            isSwiping.value = IsSwiping.FALSE;\n            offsetX.value = translateX.value + evt.translationX;\n            offsetY.value = translateY.value - evt.translationY;\n          }\n\n          /**\n           * isSwiping is used to prevent Y movement if a clear swipe to next\n           * or previous is begun when at the edge of a photo. The value is\n           * either 0, 1, or 2, via the IsSwiping enum designating undetermined,\n           * true, or false and is reset on releasing the touch\n           */\n          if (isSwiping.value === IsSwiping.UNDETERMINED) {\n            const maxXYRatio = isAndroid ? 1 : 0.25;\n            if (\n              Math.abs(evt.translationX / evt.translationY) > maxXYRatio &&\n              (Math.abs(-halfScreenWidth * (scale.value - 1) - offsetX.value) < 3 ||\n                Math.abs(halfScreenWidth * (scale.value - 1) - offsetX.value) < 3)\n            ) {\n              isSwiping.value = IsSwiping.TRUE;\n            }\n            if (Math.abs(evt.translationY) > 25) {\n              isSwiping.value = IsSwiping.FALSE;\n            }\n          }\n\n          /**\n           * localEvtScale is used for swipe away\n           */\n          const localEvtScale = scale.value / offsetScale.value;\n\n          /**\n           * If not swiping translate the image in X and Y to the event\n           * translation plus offset. If swiping only translate X, if\n           * swiping down when at top of screen or centered balance scale\n           * using offset to a degree (this needs improvement the calculation\n           * is incorrect but likely needs origin use to be 100%)\n           */\n          translateX.value =\n            scale.value !== offsetScale.value\n              ? offsetX.value * localEvtScale - evt.translationX\n              : offsetX.value - evt.translationX;\n          translateY.value =\n            isSwiping.value !== IsSwiping.TRUE\n              ? scale.value !== offsetScale.value\n                ? offsetY.value * localEvtScale + evt.translationY\n                : offsetY.value + evt.translationY\n              : translateY.value;\n\n          /**\n           * If swiping down start scaling down the image for swipe\n           * away effect\n           */\n          scale.value =\n            currentImageHeight * offsetScale.value < screenHeight && translateY.value > 0\n              ? offsetScale.value * (1 - (1 / 3) * (translateY.value / screenHeight))\n              : currentImageHeight * offsetScale.value > screenHeight &&\n                translateY.value > (currentImageHeight / 2) * offsetScale.value - halfScreenHeight\n              ? offsetScale.value *\n                (1 -\n                  (1 / 3) *\n                    ((translateY.value -\n                      ((currentImageHeight / 2) * offsetScale.value - halfScreenHeight)) /\n                      screenHeight))\n              : scale.value;\n\n          overlayOpacity.value = localEvtScale;\n        }\n      },\n      onFinish: (evt) => {\n        if (!isPinch.value && evt.numberOfPointers < 2) {\n          /**\n           * To determine if the fling should page to the next image we\n           * calculate a final position based on the current position and\n           * event velocity\n           */\n          const finalXPosition = evt.translationX - evt.velocityX * 0.3;\n          const finalYPosition = evt.translationY + evt.velocityY * 0.1;\n\n          /**\n           * If there is a next photo, the image is lined up to the right\n           * edge, the swipe is to the left, and the final position is more\n           * than half the screen width, move to the next image\n           */\n          if (\n            index.value < photoLength - 1 &&\n            Math.abs(halfScreenWidth * (scale.value - 1) + offsetX.value) < 3 &&\n            translateX.value < 0 &&\n            finalXPosition < -halfScreenWidth &&\n            isSwiping.value === IsSwiping.TRUE\n          ) {\n            cancelAnimation(translationX);\n            translationX.value = withTiming(\n              -(screenWidth + MARGIN) * (index.value + 1),\n              {\n                duration: 200,\n                easing: Easing.out(Easing.ease),\n              },\n              () => {\n                resetMovementValues();\n                index.value = index.value + 1;\n                runOnJS(setSelectedIndex)(index.value);\n              },\n            );\n\n            /**\n             * If there is a previous photo, the image is lined up to the left\n             * edge, the swipe is to the right, and the final position is more\n             * than half the screen width, move to the previous image\n             */\n          } else if (\n            index.value > 0 &&\n            Math.abs(-halfScreenWidth * (scale.value - 1) + offsetX.value) < 3 &&\n            translateX.value > 0 &&\n            finalXPosition > halfScreenWidth &&\n            isSwiping.value === IsSwiping.TRUE\n          ) {\n            cancelAnimation(translationX);\n            translationX.value = withTiming(\n              -(screenWidth + MARGIN) * (index.value - 1),\n              {\n                duration: 200,\n                easing: Easing.out(Easing.ease),\n              },\n              () => {\n                resetMovementValues();\n                index.value = index.value - 1;\n                runOnJS(setSelectedIndex)(index.value);\n              },\n            );\n          }\n\n          /**\n           * When the pan is finished if the scale is less than 1 return the\n           * photo to center, if the photo is inside the edges of the screen\n           * return the photo to line up with the edges, otherwise use decay\n           * with a clamping at the edges to give the effect the image is\n           * sliding along using velocity and friction\n           */\n          translateX.value =\n            scale.value < 1\n              ? withTiming(0)\n              : translateX.value > halfScreenWidth * (scale.value - 1)\n              ? withTiming(halfScreenWidth * (scale.value - 1), {\n                  duration: 200,\n                })\n              : translateX.value < -halfScreenWidth * (scale.value - 1)\n              ? withTiming(-halfScreenWidth * (scale.value - 1), {\n                  duration: 200,\n                })\n              : withDecay({\n                  clamp: [\n                    -halfScreenWidth * (scale.value - 1),\n                    halfScreenWidth * (scale.value - 1),\n                  ],\n                  deceleration: 0.99,\n                  velocity: -evt.velocityX,\n                });\n\n          /**\n           * When the pan is finished if the height is less than the screen\n           * height return the photo to center, if the photo is inside the\n           * edges of the screen return the photo to line up with the edges,\n           * otherwise use decay with a clamping at the edges to give the effect\n           * the image is sliding along using velocity and friction\n           */\n          translateY.value =\n            currentImageHeight * scale.value < screenHeight\n              ? withTiming(0)\n              : translateY.value > (currentImageHeight / 2) * scale.value - halfScreenHeight\n              ? withTiming((currentImageHeight / 2) * scale.value - halfScreenHeight)\n              : translateY.value < (-currentImageHeight / 2) * scale.value + halfScreenHeight\n              ? withTiming((-currentImageHeight / 2) * scale.value + halfScreenHeight)\n              : withDecay({\n                  clamp: [\n                    (-currentImageHeight / 2) * scale.value + halfScreenHeight,\n                    (currentImageHeight / 2) * scale.value - halfScreenHeight,\n                  ],\n                  deceleration: 0.99,\n                  velocity: evt.velocityY,\n                });\n\n          resetTouchValues();\n\n          /**\n           * If the scale has been reduced below one, i.e. zoomed out, translate\n           * the zoom back to one\n           */\n          scale.value =\n            scale.value !== offsetScale.value ? withTiming(offsetScale.value) : offsetScale.value;\n\n          /**\n           * If the photo is centered or at the top of the screen if scaled larger\n           * than the screen, and not paging left or right, and the final Y position\n           * is greater than half the screen using swipe velocity and position, close\n           * the overlay\n           */\n          if (\n            finalYPosition > halfScreenHeight &&\n            offsetY.value + 8 >= (currentImageHeight / 2) * scale.value - halfScreenHeight &&\n            isSwiping.value !== IsSwiping.TRUE &&\n            translateY.value !== 0 &&\n            !(\n              Math.abs(halfScreenWidth * (scale.value - 1) + offsetX.value) < 3 &&\n              translateX.value < 0 &&\n              finalXPosition < -halfScreenWidth\n            ) &&\n            !(\n              Math.abs(-halfScreenWidth * (scale.value - 1) + offsetX.value) < 3 &&\n              translateX.value > 0 &&\n              finalXPosition > halfScreenWidth\n            )\n          ) {\n            cancelAnimation(translateX);\n            cancelAnimation(translateY);\n            cancelAnimation(scale);\n            overlayOpacity.value = withTiming(\n              0,\n              {\n                duration: 200,\n                easing: Easing.out(Easing.ease),\n              },\n              () => {\n                runOnJS(setOverlay)('none');\n              },\n            );\n            scale.value = withTiming(0.6, {\n              duration: 200,\n              easing: Easing.out(Easing.ease),\n            });\n            translateY.value =\n              evt.velocityY > 1000\n                ? withDecay({\n                    velocity: evt.velocityY,\n                  })\n                : withTiming(halfScreenHeight + (currentImageHeight / 2) * scale.value, {\n                    duration: 200,\n                    easing: Easing.out(Easing.ease),\n                  });\n            translateX.value = withDecay({\n              velocity: -evt.velocityX,\n            });\n          }\n        }\n      },\n      onStart: () => {\n        if (!isPinch.value) {\n          /**\n           * Cancel any previous motion animation on translations when a touch\n           * begins to interrupt the animation and take over the position handling\n           */\n          cancelAnimation(translateX);\n          cancelAnimation(translateY);\n          cancelAnimation(scale);\n          offsetX.value = translateX.value;\n          offsetY.value = translateY.value;\n        }\n\n        /**\n         * Reset hasPinched for Android single finger offset\n         */\n        hasPinched.value = HasPinched.FALSE;\n      },\n    },\n    [currentImageHeight, photoLength],\n  );\n\n  /**\n   * On pinch is run when two or more fingers touch the screen, it then takes over\n   * all touch handling even if the number of fingers is reduced to one until the\n   * touch is complete\n   */\n  const onPinch = useAnimatedGestureHandler<PinchGestureHandlerGestureEvent>(\n    {\n      onActive: (evt) => {\n        /**\n         * Android starts with a zero event with 1 touch instead of two\n         * we therefore must wait to capture starting info until the double\n         * touch begins\n         */\n        if (!isPinch.value && isAndroid) {\n          /**\n           * Set hasPinched to true so when removing one finger the pan active\n           * state adjusts the offset\n           */\n          hasPinched.value = HasPinched.TRUE;\n\n          /**\n           * Cancel any previous motion animation on translations when a touch\n           * begins to interrupt the animation and take over the position handling\n           */\n          cancelAnimation(translateX);\n          cancelAnimation(translateY);\n          cancelAnimation(scale);\n\n          /**\n           * Reset isSwiping as now the pan gesture handler is no longer running\n           */\n          isSwiping.value = IsSwiping.UNDETERMINED;\n\n          /**\n           * Set initial values for pinch gesture interaction handler\n           */\n          numberOfPinchFingers.value = evt.numberOfPointers;\n          offsetX.value = translateX.value;\n          offsetY.value = translateY.value;\n          adjustedFocalX.value = evt.focalX - (halfScreenWidth - offsetX.value);\n          adjustedFocalY.value = evt.focalY - (halfScreenHeight + offsetY.value);\n          originX.value = adjustedFocalX.value;\n          originY.value = adjustedFocalY.value;\n          offsetScale.value = scale.value;\n        }\n\n        /**\n         * Set pinch to true to stop all pan gesture interactions, we do this\n         * again here for Android outside the check that creates type\n         */\n        isPinch.value = true;\n\n        /**\n         * The scale is clamped to a minimum of 1 and maximum of 8 for aesthetics.\n         * We use the clamped value to determine a local event scale so the focal\n         * point does not become out of sync with the actual photo scaling, e.g.\n         * evt.scale is 20 but scale is 8, using evt.scale for offset will put the\n         * photo and calculations out of sync\n         */\n        scale.value = clamp(offsetScale.value * evt.scale, 1, 8);\n        const localEvtScale = scale.value / offsetScale.value;\n\n        /**\n         * When we hit the top or bottom of the scale clamping we run a haptic\n         * trigger, we track if it has been run to not spam the trigger\n         */\n        if (scale.value !== 8 && scale.value !== 1) {\n          hasHitTopScale.value = 0;\n          hasHitBottomScale.value = 0;\n        } else if (scale.value === 8 && hasHitTopScale.value === 0) {\n          hasHitTopScale.value = 1;\n          runOnJS(triggerHaptic)('impactLight');\n        } else if (scale.value === 1 && hasHitBottomScale.value === 0) {\n          hasHitBottomScale.value = 1;\n          runOnJS(triggerHaptic)('impactLight');\n        }\n\n        /**\n         * We calculate the adjusted focal point on the photo using the events\n         * focal position on the screen, screen size, and current photo offset\n         */\n        adjustedFocalX.value = evt.focalX - (halfScreenWidth - offsetX.value);\n        adjustedFocalY.value = evt.focalY - (halfScreenHeight + offsetY.value);\n\n        /**\n         * If the number of fingers on the screen changes, the position of the\n         * focal point will change and this needs to be accounted for, e.g. if\n         * two fingers are on the screen the focal is between them, but if one is\n         * then removed the focal is now at the remaining fingers touch position.\n         * If this happens without accounting for the change the image will jump\n         * around, we keep track of the previous two finger focal to adjust for this\n         * change in a reduction from two fingers to one, then if another finger\n         * is added again we adjust the origin to account for the difference between\n         * the original two finger touch and the new two finger touch position.\n         */\n        if (numberOfPinchFingers.value !== evt.numberOfPointers) {\n          numberOfPinchFingers.value = evt.numberOfPointers;\n          if (evt.numberOfPointers === 1) {\n            focalOffsetX.value = oldFocalX.value - adjustedFocalX.value;\n            focalOffsetY.value = oldFocalY.value - adjustedFocalY.value;\n          } else if (numberOfPinchFingers.value > 1) {\n            originX.value =\n              originX.value -\n              (oldFocalX.value / localEvtScale - adjustedFocalX.value / localEvtScale);\n            originY.value =\n              originY.value -\n              (oldFocalY.value / localEvtScale - adjustedFocalY.value / localEvtScale);\n          }\n        }\n\n        /**\n         * If pinch handler has been activated via two fingers then the fingers\n         * reduced to one we keep track of the old focal using the focal offset\n         * from when the number of fingers was two. We then translate the photo\n         * taking into account the offset, focal, focal offset, origin, and scale.\n         */\n        if (numberOfPinchFingers.value === 1) {\n          oldFocalX.value = adjustedFocalX.value + focalOffsetX.value;\n          oldFocalY.value = adjustedFocalY.value + focalOffsetY.value;\n          translateX.value = offsetX.value - oldFocalX.value + localEvtScale * originX.value;\n          translateY.value = offsetY.value + oldFocalY.value - localEvtScale * originY.value;\n\n          /**\n           * If the number of fingers in the gesture is greater than one the\n           * adjusted focal point is saved as the old focal and the photo is\n           * translated taking into account the offset, focal, origin, and scale.\n           */\n        } else if (numberOfPinchFingers.value > 1) {\n          oldFocalX.value = adjustedFocalX.value;\n          oldFocalY.value = adjustedFocalY.value;\n          translateX.value = offsetX.value - adjustedFocalX.value + localEvtScale * originX.value;\n          translateY.value = offsetY.value + adjustedFocalY.value - localEvtScale * originY.value;\n        }\n      },\n      onFinish: () => {\n        if (isPinch.value) {\n          /**\n           * When the pinch is finished if the scale is less than 1 return the\n           * photo to center, if the photo is inside the edges of the screen\n           * return the photo to line up with the edges, otherwise leave the\n           * photo in its current position\n           */\n          translateX.value =\n            scale.value < 1\n              ? withTiming(0)\n              : translateX.value > halfScreenWidth * (scale.value - 1)\n              ? withTiming(halfScreenWidth * (scale.value - 1))\n              : translateX.value < -halfScreenWidth * (scale.value - 1)\n              ? withTiming(-halfScreenWidth * (scale.value - 1))\n              : translateX.value;\n\n          /**\n           * When the pinch is finished if the height is less than the screen\n           * height return the photo to center, if the photo is inside the\n           * edges of the screen return the photo to line up with the edges,\n           * otherwise leave the photo in its current position\n           */\n          translateY.value =\n            currentImageHeight * scale.value < screenHeight\n              ? withTiming(0)\n              : translateY.value > (currentImageHeight / 2) * scale.value - screenHeight / 2\n              ? withTiming((currentImageHeight / 2) * scale.value - screenHeight / 2)\n              : translateY.value < (-currentImageHeight / 2) * scale.value + screenHeight / 2\n              ? withTiming((-currentImageHeight / 2) * scale.value + screenHeight / 2)\n              : translateY.value;\n\n          /**\n           * If the scale has been reduced below one, i.e. zoomed out, translate\n           * the zoom back to one\n           */\n          offsetScale.value = scale.value < 1 ? 1 : scale.value;\n          scale.value = scale.value < 1 ? withTiming(1) : scale.value;\n          resetTouchValues();\n        }\n      },\n      onStart: (evt) => {\n        /**\n         * Android starts with a zero event with 1 touch instead of two\n         * we therefore must wait to capture starting info until the double\n         * touch begins\n         */\n        if (!isAndroid) {\n          /**\n           * Cancel any previous motion animation on translations when a touch\n           * begins to interrupt the animation and take over the position handling\n           */\n          cancelAnimation(translateX);\n          cancelAnimation(translateY);\n          cancelAnimation(scale);\n\n          /**\n           * Set pinch to true to stop all pan gesture interactions\n           */\n          isPinch.value = true;\n\n          /**\n           * Reset isSwiping as now the pan gesture handler is no longer running\n           */\n          isSwiping.value = IsSwiping.UNDETERMINED;\n\n          /**\n           * Set initial values for pinch gesture interaction handler\n           */\n          numberOfPinchFingers.value = evt.numberOfPointers;\n          offsetX.value = translateX.value;\n          offsetY.value = translateY.value;\n          adjustedFocalX.value = evt.focalX - (halfScreenWidth - offsetX.value);\n          adjustedFocalY.value = evt.focalY - (halfScreenHeight + offsetY.value);\n          originX.value = adjustedFocalX.value;\n          originY.value = adjustedFocalY.value;\n          offsetScale.value = scale.value;\n        }\n\n        /**\n         * Reset hasPinched for Android single finger offset\n         */\n        hasPinched.value = HasPinched.FALSE;\n      },\n    },\n    [currentImageHeight],\n  );\n\n  /**\n   * Single tap handler for header hiding and showing\n   */\n  const onSingleTap = useAnimatedGestureHandler<TapGestureHandlerGestureEvent>({\n    onActive: () => {\n      cancelAnimation(headerFooterVisible);\n      headerFooterVisible.value = headerFooterVisible.value > 0 ? withTiming(0) : withTiming(1);\n    },\n  });\n\n  /**\n   * Double tap handler to zoom back out and hide header and footer\n   */\n  const onDoubleTap = useAnimatedGestureHandler<TapGestureHandlerGestureEvent>({\n    onActive: (evt) => {\n      if (Math.abs(tapX.value - evt.absoluteX) < 64 && Math.abs(tapY.value - evt.absoluteY) < 64) {\n        if (offsetScale.value === 1 && offsetX.value === 0 && offsetY.value === 0) {\n          offsetScale.value = 2;\n          scale.value = withTiming(2, {\n            duration: 200,\n            easing: Easing.out(Easing.ease),\n          });\n          translateX.value = withTiming(evt.absoluteX - halfScreenWidth, {\n            duration: 200,\n            easing: Easing.out(Easing.ease),\n          });\n          if (currentImageHeight * 2 > screenHeight) {\n            const translateYTopBottom =\n              evt.absoluteY > halfScreenHeight\n                ? -(currentImageHeight * 2 - screenHeight) / 2\n                : (currentImageHeight * 2 - screenHeight) / 2;\n            translateY.value = withTiming(translateYTopBottom, {\n              duration: 200,\n              easing: Easing.out(Easing.ease),\n            });\n          }\n        } else {\n          offsetScale.value = 1;\n          scale.value = withTiming(1, {\n            duration: 200,\n            easing: Easing.out(Easing.ease),\n          });\n          offsetX.value = 0;\n          offsetY.value = 0;\n          translateX.value = withTiming(0, {\n            duration: 200,\n            easing: Easing.out(Easing.ease),\n          });\n          translateY.value = withTiming(0, {\n            duration: 200,\n            easing: Easing.out(Easing.ease),\n          });\n          if (headerFooterVisible.value !== 0) {\n            cancelAnimation(headerFooterVisible);\n            headerFooterVisible.value = withTiming(0);\n          }\n        }\n      }\n    },\n    onStart: (evt) => {\n      tapX.value = evt.absoluteX;\n      tapY.value = evt.absoluteY;\n    },\n  });\n\n  return {\n    onDoubleTap,\n    onPan,\n    onPinch,\n    onSingleTap,\n  };\n};\n\n/**\n * Clamping worklet to clamp the scaling\n */\nexport const clamp = (value: number, lowerBound: number, upperBound: number) => {\n  'worklet';\n  return Math.min(Math.max(lowerBound, value), upperBound);\n};\n"]}