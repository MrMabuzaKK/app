{"version":3,"sources":["ProgressControl.tsx"],"names":["width","height","styles","StyleSheet","create","containerStyle","borderRadius","innerStyle","progressControlThumbStyle","backgroundColor","top","ProgressControlThumb","ProgressControl","React","memo","props","duration","onPlayPause","onProgressDrag","progress","theme","colors","grey_dark","white_snow","state","translateX","value","animatedStyles","thumbStyles","transform","onGestureEvent","onActive","event","translationX","onFinish","dragFinishLocationInSeconds","onStart","prevProps","nextProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated, {\n  cancelAnimation,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useSharedValue,\n} from 'react-native-reanimated';\n\nimport type { ImageGalleryFooterVideoControlProps } from './ImageGalleryFooter';\n\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\n\ntype ProgressControlProps = Pick<\n  ImageGalleryFooterVideoControlProps,\n  'duration' | 'onPlayPause' | 'onProgressDrag' | 'progress'\n>;\n\nconst width = 180;\nconst height = 2;\nconst styles = StyleSheet.create({\n  containerStyle: {\n    borderRadius: 50,\n    height,\n    width,\n  },\n  innerStyle: {\n    height,\n  },\n  progressControlThumbStyle: {\n    backgroundColor: '#fff',\n    borderRadius: 5,\n    height: 20,\n    top: -11,\n    width: 4,\n  },\n});\n\nconst ProgressControlThumb = () => <View style={styles.progressControlThumbStyle} />;\n\nexport const ProgressControl: React.FC<ProgressControlProps> = React.memo(\n  (props) => {\n    const { duration, onPlayPause, onProgressDrag, progress } = props;\n    const {\n      theme: {\n        colors: { grey_dark, white_snow },\n      },\n    } = useTheme();\n\n    const state = useSharedValue(0);\n    const translateX = useSharedValue(0);\n\n    useEffect(() => {\n      state.value = progress * width;\n      translateX.value = progress * width;\n    }, [progress]);\n\n    const animatedStyles = useAnimatedStyle(() => ({\n      backgroundColor: white_snow,\n      width: state.value,\n    }));\n\n    const thumbStyles = useAnimatedStyle(() => ({\n      transform: [{ translateX: state.value }],\n    }));\n\n    const onGestureEvent = useAnimatedGestureHandler(\n      {\n        onActive: (event) => {\n          state.value = translateX.value + event.translationX;\n          if (state.value > width) state.value = width;\n          else if (state.value < 0) state.value = 0;\n        },\n        onFinish: () => {\n          translateX.value = state.value;\n          const dragFinishLocationInSeconds = (state.value / width) * duration;\n          runOnJS(onProgressDrag)(dragFinishLocationInSeconds);\n          runOnJS(onPlayPause)();\n        },\n        onStart: () => {\n          runOnJS(onPlayPause)();\n          cancelAnimation(translateX);\n          state.value = translateX.value;\n        },\n      },\n      [duration],\n    );\n    return (\n      <View style={[styles.containerStyle, { backgroundColor: grey_dark }]}>\n        <Animated.View style={[styles.innerStyle, animatedStyles]} />\n\n        <PanGestureHandler maxPointers={1} onGestureEvent={onGestureEvent}>\n          <Animated.View style={[thumbStyles]}>\n            <ProgressControlThumb />\n          </Animated.View>\n        </PanGestureHandler>\n      </View>\n    );\n  },\n  (prevProps, nextProps) => {\n    if (prevProps.duration === nextProps.duration && prevProps.progress === nextProps.progress)\n      return true;\n    else return false;\n  },\n);\n"]}