{"version":3,"sources":["ImageGrid.tsx"],"names":["styles","StyleSheet","create","avatarImage","borderRadius","height","width","avatarImageWrapper","borderWidth","margin","contentContainer","flexGrow","image","GridImage","item","gridImage","theme","imageGallery","grid","imageComponent","restItem","numberOfImageGalleryGridColumns","selectAndClose","type","uri","size","renderItem","ImageGrid","props","avatarComponent","closeGridView","photos","setImage","white","colors","imageGridItems","map","photo","messageId","url","backgroundColor","index","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Image, StyleSheet, View } from 'react-native';\n\nimport { BottomSheetFlatList, TouchableOpacity } from '@gorhom/bottom-sheet';\n\nimport { VideoThumbnail } from '../../../components/Attachment/VideoThumbnail';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\nimport { vw } from '../../../utils/utils';\n\nimport type { Photo } from '../ImageGallery';\n\nconst styles = StyleSheet.create({\n  avatarImage: {\n    borderRadius: 22,\n    height: 22,\n    width: 22,\n  },\n  avatarImageWrapper: {\n    borderRadius: 24,\n    borderWidth: 1,\n    height: 24,\n    margin: 8,\n    width: 24,\n  },\n  contentContainer: {\n    flexGrow: 1,\n  },\n  image: {\n    margin: 1,\n  },\n});\n\nexport type ImageGalleryGridImageComponent<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = ({\n  item,\n}: {\n  item: Photo<StreamChatGenerics> & {\n    selectAndClose: () => void;\n    numberOfImageGalleryGridColumns?: number;\n  };\n}) => React.ReactElement | null;\n\nexport type ImageGalleryGridImageComponents<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  avatarComponent?: ImageGalleryGridImageComponent<StreamChatGenerics>;\n  imageComponent?: ImageGalleryGridImageComponent<StreamChatGenerics>;\n};\n\nexport type GridImageItem<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Photo<StreamChatGenerics> &\n  ImageGalleryGridImageComponents<StreamChatGenerics> & {\n    selectAndClose: () => void;\n    numberOfImageGalleryGridColumns?: number;\n  };\n\nconst GridImage = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  item,\n}: {\n  item: GridImageItem<StreamChatGenerics>;\n}) => {\n  const {\n    theme: {\n      imageGallery: {\n        grid: { gridImage },\n      },\n    },\n  } = useTheme();\n  const { imageComponent, ...restItem } = item;\n\n  const { numberOfImageGalleryGridColumns, selectAndClose, type, uri } = restItem;\n\n  const size = vw(100) / (numberOfImageGalleryGridColumns || 3) - 2;\n\n  if (imageComponent) {\n    return imageComponent({ item: restItem });\n  }\n\n  return (\n    <TouchableOpacity onPress={selectAndClose}>\n      {type === 'video' ? (\n        <View style={[styles.image, { height: size, width: size }, gridImage]}>\n          <VideoThumbnail />\n        </View>\n      ) : (\n        <Image source={{ uri }} style={[styles.image, { height: size, width: size }]} />\n      )}\n    </TouchableOpacity>\n  );\n};\n\nconst renderItem = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  item,\n}: {\n  item: GridImageItem<StreamChatGenerics>;\n}) => <GridImage item={item} />;\n\ntype Props<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  ImageGalleryGridImageComponents<StreamChatGenerics> & {\n    closeGridView: () => void;\n    photos: Photo<StreamChatGenerics>[];\n    setImage: React.Dispatch<\n      React.SetStateAction<\n        | {\n            messageId?: string | undefined;\n            url?: string | undefined;\n          }\n        | undefined\n      >\n    >;\n    numberOfImageGalleryGridColumns?: number;\n  };\n\nexport const ImageGrid = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: Props<StreamChatGenerics>,\n) => {\n  const {\n    avatarComponent,\n    closeGridView,\n    imageComponent,\n    numberOfImageGalleryGridColumns,\n    photos,\n    setImage,\n  } = props;\n\n  const {\n    theme: {\n      colors: { white },\n      imageGallery: {\n        grid: { contentContainer },\n      },\n    },\n  } = useTheme();\n\n  const imageGridItems = photos.map((photo) => ({\n    ...photo,\n    avatarComponent,\n    imageComponent,\n    numberOfImageGalleryGridColumns,\n    selectAndClose: () => {\n      setImage({ messageId: photo.messageId, url: photo.uri });\n      closeGridView();\n    },\n  }));\n\n  return (\n    <BottomSheetFlatList<GridImageItem<StreamChatGenerics>>\n      contentContainerStyle={[\n        styles.contentContainer,\n        { backgroundColor: white },\n        contentContainer,\n      ]}\n      data={imageGridItems as GridImageItem<StreamChatGenerics>[]}\n      keyExtractor={(item, index) => `${item.uri}-${index}`}\n      numColumns={numberOfImageGalleryGridColumns || 3}\n      renderItem={renderItem}\n    />\n  );\n};\n\nImageGrid.displayName = 'ImageGrid{imageGallery{grid}}';\n"]}