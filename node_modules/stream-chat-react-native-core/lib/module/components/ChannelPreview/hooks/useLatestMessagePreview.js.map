{"version":3,"sources":["useLatestMessagePreview.ts"],"names":["getLatestMessageDisplayText","channel","client","message","t","bold","text","isMessageTypeDeleted","type","currentUserId","userID","messageOwnerId","user","id","members","Object","keys","state","owner","length","name","username","ownerText","boldOwner","includes","shortenedText","substring","replace","mentionedUsers","Array","isArray","mentioned_users","reduce","acc","cur","userName","regEx","RegExp","split","index","test","push","command","attachments","getLatestMessageDisplayDate","tDateTimeParser","parserOutput","created_at","isSame","Date","format","MessageReadStatus","getLatestMessageReadStatus","readEvents","NOT_SENT_BY_CURRENT_USER","readList","read","messageUpdatedAt","updated_at","undefined","values","some","last_read","READ","UNREAD","getLatestMessagePreview","params","lastMessage","messages","messageObject","previews","status","useLatestMessagePreview","forceUpdate","channelConfigExists","getConfig","channelLastMessageString","setReadEvents","latestMessagePreview","setLatestMessagePreview","readStatus","read_events"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport type { Channel, ChannelState, MessageResponse, StreamChat } from 'stream-chat';\n\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\nimport {\n  isDayOrMoment,\n  TDateTimeParser,\n  useTranslationContext,\n} from '../../../contexts/translationContext/TranslationContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\ntype LatestMessage<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> =\n  | ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>\n  | MessageResponse<StreamChatGenerics>;\n\nexport type LatestMessagePreview<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  created_at: string | number | Date;\n  messageObject: LatestMessage<StreamChatGenerics> | undefined;\n  previews: {\n    bold: boolean;\n    text: string;\n  }[];\n  status: number;\n};\n\nconst getLatestMessageDisplayText = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n  client: StreamChat<StreamChatGenerics>,\n  message: LatestMessage<StreamChatGenerics> | undefined,\n  t: (key: string) => string,\n) => {\n  if (!message) return [{ bold: false, text: t('Nothing yet...') }];\n  const isMessageTypeDeleted = message.type === 'deleted';\n  if (isMessageTypeDeleted) return [{ bold: false, text: t('Message deleted') }];\n  const currentUserId = client.userID;\n  const messageOwnerId = message.user?.id;\n  const members = Object.keys(channel.state.members);\n  const owner =\n    messageOwnerId === currentUserId\n      ? t('You')\n      : members.length > 2\n      ? message.user?.name || message.user?.username || message.user?.id || ''\n      : '';\n  const ownerText = owner ? `${owner === t('You') ? '' : '@'}${owner}: ` : '';\n  const boldOwner = ownerText.includes('@');\n  if (message.text) {\n    // rough guess optimization to limit string preview to max 100 characters\n    const shortenedText = message.text.substring(0, 100).replace(/\\n/g, ' ');\n    const mentionedUsers = Array.isArray(message.mentioned_users)\n      ? message.mentioned_users.reduce((acc, cur) => {\n          const userName = cur.name || cur.id || '';\n          if (userName) {\n            acc += `${acc.length ? '|' : ''}@${userName}`;\n          }\n          return acc;\n        }, '')\n      : '';\n    const regEx = new RegExp(`^(${mentionedUsers})`);\n    return [\n      { bold: boldOwner, text: ownerText },\n      ...shortenedText.split('').reduce(\n        (acc, cur, index) => {\n          if (cur === '@' && mentionedUsers && regEx.test(shortenedText.substring(index))) {\n            acc.push({ bold: true, text: cur });\n          } else if (mentionedUsers && regEx.test(acc[acc.length - 1].text)) {\n            acc.push({ bold: false, text: cur });\n          } else {\n            acc[acc.length - 1].text += cur;\n          }\n          return acc;\n        },\n        [{ bold: false, text: '' }],\n      ),\n    ];\n  }\n  if (message.command) {\n    return [\n      { bold: boldOwner, text: ownerText },\n      { bold: false, text: `/${message.command}` },\n    ];\n  }\n  if (message.attachments?.length) {\n    return [\n      { bold: boldOwner, text: ownerText },\n      { bold: false, text: t('🏙 Attachment...') },\n    ];\n  }\n  return [\n    { bold: boldOwner, text: ownerText },\n    { bold: false, text: t('Empty message...') },\n  ];\n};\n\nconst getLatestMessageDisplayDate = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  message: LatestMessage<StreamChatGenerics> | undefined,\n  tDateTimeParser: TDateTimeParser,\n) => {\n  const parserOutput = tDateTimeParser(message?.created_at);\n  if (isDayOrMoment(parserOutput)) {\n    if (parserOutput.isSame(new Date(), 'day')) {\n      return parserOutput.format('LT');\n    }\n    return parserOutput.format('L');\n  }\n  return parserOutput;\n};\n\nexport enum MessageReadStatus {\n  NOT_SENT_BY_CURRENT_USER = 0,\n  UNREAD = 1,\n  READ = 2,\n}\n\nconst getLatestMessageReadStatus = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n  client: StreamChat<StreamChatGenerics>,\n  message: LatestMessage<StreamChatGenerics> | undefined,\n  readEvents: boolean,\n): MessageReadStatus => {\n  const currentUserId = client.userID;\n  if (!message || currentUserId !== message.user?.id || readEvents === false) {\n    return MessageReadStatus.NOT_SENT_BY_CURRENT_USER;\n  }\n\n  const readList = channel.state.read;\n  if (currentUserId) {\n    delete readList[currentUserId];\n  }\n\n  const messageUpdatedAt = message.updated_at\n    ? typeof message.updated_at === 'string'\n      ? new Date(message.updated_at)\n      : message.updated_at\n    : undefined;\n\n  return Object.values(readList).some(\n    ({ last_read }) => messageUpdatedAt && messageUpdatedAt < last_read,\n  )\n    ? MessageReadStatus.READ\n    : MessageReadStatus.UNREAD;\n};\n\nconst getLatestMessagePreview = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(params: {\n  channel: Channel<StreamChatGenerics>;\n  client: StreamChat<StreamChatGenerics>;\n  readEvents: boolean;\n  t: (key: string) => string;\n  tDateTimeParser: TDateTimeParser;\n  lastMessage?:\n    | ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>\n    | MessageResponse<StreamChatGenerics>;\n}) => {\n  const { channel, client, lastMessage, readEvents, t, tDateTimeParser } = params;\n\n  const messages = channel.state.messages;\n\n  if (!messages.length && !lastMessage) {\n    return {\n      created_at: '',\n      messageObject: undefined,\n      previews: [\n        {\n          bold: false,\n          text: t('Nothing yet...'),\n        },\n      ],\n      status: MessageReadStatus.NOT_SENT_BY_CURRENT_USER,\n    };\n  }\n  const message = lastMessage || messages.length ? messages[messages.length - 1] : undefined;\n\n  return {\n    created_at: getLatestMessageDisplayDate(message, tDateTimeParser),\n    messageObject: message,\n    previews: getLatestMessageDisplayText(channel, client, message, t),\n    status: getLatestMessageReadStatus(channel, client, message, readEvents),\n  };\n};\n\n/**\n * Hook to set the display preview for latest message on channel.\n *\n * @param {*} channel Channel object\n *\n * @returns {object} latest message preview e.g.. { text: 'this was last message ...', created_at: '11/12/2020', messageObject: { originalMessageObject } }\n */\nexport const useLatestMessagePreview = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n  forceUpdate: number,\n  lastMessage?:\n    | ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>\n    | MessageResponse<StreamChatGenerics>,\n) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n  const { t, tDateTimeParser } = useTranslationContext();\n\n  const channelConfigExists = typeof channel?.getConfig === 'function';\n\n  const messages = channel.state.messages;\n  const message = messages.length ? messages[messages.length - 1] : undefined;\n\n  const channelLastMessageString = `${lastMessage?.id || message?.id}${\n    lastMessage?.updated_at || message?.updated_at\n  }`;\n\n  const [readEvents, setReadEvents] = useState(true);\n  const [latestMessagePreview, setLatestMessagePreview] = useState<\n    LatestMessagePreview<StreamChatGenerics>\n  >({\n    created_at: '',\n    messageObject: undefined,\n    previews: [\n      {\n        bold: false,\n        text: '',\n      },\n    ],\n    status: MessageReadStatus.NOT_SENT_BY_CURRENT_USER,\n  });\n\n  const readStatus = getLatestMessageReadStatus(\n    channel,\n    client,\n    lastMessage || message,\n    readEvents,\n  );\n\n  useEffect(() => {\n    if (channelConfigExists) {\n      const read_events = channel.getConfig()?.read_events;\n      if (typeof read_events === 'boolean') {\n        setReadEvents(read_events);\n      }\n    }\n  }, [channelConfigExists]);\n\n  useEffect(\n    () =>\n      setLatestMessagePreview(\n        getLatestMessagePreview({\n          channel,\n          client,\n          lastMessage,\n          readEvents,\n          t,\n          tDateTimeParser,\n        }),\n      ),\n    [channelLastMessageString, forceUpdate, readEvents, readStatus],\n  );\n\n  return latestMessagePreview;\n};\n"]}