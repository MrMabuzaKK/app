{"version":3,"sources":["useChannelPreviewDisplayPresence.ts"],"names":["getChannelPreviewDisplayPresence","channel","client","currentUserId","userID","members","Object","values","state","otherMembers","filter","member","user","id","length","online","useChannelPreviewDisplayPresence","channelMemberOnline","some","displayPresence","setDisplayPresence"],"mappings":";;;;;;;;;AAAA;;AAIA;;AAIA,IAAMA,gCAAgC,GAAG,SAAnCA,gCAAmC,CAGvCC,OAHuC,EAIvCC,MAJuC,EAKpC;AACH,MAAMC,aAAa,GAAGD,MAAM,CAACE,MAA7B;;AAEA,MAAID,aAAJ,EAAmB;AACjB,QAAME,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcN,OAAO,CAACO,KAAR,CAAcH,OAA5B,CAAhB;AACA,QAAMI,YAAY,GAAGJ,OAAO,CAACK,MAAR,CAAe,UAACC,MAAD;AAAA;;AAAA,aAAY,iBAAAA,MAAM,CAACC,IAAP,kCAAaC,EAAb,MAAoBV,aAAhC;AAAA,KAAf,CAArB;;AAEA,QAAIM,YAAY,CAACK,MAAb,KAAwB,CAA5B,EAA+B;AAAA;;AAC7B,aAAO,CAAC,0BAACL,YAAY,CAAC,CAAD,CAAZ,CAAgBG,IAAjB,aAAC,qBAAsBG,MAAvB,CAAR;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAjBD;;AAyBO,IAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC,CAG9Cf,OAH8C,EAI3C;AACH,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,MAAMC,aAAa,GAAGD,MAAM,CAACE,MAA7B;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcN,OAAO,CAACO,KAAR,CAAcH,OAA5B,EAAqCK,MAArC,CACd,UAACC,MAAD;AAAA;;AAAA,WAAY,CAAC,mBAACA,MAAM,CAACC,IAAR,aAAC,cAAaC,EAAd,CAAD,IAAqB,CAAC,CAACV,aAAvB,IAAwC,kBAAAQ,MAAM,CAACC,IAAP,mCAAaC,EAAb,MAAoBV,aAAxE;AAAA,GADc,CAAhB;AAGA,MAAMc,mBAAmB,GAAGZ,OAAO,CAACa,IAAR,CAAa,UAACP,MAAD;AAAA;;AAAA,4BAAYA,MAAM,CAACC,IAAnB,qBAAY,cAAaG,MAAzB;AAAA,GAAb,CAA5B;;AAEA,kBAA8C,qBAAS,KAAT,CAA9C;AAAA;AAAA,MAAOI,eAAP;AAAA,MAAwBC,kBAAxB;;AAEA,wBAAU,YAAM;AACdA,IAAAA,kBAAkB,CAACpB,gCAAgC,CAACC,OAAD,EAAUC,MAAV,CAAjC,CAAlB;AACD,GAFD,EAEG,CAACe,mBAAD,CAFH;AAIA,SAAOE,eAAP;AACD,CApBM","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport type { Channel, StreamChat } from 'stream-chat';\n\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\nconst getChannelPreviewDisplayPresence = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n  client: StreamChat<StreamChatGenerics>,\n) => {\n  const currentUserId = client.userID;\n\n  if (currentUserId) {\n    const members = Object.values(channel.state.members);\n    const otherMembers = members.filter((member) => member.user?.id !== currentUserId);\n\n    if (otherMembers.length === 1) {\n      return !!otherMembers[0].user?.online;\n    }\n  }\n  return false;\n};\n\n/**\n * Hook to set the display avatar presence for channel preview\n * @param {*} channel\n *\n * @returns {boolean} e.g., true\n */\nexport const useChannelPreviewDisplayPresence = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  const currentUserId = client.userID;\n  const members = Object.values(channel.state.members).filter(\n    (member) => !!member.user?.id && !!currentUserId && member.user?.id !== currentUserId,\n  );\n  const channelMemberOnline = members.some((member) => member.user?.online);\n\n  const [displayPresence, setDisplayPresence] = useState(false);\n\n  useEffect(() => {\n    setDisplayPresence(getChannelPreviewDisplayPresence(channel, client));\n  }, [channelMemberOnline]);\n\n  return displayPresence;\n};\n"]}