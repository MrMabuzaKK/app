{"version":3,"sources":["CommandsButton.tsx"],"names":["CommandsButtonWithContext","props","disabled","handleOnPress","suggestions","theme","colors","accent_blue","grey","commandsButton","messageInput","bottom","left","right","top","data","some","suggestion","areEqual","prevProps","nextProps","prevDisabled","prevSuggestions","nextDisabled","nextSuggestions","disabledEqual","suggestionsEqual","MemoizedCommandsButton","React","memo","CommandsButton","displayName"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AAIA;;AAKA;;AACA;;;;;AAYA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAGhCC,KAHgC,EAI7B;AACH,MAAQC,QAAR,GAAiDD,KAAjD,CAAQC,QAAR;AAAA,MAAkBC,aAAlB,GAAiDF,KAAjD,CAAkBE,aAAlB;AAAA,MAAiCC,WAAjC,GAAiDH,KAAjD,CAAiCG,WAAjC;;AAEA,kBAKI,6BALJ;AAAA,kCACEC,KADF;AAAA,8CAEIC,MAFJ;AAAA,MAEcC,WAFd,yBAEcA,WAFd;AAAA,MAE2BC,IAF3B,yBAE2BA,IAF3B;AAAA,MAGoBC,cAHpB,mBAGIC,YAHJ,CAGoBD,cAHpB;;AAOA,SACE,gCAAC,2CAAD;AACE,IAAA,QAAQ,EAAEP,QADZ;AAEE,IAAA,OAAO,EAAE;AAAES,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,IAAI,EAAE,CAApB;AAAuBC,MAAAA,KAAK,EAAE,EAA9B;AAAkCC,MAAAA,GAAG,EAAE;AAAvC,KAFX;AAGE,IAAA,OAAO,EAAEX,aAHX;AAIE,IAAA,KAAK,EAAE,CAACM,cAAD,CAJT;AAKE,IAAA,MAAM,EAAC,iBALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,gCAAC,oBAAD;AACE,IAAA,QAAQ,EACNL,WAAW,IAAIA,WAAW,CAACW,IAAZ,CAAiBC,IAAjB,CAAsB,UAACC,UAAD;AAAA,aAAgB,6CAAoBA,UAApB,CAAhB;AAAA,KAAtB,CAAf,GACIV,WADJ,GAEIC,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAiBD,CA/BD;;AAiCA,IAAMU,QAAQ,GAAG,SAAXA,QAAW,CACfC,SADe,EAEfC,SAFe,EAGZ;AACH,MAAkBC,YAAlB,GAAiEF,SAAjE,CAAQjB,QAAR;AAAA,MAA6CoB,eAA7C,GAAiEH,SAAjE,CAAgCf,WAAhC;AACA,MAAkBmB,YAAlB,GAAiEH,SAAjE,CAAQlB,QAAR;AAAA,MAA6CsB,eAA7C,GAAiEJ,SAAjE,CAAgChB,WAAhC;AAEA,MAAMqB,aAAa,GAAGJ,YAAY,KAAKE,YAAvC;AACA,MAAI,CAACE,aAAL,EAAoB,OAAO,KAAP;AAEpB,MAAMC,gBAAgB,GAAG,CAAC,CAACJ,eAAF,KAAsB,CAAC,CAACE,eAAjD;AACA,MAAI,CAACE,gBAAL,EAAuB,OAAO,KAAP;AAEvB,SAAO,IAAP;AACD,CAdD;;AAgBA,IAAMC,sBAAsB,GAAGC,kBAAMC,IAAN,CAC7B7B,yBAD6B,EAE7BkB,QAF6B,CAA/B;;AAYO,IAAMY,cAAc,GAAG,SAAjBA,cAAiB,CAG5B7B,KAH4B,EAIzB;AACH,2BAA6B,wCAA7B;AAAA,iDAAQC,QAAR;AAAA,MAAQA,QAAR,sCAAmB,KAAnB;;AACA,8BAAwB,gDAAxB;AAAA,MAAQE,WAAR,yBAAQA,WAAR;;AAEA,SAAO,gCAAC,sBAAD;AAA8BF,IAAAA,QAAQ,EAARA,QAA9B;AAAwCE,IAAAA,WAAW,EAAXA;AAAxC,KAA2DH,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CATM;;;AAWP6B,cAAc,CAACC,WAAf,GAA6B,8BAA7B","sourcesContent":["import React from 'react';\nimport type { GestureResponderEvent } from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nimport {\n  ChannelContextValue,\n  useChannelContext,\n} from '../../contexts/channelContext/ChannelContext';\nimport {\n  isSuggestionCommand,\n  SuggestionsContextValue,\n  useSuggestionsContext,\n} from '../../contexts/suggestionsContext/SuggestionsContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { Lightning } from '../../icons/Lightning';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\ntype CommandsButtonPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<ChannelContextValue<StreamChatGenerics>, 'disabled'> &\n  Pick<SuggestionsContextValue<StreamChatGenerics>, 'suggestions'> & {\n    /** Function that opens commands selector */\n    handleOnPress?: ((event: GestureResponderEvent) => void) & (() => void);\n  };\n\nconst CommandsButtonWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: CommandsButtonPropsWithContext<StreamChatGenerics>,\n) => {\n  const { disabled, handleOnPress, suggestions } = props;\n\n  const {\n    theme: {\n      colors: { accent_blue, grey },\n      messageInput: { commandsButton },\n    },\n  } = useTheme();\n\n  return (\n    <TouchableOpacity\n      disabled={disabled}\n      hitSlop={{ bottom: 15, left: 5, right: 15, top: 15 }}\n      onPress={handleOnPress}\n      style={[commandsButton]}\n      testID='commands-button'\n    >\n      <Lightning\n        pathFill={\n          suggestions && suggestions.data.some((suggestion) => isSuggestionCommand(suggestion))\n            ? accent_blue\n            : grey\n        }\n      />\n    </TouchableOpacity>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: CommandsButtonPropsWithContext<StreamChatGenerics>,\n  nextProps: CommandsButtonPropsWithContext<StreamChatGenerics>,\n) => {\n  const { disabled: prevDisabled, suggestions: prevSuggestions } = prevProps;\n  const { disabled: nextDisabled, suggestions: nextSuggestions } = nextProps;\n\n  const disabledEqual = prevDisabled === nextDisabled;\n  if (!disabledEqual) return false;\n\n  const suggestionsEqual = !!prevSuggestions === !!nextSuggestions;\n  if (!suggestionsEqual) return false;\n\n  return true;\n};\n\nconst MemoizedCommandsButton = React.memo(\n  CommandsButtonWithContext,\n  areEqual,\n) as typeof CommandsButtonWithContext;\n\nexport type CommandsButtonProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<CommandsButtonPropsWithContext<StreamChatGenerics>>;\n\n/**\n * UI Component for attach button in MessageInput component.\n */\nexport const CommandsButton = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: CommandsButtonProps<StreamChatGenerics>,\n) => {\n  const { disabled = false } = useChannelContext<StreamChatGenerics>();\n  const { suggestions } = useSuggestionsContext<StreamChatGenerics>();\n\n  return <MemoizedCommandsButton {...{ disabled, suggestions }} {...props} />;\n};\n\nCommandsButton.displayName = 'CommandsButton{messageInput}';\n"]}