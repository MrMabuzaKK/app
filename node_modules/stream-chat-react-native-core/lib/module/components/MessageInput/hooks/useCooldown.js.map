{"version":3,"sources":["useCooldown.ts"],"names":["useCooldown","Date","endsAt","setEndsAt","client","channel","data","cooldown","interval","disabledRoles","BuiltinRoles","Admin","ChannelModerator","userClientRole","user","role","userChannelRole","state","members","userID","disabledFor","roles","some","roleToSkip","includes","enabled","start","now","ONE_SECOND_IN_MS"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAEA;;AAQO,IAAMA,WAAW,GAAG,SAAdA,WAAc,GAEpB;AAAA;;AACL,kBAA4B,qBAAS,IAAIC,IAAJ,EAAT,CAA5B;AAAA;AAAA,MAAOC,MAAP;AAAA,MAAeC,SAAf;;AAEA,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AACA,2BAAoB,wCAApB;AAAA,MAAQC,OAAR,sBAAQA,OAAR;;AACA,aAAsB,CAAAA,OAAO,QAAP,YAAAA,OAAO,CAAEC,IAAT,KAAiB,EAAvC;AAAA,MAAQC,QAAR,QAAQA,QAAR;;AACA,MAAMC,QAAgB,GAAGD,QAAH,WAAGA,QAAH,GAAe,CAArC;AAQA,MAAME,aAAa,GAAG,CAACC,yBAAaC,KAAd,EAAqBD,yBAAaE,gBAAlC,CAAtB;AACA,MAAMC,cAAc,GAAG,CAAAT,MAAM,QAAN,4BAAAA,MAAM,CAAEU,IAAR,kCAAcC,IAAd,KAAsB,EAA7C;AACA,MAAMC,eAAe,GAAG,CAAAX,OAAO,QAAP,qCAAAA,OAAO,CAAEY,KAAT,CAAeC,OAAf,CAAuBd,MAAM,CAACe,MAAP,IAAiB,EAAxC,4CAA6CJ,IAA7C,KAAqD,EAA7E;;AAEA,MAAMK,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,WAClBZ,aAAa,CAACa,IAAd,CAAmB,UAACC,UAAD;AAAA,aAAgBF,KAAK,CAACG,QAAN,CAAeD,UAAf,CAAhB;AAAA,KAAnB,CADkB;AAAA,GAApB;;AAGA,MAAME,OAAO,GAAGjB,QAAQ,GAAG,CAAX,IAAgB,CAACY,WAAW,CAAC,CAACP,cAAD,EAAiBG,eAAjB,CAAD,CAA5C;;AAEA,MAAMU,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,QAAID,OAAJ,EAAa;AACXtB,MAAAA,SAAS,CAAC,IAAIF,IAAJ,CAASA,IAAI,CAAC0B,GAAL,KAAanB,QAAQ,GAAGoB,sBAAjC,CAAD,CAAT;AACD;AACF,GAJD;;AAMA,SAAO;AAAE1B,IAAAA,MAAM,EAANA,MAAF;AAAUwB,IAAAA,KAAK,EAALA;AAAV,GAAP;AACD,CAhCM","sourcesContent":["import { useState } from 'react';\n\nimport { BuiltinRoles, ChannelResponse, Role } from 'stream-chat';\n\nimport { useChannelContext } from '../../../contexts/channelContext/ChannelContext';\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\nimport { ONE_SECOND_IN_MS } from '../../../utils/date';\n\ntype Roles = Array<Role>;\n\n/**\n * useCooldown can be used to start a cooldown defined\n * for a Channel by setting an end time for\n **/\nexport const useCooldown = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const [endsAt, setEndsAt] = useState(new Date());\n\n  const { client } = useChatContext<StreamChatGenerics>();\n  const { channel } = useChannelContext<StreamChatGenerics>();\n  const { cooldown } = (channel?.data || {}) as ChannelResponse<StreamChatGenerics>;\n  const interval: number = cooldown ?? 0;\n\n  /**\n   * We get the roles a user has globally set on the Client, and the role\n   * they have locally within the chat. If any of the predefined\n   * `disabledRoles` are matched to either of the users roles, the user\n   * will not have a cooldown at all.\n   **/\n  const disabledRoles = [BuiltinRoles.Admin, BuiltinRoles.ChannelModerator];\n  const userClientRole = client?.user?.role || '';\n  const userChannelRole = channel?.state.members[client.userID || '']?.role || '';\n\n  const disabledFor = (roles: Roles) =>\n    disabledRoles.some((roleToSkip) => roles.includes(roleToSkip));\n\n  const enabled = interval > 0 && !disabledFor([userClientRole, userChannelRole]);\n\n  const start = () => {\n    if (enabled) {\n      setEndsAt(new Date(Date.now() + interval * ONE_SECOND_IN_MS));\n    }\n  };\n\n  return { endsAt, start };\n};\n"]}