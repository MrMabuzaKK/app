{"version":3,"sources":["ShowThreadMessageInChannelButton.tsx"],"names":["styles","StyleSheet","create","checkBox","alignItems","borderRadius","borderWidth","height","justifyContent","width","container","flexDirection","marginHorizontal","marginTop","innerContainer","text","fontSize","marginLeft","ShowThreadMessageInChannelButtonWithContext","props","allowThreadMessagesInChannel","sendThreadMessageInChannel","setSendThreadMessageInChannel","t","threadList","theme","colors","accent_blue","grey","white","messageInput","showThreadMessageInChannelButton","check","checkBoxActive","checkBoxInactive","prevSendInChannel","backgroundColor","borderColor","color","areEqual","prevProps","nextProps","prevAllowThreadMessagesInChannel","prevSendThreadMessageInChannel","prevT","prevThreadList","nextAllowThreadMessagesInChannel","nexSendThreadMessageInChannel","nextT","nextThreadList","tEqual","sendThreadMessageInChannelEqual","threadListEqual","allowThreadMessagesInChannelEqual","MemoizedShowThreadMessageInChannelButton","React","memo","ShowThreadMessageInChannelButton","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport {\n  MessageInputContextValue,\n  useMessageInputContext,\n} from '../../contexts/messageInputContext/MessageInputContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { ThreadContextValue, useThreadContext } from '../../contexts/threadContext/ThreadContext';\nimport {\n  TranslationContextValue,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\nimport { Check } from '../../icons';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\nconst styles = StyleSheet.create({\n  checkBox: {\n    alignItems: 'center',\n    borderRadius: 3,\n    borderWidth: 2,\n    height: 16,\n    justifyContent: 'center',\n    width: 16,\n  },\n  container: {\n    flexDirection: 'row',\n    marginHorizontal: 2,\n    marginTop: 8,\n  },\n  innerContainer: {\n    flexDirection: 'row',\n  },\n  text: {\n    fontSize: 13,\n    marginLeft: 12,\n  },\n});\n\nexport type ShowThreadMessageInChannelButtonWithContextProps = Pick<\n  MessageInputContextValue,\n  'sendThreadMessageInChannel' | 'setSendThreadMessageInChannel'\n> &\n  Pick<ThreadContextValue, 'allowThreadMessagesInChannel'> &\n  Pick<TranslationContextValue, 't'> & {\n    threadList?: boolean;\n  };\n\nexport const ShowThreadMessageInChannelButtonWithContext: React.FC<ShowThreadMessageInChannelButtonWithContextProps> =\n  (props) => {\n    const {\n      allowThreadMessagesInChannel,\n      sendThreadMessageInChannel,\n      setSendThreadMessageInChannel,\n      t,\n      threadList,\n    } = props;\n\n    const {\n      theme: {\n        colors: { accent_blue, grey, white },\n        messageInput: {\n          showThreadMessageInChannelButton: {\n            check,\n            checkBoxActive,\n            checkBoxInactive,\n            container,\n            innerContainer,\n            text,\n          },\n        },\n      },\n    } = useTheme();\n\n    if (!threadList || !allowThreadMessagesInChannel) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.container, container]} testID='show-thread-message-in-channel-button'>\n        <TouchableOpacity\n          onPress={() => setSendThreadMessageInChannel((prevSendInChannel) => !prevSendInChannel)}\n        >\n          <View style={[styles.innerContainer, innerContainer]}>\n            <View\n              style={[\n                styles.checkBox,\n                sendThreadMessageInChannel\n                  ? {\n                      backgroundColor: accent_blue,\n                      borderColor: accent_blue,\n                      ...checkBoxActive,\n                    }\n                  : { borderColor: grey, ...checkBoxInactive },\n              ]}\n            >\n              {sendThreadMessageInChannel && (\n                <Check height={16} pathFill={white} width={16} {...check} />\n              )}\n            </View>\n            <Text style={[styles.text, { color: grey }, text]}>{t('Also send to channel')}</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\nconst areEqual = (\n  prevProps: ShowThreadMessageInChannelButtonWithContextProps,\n  nextProps: ShowThreadMessageInChannelButtonWithContextProps,\n) => {\n  const {\n    allowThreadMessagesInChannel: prevAllowThreadMessagesInChannel,\n    sendThreadMessageInChannel: prevSendThreadMessageInChannel,\n    t: prevT,\n    threadList: prevThreadList,\n  } = prevProps;\n  const {\n    allowThreadMessagesInChannel: nextAllowThreadMessagesInChannel,\n    sendThreadMessageInChannel: nexSendThreadMessageInChannel,\n    t: nextT,\n    threadList: nextThreadList,\n  } = nextProps;\n\n  const tEqual = prevT === nextT;\n  if (!tEqual) return false;\n\n  const sendThreadMessageInChannelEqual =\n    prevSendThreadMessageInChannel === nexSendThreadMessageInChannel;\n  if (!sendThreadMessageInChannelEqual) return false;\n\n  const threadListEqual = prevThreadList === nextThreadList;\n  if (!threadListEqual) return false;\n\n  const allowThreadMessagesInChannelEqual =\n    prevAllowThreadMessagesInChannel === nextAllowThreadMessagesInChannel;\n  if (!allowThreadMessagesInChannelEqual) return false;\n\n  return true;\n};\n\nconst MemoizedShowThreadMessageInChannelButton = React.memo(\n  ShowThreadMessageInChannelButtonWithContext,\n  areEqual,\n) as typeof ShowThreadMessageInChannelButtonWithContext;\n\nexport type ShowThreadMessageInChannelButtonProps =\n  Partial<ShowThreadMessageInChannelButtonWithContextProps>;\n\nexport const ShowThreadMessageInChannelButton = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: ShowThreadMessageInChannelButtonProps,\n) => {\n  const { t } = useTranslationContext();\n  const { allowThreadMessagesInChannel } = useThreadContext<StreamChatGenerics>();\n  const { sendThreadMessageInChannel, setSendThreadMessageInChannel } =\n    useMessageInputContext<StreamChatGenerics>();\n\n  return (\n    <MemoizedShowThreadMessageInChannelButton\n      {...{\n        allowThreadMessagesInChannel,\n        sendThreadMessageInChannel,\n        setSendThreadMessageInChannel,\n        t,\n      }}\n      {...props}\n    />\n  );\n};\n\nShowThreadMessageInChannelButton.displayName =\n  'ShowThreadMessageInChannelButton{messageInput{showThreadMessageInChannelButton}}';\n"]}