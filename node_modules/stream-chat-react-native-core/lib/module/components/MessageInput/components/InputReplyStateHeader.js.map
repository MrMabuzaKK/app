{"version":3,"sources":["InputReplyStateHeader.tsx"],"names":["styles","StyleSheet","create","replyBoxHeader","alignItems","flexDirection","justifyContent","paddingBottom","replyBoxHeaderTitle","fontSize","fontWeight","InputReplyStateHeaderWithContext","clearQuotedMessageState","disabled","resetInput","t","theme","colors","black","grey","grey_gainsboro","messageInput","editingStateHeader","editingBoxHeader","editingBoxHeaderTitle","color","areEqual","prevProps","nextProps","prevDisabled","nextDisabled","disabledEqual","MemoizedInputReplyStateHeader","React","memo","InputReplyStateHeader","props","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport type { ChannelContextValue } from '../../../contexts/channelContext/ChannelContext';\nimport {\n  MessageInputContextValue,\n  useMessageInputContext,\n} from '../../../contexts/messageInputContext/MessageInputContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\nimport { useTranslationContext } from '../../../contexts/translationContext/TranslationContext';\n\nimport { CircleClose, CurveLineLeftUp } from '../../../icons';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\nconst styles = StyleSheet.create({\n  replyBoxHeader: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingBottom: 10,\n  },\n  replyBoxHeaderTitle: {\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n});\n\nexport type InputReplyStateHeaderPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<MessageInputContextValue<StreamChatGenerics>, 'clearQuotedMessageState' | 'resetInput'> &\n  Pick<ChannelContextValue<StreamChatGenerics>, 'disabled'>;\n\nexport const InputReplyStateHeaderWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  clearQuotedMessageState,\n  disabled,\n  resetInput,\n}: InputReplyStateHeaderPropsWithContext<StreamChatGenerics>) => {\n  const { t } = useTranslationContext();\n  const {\n    theme: {\n      colors: { black, grey, grey_gainsboro },\n      messageInput: {\n        editingStateHeader: { editingBoxHeader, editingBoxHeaderTitle },\n      },\n    },\n  } = useTheme();\n\n  return (\n    <View style={[styles.replyBoxHeader, editingBoxHeader]}>\n      <CurveLineLeftUp pathFill={grey_gainsboro} />\n      <Text style={[styles.replyBoxHeaderTitle, { color: black }, editingBoxHeaderTitle]}>\n        {t('Reply to Message')}\n      </Text>\n      <TouchableOpacity\n        disabled={disabled}\n        onPress={() => {\n          resetInput();\n          clearQuotedMessageState();\n        }}\n        testID='close-button'\n      >\n        <CircleClose pathFill={grey} />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: InputReplyStateHeaderPropsWithContext<StreamChatGenerics>,\n  nextProps: InputReplyStateHeaderPropsWithContext<StreamChatGenerics>,\n) => {\n  const { disabled: prevDisabled } = prevProps;\n  const { disabled: nextDisabled } = nextProps;\n\n  const disabledEqual = prevDisabled === nextDisabled;\n  if (!disabledEqual) return false;\n\n  return true;\n};\n\nconst MemoizedInputReplyStateHeader = React.memo(\n  InputReplyStateHeaderWithContext,\n  areEqual,\n) as typeof InputReplyStateHeaderWithContext;\n\nexport type InputReplyStateHeaderProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<InputReplyStateHeaderPropsWithContext<StreamChatGenerics>>;\n\nexport const InputReplyStateHeader = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: InputReplyStateHeaderProps<StreamChatGenerics>,\n) => {\n  const { clearQuotedMessageState, resetInput } = useMessageInputContext<StreamChatGenerics>();\n\n  return <MemoizedInputReplyStateHeader {...{ clearQuotedMessageState, resetInput }} {...props} />;\n};\n\nInputReplyStateHeader.displayName = 'ReplyStateHeader{messageInput}';\n"]}