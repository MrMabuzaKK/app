{"version":3,"sources":["InputGiphySearch.tsx"],"names":["styles","StyleSheet","create","autoCompleteInputContainer","alignItems","flexDirection","paddingLeft","paddingRight","giphyContainer","borderRadius","height","marginRight","paddingHorizontal","giphyText","fontSize","fontWeight","InputGiphySearchWithContext","additionalTextInputProps","cooldownEndsAt","disabled","setGiphyActive","setShowMoreOptions","cooldownRemainingSeconds","seconds","theme","colors","accent_blue","grey","white","messageInput","giphyCommandInput","backgroundColor","color","areEqual","prevProps","nextProps","prevDisabled","nextDisabled","disabledEqual","MemoizedInputGiphySearch","React","memo","InputGiphySearch","props","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport type { ChannelContextValue } from '../../../contexts/channelContext/ChannelContext';\nimport {\n  MessageInputContextValue,\n  useMessageInputContext,\n} from '../../../contexts/messageInputContext/MessageInputContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\n\nimport { CircleClose, Lightning } from '../../../icons';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\nimport { AutoCompleteInput } from '../../AutoCompleteInput/AutoCompleteInput';\nimport { useCountdown } from '../hooks/useCountdown';\n\nconst styles = StyleSheet.create({\n  autoCompleteInputContainer: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    paddingLeft: 8,\n    paddingRight: 10,\n  },\n  giphyContainer: {\n    alignItems: 'center',\n    borderRadius: 12,\n    flexDirection: 'row',\n    height: 24,\n    marginRight: 8,\n    paddingHorizontal: 8,\n  },\n  giphyText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n});\n\nexport type InputGiphySearchPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<\n  MessageInputContextValue<StreamChatGenerics>,\n  'additionalTextInputProps' | 'cooldownEndsAt' | 'setGiphyActive' | 'setShowMoreOptions'\n> &\n  Pick<ChannelContextValue<StreamChatGenerics>, 'disabled'>;\n\nexport const InputGiphySearchWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  additionalTextInputProps,\n  cooldownEndsAt,\n  disabled,\n  setGiphyActive,\n  setShowMoreOptions,\n}: InputGiphySearchPropsWithContext<StreamChatGenerics>) => {\n  const { seconds: cooldownRemainingSeconds } = useCountdown(cooldownEndsAt);\n\n  const {\n    theme: {\n      colors: { accent_blue, grey, white },\n      messageInput: {\n        autoCompleteInputContainer,\n        giphyCommandInput: { giphyContainer, giphyText },\n      },\n    },\n  } = useTheme();\n\n  return (\n    <View style={[styles.autoCompleteInputContainer, autoCompleteInputContainer]}>\n      <View style={[styles.giphyContainer, { backgroundColor: accent_blue }, giphyContainer]}>\n        <Lightning height={16} pathFill={white} width={16} />\n        <Text style={[styles.giphyText, { color: white }, giphyText]}>GIPHY</Text>\n      </View>\n\n      <AutoCompleteInput<StreamChatGenerics>\n        additionalTextInputProps={additionalTextInputProps}\n        cooldownActive={!!cooldownRemainingSeconds}\n      />\n      <TouchableOpacity\n        disabled={disabled}\n        onPress={() => {\n          setGiphyActive(false);\n          setShowMoreOptions(true);\n        }}\n        testID='close-button'\n      >\n        <CircleClose height={20} pathFill={grey} width={20} />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: InputGiphySearchPropsWithContext<StreamChatGenerics>,\n  nextProps: InputGiphySearchPropsWithContext<StreamChatGenerics>,\n) => {\n  const { disabled: prevDisabled } = prevProps;\n  const { disabled: nextDisabled } = nextProps;\n\n  const disabledEqual = prevDisabled === nextDisabled;\n  if (!disabledEqual) return false;\n\n  return true;\n};\n\nconst MemoizedInputGiphySearch = React.memo(\n  InputGiphySearchWithContext,\n  areEqual,\n) as typeof InputGiphySearchWithContext;\n\nexport type InputGiphySearchProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<InputGiphySearchPropsWithContext<StreamChatGenerics>>;\n\nexport const InputGiphySearch = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: InputGiphySearchProps<StreamChatGenerics>,\n) => {\n  const { additionalTextInputProps, cooldownEndsAt, setGiphyActive, setShowMoreOptions } =\n    useMessageInputContext<StreamChatGenerics>();\n\n  return (\n    <MemoizedInputGiphySearch\n      {...{ additionalTextInputProps, cooldownEndsAt, setGiphyActive, setShowMoreOptions }}\n      {...props}\n    />\n  );\n};\n\nInputGiphySearch.displayName = 'InputGiphySearch{messageInput}';\n"]}