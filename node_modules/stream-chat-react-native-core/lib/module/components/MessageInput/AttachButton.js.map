{"version":3,"sources":["AttachButton.tsx"],"names":["AttachButtonWithContext","props","disabled","handleOnPress","selectedPicker","theme","colors","accent_blue","grey","attachButton","messageInput","bottom","left","right","top","areEqual","prevProps","nextProps","prevDisabled","prevHandleOnPress","prevSelectedPicker","nextDisabled","nextHandleOnPress","nextSelectedPicker","disabledEqual","handleOnPressEqual","selectedPickerEqual","MemoizedAttachButton","React","memo","AttachButton","displayName"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAIA;;AACA;;;;;AAYA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAG9BC,KAH8B,EAI3B;AACH,MAAQC,QAAR,GAAoDD,KAApD,CAAQC,QAAR;AAAA,MAAkBC,aAAlB,GAAoDF,KAApD,CAAkBE,aAAlB;AAAA,MAAiCC,cAAjC,GAAoDH,KAApD,CAAiCG,cAAjC;;AACA,kBAKI,6BALJ;AAAA,kCACEC,KADF;AAAA,8CAEIC,MAFJ;AAAA,MAEcC,WAFd,yBAEcA,WAFd;AAAA,MAE2BC,IAF3B,yBAE2BA,IAF3B;AAAA,MAGoBC,YAHpB,mBAGIC,YAHJ,CAGoBD,YAHpB;;AAOA,SACE,gCAAC,2CAAD;AACE,IAAA,QAAQ,EAAEP,QADZ;AAEE,IAAA,OAAO,EAAE;AAAES,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,IAAI,EAAE,EAApB;AAAwBC,MAAAA,KAAK,EAAE,CAA/B;AAAkCC,MAAAA,GAAG,EAAE;AAAvC,KAFX;AAGE,IAAA,OAAO,EAAEZ,QAAQ,GAAG;AAAA,aAAM,IAAN;AAAA,KAAH,GAAgBC,aAHnC;AAIE,IAAA,KAAK,EAAE,CAACM,YAAD,CAJT;AAKE,IAAA,MAAM,EAAC,eALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,gCAAC,cAAD;AAAQ,IAAA,QAAQ,EAAEL,cAAc,KAAK,QAAnB,GAA8BG,WAA9B,GAA4CC,IAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD,CAxBD;;AA0BA,IAAMO,QAAQ,GAAG,SAAXA,QAAW,CACfC,SADe,EAEfC,SAFe,EAGZ;AACH,MACYC,YADZ,GAIIF,SAJJ,CACEd,QADF;AAAA,MAEiBiB,iBAFjB,GAIIH,SAJJ,CAEEb,aAFF;AAAA,MAGkBiB,kBAHlB,GAIIJ,SAJJ,CAGEZ,cAHF;AAKA,MACYiB,YADZ,GAIIJ,SAJJ,CACEf,QADF;AAAA,MAEiBoB,iBAFjB,GAIIL,SAJJ,CAEEd,aAFF;AAAA,MAGkBoB,kBAHlB,GAIIN,SAJJ,CAGEb,cAHF;AAMA,MAAMoB,aAAa,GAAGN,YAAY,KAAKG,YAAvC;AACA,MAAI,CAACG,aAAL,EAAoB,OAAO,KAAP;AAEpB,MAAMC,kBAAkB,GAAGN,iBAAiB,KAAKG,iBAAjD;AACA,MAAI,CAACG,kBAAL,EAAyB,OAAO,KAAP;AAEzB,MAAMC,mBAAmB,GAAGN,kBAAkB,KAAKG,kBAAnD;AACA,MAAI,CAACG,mBAAL,EAA0B,OAAO,KAAP;AAE1B,SAAO,IAAP;AACD,CAzBD;;AA2BA,IAAMC,oBAAoB,GAAGC,kBAAMC,IAAN,CAC3B7B,uBAD2B,EAE3Be,QAF2B,CAA7B;;AAYO,IAAMe,YAAY,GAAG,SAAfA,YAAe,CAG1B7B,KAH0B,EAIvB;AACH,2BAA6B,wCAA7B;AAAA,iDAAQC,QAAR;AAAA,MAAQA,QAAR,sCAAmB,KAAnB;;AACA,8BAA2B,0DAA3B;AAAA,MAAQE,cAAR,yBAAQA,cAAR;;AAEA,SAAO,gCAAC,oBAAD;AAA4BF,IAAAA,QAAQ,EAARA,QAA5B;AAAsCE,IAAAA,cAAc,EAAdA;AAAtC,KAA4DH,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CATM;;;AAWP6B,YAAY,CAACC,WAAb,GAA2B,4BAA3B","sourcesContent":["import React from 'react';\nimport type { GestureResponderEvent } from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nimport { useAttachmentPickerContext } from '../../contexts/attachmentPickerContext/AttachmentPickerContext';\nimport {\n  ChannelContextValue,\n  useChannelContext,\n} from '../../contexts/channelContext/ChannelContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { Attach } from '../../icons/Attach';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\ntype AttachButtonPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<ChannelContextValue<StreamChatGenerics>, 'disabled'> & {\n  /** Function that opens attachment options bottom sheet */\n  handleOnPress?: ((event: GestureResponderEvent) => void) & (() => void);\n  selectedPicker?: 'images';\n};\n\nconst AttachButtonWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: AttachButtonPropsWithContext<StreamChatGenerics>,\n) => {\n  const { disabled, handleOnPress, selectedPicker } = props;\n  const {\n    theme: {\n      colors: { accent_blue, grey },\n      messageInput: { attachButton },\n    },\n  } = useTheme();\n\n  return (\n    <TouchableOpacity\n      disabled={disabled}\n      hitSlop={{ bottom: 15, left: 15, right: 5, top: 15 }}\n      onPress={disabled ? () => null : handleOnPress}\n      style={[attachButton]}\n      testID='attach-button'\n    >\n      <Attach pathFill={selectedPicker === 'images' ? accent_blue : grey} />\n    </TouchableOpacity>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: AttachButtonPropsWithContext<StreamChatGenerics>,\n  nextProps: AttachButtonPropsWithContext<StreamChatGenerics>,\n) => {\n  const {\n    disabled: prevDisabled,\n    handleOnPress: prevHandleOnPress,\n    selectedPicker: prevSelectedPicker,\n  } = prevProps;\n  const {\n    disabled: nextDisabled,\n    handleOnPress: nextHandleOnPress,\n    selectedPicker: nextSelectedPicker,\n  } = nextProps;\n\n  const disabledEqual = prevDisabled === nextDisabled;\n  if (!disabledEqual) return false;\n\n  const handleOnPressEqual = prevHandleOnPress === nextHandleOnPress;\n  if (!handleOnPressEqual) return false;\n\n  const selectedPickerEqual = prevSelectedPicker === nextSelectedPicker;\n  if (!selectedPickerEqual) return false;\n\n  return true;\n};\n\nconst MemoizedAttachButton = React.memo(\n  AttachButtonWithContext,\n  areEqual,\n) as typeof AttachButtonWithContext;\n\nexport type AttachButtonProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<AttachButtonPropsWithContext<StreamChatGenerics>>;\n\n/**\n * UI Component for attach button in MessageInput component.\n */\nexport const AttachButton = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: AttachButtonProps<StreamChatGenerics>,\n) => {\n  const { disabled = false } = useChannelContext<StreamChatGenerics>();\n  const { selectedPicker } = useAttachmentPickerContext();\n\n  return <MemoizedAttachButton {...{ disabled, selectedPicker }} {...props} />;\n};\n\nAttachButton.displayName = 'AttachButton{messageInput}';\n"]}