{"version":3,"sources":["AutoCompleteSuggestionHeader.tsx"],"names":["styles","StyleSheet","create","container","alignItems","flexDirection","padding","title","fontSize","paddingLeft","AutoCompleteSuggestionHeaderWithContext","queryText","triggerType","t","theme","colors","accent_blue","grey","messageInput","suggestions","header","color","areEqual","prevProps","nextProps","prevQueryText","prevType","nextQueryText","nextType","typeEqual","valueEqual","MemoizedAutoCompleteSuggestionHeader","React","memo","AutoCompleteSuggestionHeader","props","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport type { SuggestionsContextValue } from '../../contexts/suggestionsContext/SuggestionsContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\n\nimport { Lightning } from '../../icons/Lightning';\nimport { Smile } from '../../icons/Smile';\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\nexport type AutoCompleteSuggestionHeaderPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<SuggestionsContextValue<StreamChatGenerics>, 'triggerType' | 'queryText'>;\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    padding: 8,\n  },\n  title: {\n    fontSize: 14,\n    paddingLeft: 8,\n  },\n});\n\nconst AutoCompleteSuggestionHeaderWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  queryText,\n  triggerType,\n}: AutoCompleteSuggestionHeaderPropsWithContext<StreamChatGenerics>) => {\n  const { t } = useTranslationContext();\n  const {\n    theme: {\n      colors: { accent_blue, grey },\n      messageInput: {\n        suggestions: {\n          header: { container, title },\n        },\n      },\n    },\n  } = useTheme();\n\n  if (triggerType === 'command') {\n    return (\n      <View style={[styles.container, container]}>\n        <Lightning pathFill={accent_blue} />\n        <Text style={[styles.title, { color: grey }, title]} testID='commands-header-title'>\n          {t('Instant Commands')}\n        </Text>\n      </View>\n    );\n  } else if (triggerType === 'emoji') {\n    return (\n      <View style={[styles.container, container]}>\n        <Smile pathFill={accent_blue} />\n        <Text style={[styles.title, { color: grey }, title]} testID='emojis-header-title'>\n          {t('Emoji matching') + ' \"' + queryText + '\"'}\n        </Text>\n      </View>\n    );\n  } else if (triggerType === 'mention') {\n    return null;\n  } else {\n    return null;\n  }\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: AutoCompleteSuggestionHeaderPropsWithContext<StreamChatGenerics>,\n  nextProps: AutoCompleteSuggestionHeaderPropsWithContext<StreamChatGenerics>,\n) => {\n  const { queryText: prevQueryText, triggerType: prevType } = prevProps;\n  const { queryText: nextQueryText, triggerType: nextType } = nextProps;\n\n  const typeEqual = prevType === nextType;\n  if (!typeEqual) return false;\n\n  const valueEqual = prevQueryText === nextQueryText;\n  if (!valueEqual) return false;\n  return true;\n};\n\nconst MemoizedAutoCompleteSuggestionHeader = React.memo(\n  AutoCompleteSuggestionHeaderWithContext,\n  areEqual,\n) as typeof AutoCompleteSuggestionHeaderWithContext;\n\nexport type AutoCompleteSuggestionHeaderProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = AutoCompleteSuggestionHeaderPropsWithContext<StreamChatGenerics>;\n\nexport const AutoCompleteSuggestionHeader = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: AutoCompleteSuggestionHeaderProps<StreamChatGenerics>,\n) => <MemoizedAutoCompleteSuggestionHeader {...props} />;\n\nAutoCompleteSuggestionHeader.displayName =\n  'AutoCompleteSuggestionHeader{messageInput{suggestions{Header}}}';\n"]}