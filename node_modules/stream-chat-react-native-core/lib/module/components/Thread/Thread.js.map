{"version":3,"sources":["Thread.tsx"],"names":["ThreadWithContext","props","additionalMessageInputProps","additionalMessageListProps","autoFocus","closeThread","closeThreadOnDismount","disabled","loadMoreThread","MessageInput","DefaultMessageInput","MessageList","onThreadDismount","thread","loadMoreThreadAsync","id","reply_count","ThreadFooterComponent","editable","Thread","client","threadList","reloadThread","Error"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\nimport { ThreadFooterComponent } from './components/ThreadFooterComponent';\n\nimport { useChannelContext } from '../../contexts/channelContext/ChannelContext';\nimport { ChatContextValue, useChatContext } from '../../contexts/chatContext/ChatContext';\nimport {\n  MessagesContextValue,\n  useMessagesContext,\n} from '../../contexts/messagesContext/MessagesContext';\nimport { ThreadContextValue, useThreadContext } from '../../contexts/threadContext/ThreadContext';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport {\n  MessageInput as DefaultMessageInput,\n  MessageInputProps,\n} from '../MessageInput/MessageInput';\nimport type { MessageListProps } from '../MessageList/MessageList';\n\ntype ThreadPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<ChatContextValue<StreamChatGenerics>, 'client'> &\n  Pick<MessagesContextValue<StreamChatGenerics>, 'MessageList'> &\n  Pick<\n    ThreadContextValue<StreamChatGenerics>,\n    'closeThread' | 'loadMoreThread' | 'reloadThread' | 'thread'\n  > & {\n    /**\n     * Additional props for underlying MessageInput component.\n     * Available props - https://getstream.io/chat/docs/sdk/reactnative/ui-components/message-input/#props\n     * */\n    additionalMessageInputProps?: Partial<MessageInputProps<StreamChatGenerics>>;\n    /**\n     * Additional props for underlying MessageList component.\n     * Available props - https://getstream.io/chat/docs/sdk/reactnative/ui-components/message-list/#props\n     * */\n    additionalMessageListProps?: Partial<MessageListProps<StreamChatGenerics>>;\n    /** Make input focus on mounting thread */\n    autoFocus?: boolean;\n    /** Closes thread on dismount, defaults to true */\n    closeThreadOnDismount?: boolean;\n    /** Disables the thread UI. So MessageInput and MessageList will be disabled. */\n    disabled?: boolean;\n    /**\n     * **Customized MessageInput component to used within Thread instead of default MessageInput\n     * **Available from [MessageInput](https://getstream.io/chat/docs/sdk/reactnative/ui-components/message-input)**\n     */\n    MessageInput?: React.ComponentType<MessageInputProps<StreamChatGenerics>>;\n    /**\n     * Call custom function on closing thread if handling thread state elsewhere\n     */\n    onThreadDismount?: () => void;\n  };\n\nconst ThreadWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: ThreadPropsWithContext<StreamChatGenerics>,\n) => {\n  const {\n    additionalMessageInputProps,\n    additionalMessageListProps,\n    autoFocus = true,\n    closeThread,\n    closeThreadOnDismount = true,\n    disabled,\n    loadMoreThread,\n    MessageInput = DefaultMessageInput,\n    MessageList,\n    onThreadDismount,\n    thread,\n  } = props;\n\n  useEffect(() => {\n    const loadMoreThreadAsync = async () => {\n      await loadMoreThread();\n    };\n\n    if (thread?.id && thread.reply_count) {\n      loadMoreThreadAsync();\n    }\n  }, []);\n\n  useEffect(\n    () => () => {\n      if (closeThreadOnDismount) {\n        closeThread();\n      }\n      if (onThreadDismount) {\n        onThreadDismount();\n      }\n    },\n    [],\n  );\n\n  if (!thread) return null;\n\n  return (\n    <React.Fragment key={`thread-${thread.id}`}>\n      <MessageList\n        FooterComponent={ThreadFooterComponent}\n        threadList\n        {...additionalMessageListProps}\n      />\n      <MessageInput<StreamChatGenerics>\n        additionalTextInputProps={{ autoFocus, editable: !disabled }}\n        threadList\n        {...additionalMessageInputProps}\n      />\n    </React.Fragment>\n  );\n};\n\nexport type ThreadProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<ThreadPropsWithContext<StreamChatGenerics>>;\n\n/**\n * Thread - The Thread renders a parent message with a list of replies. Use the standard message list of the main channel's messages.\n * The thread is only used for the list of replies to a message.\n *\n * Thread is a consumer of [channel context](https://getstream.io/chat/docs/sdk/reactnative/contexts/channel-context/)\n * Underlying MessageList, MessageInput and Message components can be customized using props:\n * - additionalMessageListProps\n * - additionalMessageInputProps\n */\nexport const Thread = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: ThreadProps<StreamChatGenerics>,\n) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n  const { threadList } = useChannelContext<StreamChatGenerics>();\n  const { MessageList } = useMessagesContext<StreamChatGenerics>();\n  const { closeThread, loadMoreThread, reloadThread, thread } =\n    useThreadContext<StreamChatGenerics>();\n\n  if (thread?.id && !threadList) {\n    throw new Error(\n      'Please add a threadList prop to your Channel component when rendering a thread list. Check our Channel documentation for more info: https://getstream.io/chat/docs/sdk/reactnative/core-components/channel/#threadlist',\n    );\n  }\n\n  return (\n    <ThreadWithContext<StreamChatGenerics>\n      {...{\n        client,\n        closeThread,\n        loadMoreThread,\n        MessageList,\n        reloadThread,\n        thread,\n      }}\n      {...props}\n    />\n  );\n};\n"]}