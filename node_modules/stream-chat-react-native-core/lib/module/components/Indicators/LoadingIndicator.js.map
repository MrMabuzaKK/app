{"version":3,"sources":["LoadingIndicator.tsx"],"names":["styles","StyleSheet","create","container","alignItems","flex","justifyContent","loadingText","fontSize","fontWeight","marginTop","LoadingIndicatorWrapper","text","theme","black","colors","loadingIndicator","color","LoadingIndicator","props","listType","t","displayName"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;AAEA,IAAMA,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,cAAc,EAAE;AAHP,GADoB;AAM/BC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE,EADC;AAEXC,IAAAA,UAAU,EAAE,KAFD;AAGXC,IAAAA,SAAS,EAAE;AAHA;AANkB,CAAlB,CAAf;;AAaA,IAAMC,uBAAmD,GAAG,SAAtDA,uBAAsD,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AACxE,kBAKI,6BALJ;AAAA,kCACEC,KADF;AAAA,MAEcC,KAFd,mBAEIC,MAFJ,CAEcD,KAFd;AAAA,8CAGIE,gBAHJ;AAAA,MAGwBb,SAHxB,yBAGwBA,SAHxB;AAAA,MAGmCI,WAHnC,yBAGmCA,WAHnC;;AAOA,SACE,gCAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACP,MAAM,CAACG,SAAR,EAAmBA,SAAnB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,gCAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACH,MAAM,CAACO,WAAR,EAAqB;AAAEU,MAAAA,KAAK,EAAEH;AAAT,KAArB,EAAuCP,WAAvC,CAAb;AAAkE,IAAA,MAAM,EAAC,SAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,IADH,CAFF,CADF;AAQD,CAhBD;;AA0BO,IAAMM,gBAAwC,GAAG,SAA3CA,gBAA2C,CAACC,KAAD,EAAW;AACjE,MAAQC,QAAR,GAAkCD,KAAlC,CAAQC,QAAR;AAAA,MAAkBb,WAAlB,GAAkCY,KAAlC,CAAkBZ,WAAlB;;AAEA,8BAAc,gDAAd;AAAA,MAAQc,CAAR,yBAAQA,CAAR;;AAEA,MAAId,WAAJ,EAAiB;AACf,WAAO,gCAAC,uBAAD;AAAyB,MAAA,IAAI,EAAEA,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,UAAQa,QAAR;AACE,SAAK,SAAL;AACE,aAAO,gCAAC,uBAAD;AAAyB,QAAA,IAAI,EAAEC,CAAC,CAAC,qBAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACF,SAAK,SAAL;AACE,aAAO,gCAAC,uBAAD;AAAyB,QAAA,IAAI,EAAEA,CAAC,CAAC,qBAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACF;AACE,aAAO,gCAAC,uBAAD;AAAyB,QAAA,IAAI,EAAEA,CAAC,CAAC,YAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AANJ;AAQD,CAjBM;;;AAmBPH,gBAAgB,CAACI,WAAjB,GAA+B,oCAA/B","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\nimport { Spinner } from '../Spinner/Spinner';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  loadingText: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginTop: 20,\n  },\n});\n\nconst LoadingIndicatorWrapper: React.FC<{ text: string }> = ({ text }) => {\n  const {\n    theme: {\n      colors: { black },\n      loadingIndicator: { container, loadingText },\n    },\n  } = useTheme();\n\n  return (\n    <View style={[styles.container, container]}>\n      <Spinner />\n      <Text style={[styles.loadingText, { color: black }, loadingText]} testID='loading'>\n        {text}\n      </Text>\n    </View>\n  );\n};\n\nexport type LoadingProps = {\n  listType?: 'channel' | 'message' | 'default';\n  loadingText?: string;\n};\n\n/**\n * UI Component for LoadingIndicator\n */\nexport const LoadingIndicator: React.FC<LoadingProps> = (props) => {\n  const { listType, loadingText } = props;\n\n  const { t } = useTranslationContext();\n\n  if (loadingText) {\n    return <LoadingIndicatorWrapper text={loadingText} />;\n  }\n\n  switch (listType) {\n    case 'channel':\n      return <LoadingIndicatorWrapper text={t('Loading channels...')} />;\n    case 'message':\n      return <LoadingIndicatorWrapper text={t('Loading messages...')} />;\n    default:\n      return <LoadingIndicatorWrapper text={t('Loading...')} />;\n  }\n};\n\nLoadingIndicator.displayName = 'LoadingIndicator{loadingIndicator}';\n"]}