{"version":3,"sources":["LoadingErrorIndicator.tsx"],"names":["styles","StyleSheet","create","container","alignItems","height","justifyContent","width","errorText","fontSize","fontWeight","marginTop","retryText","LoadingErrorWrapper","props","children","onPress","text","theme","accent_red","colors","loadingErrorIndicator","color","LoadingErrorIndicator","listType","retry","black","t","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    height: '100%',\n    justifyContent: 'center',\n    width: '100%',\n  },\n  errorText: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginTop: 20,\n  },\n  retryText: {\n    fontSize: 30,\n    fontWeight: '600',\n  },\n});\n\ntype LoadingErrorWrapperProps = {\n  text: string;\n  onPress?: () => void;\n};\n\nconst LoadingErrorWrapper: React.FC<LoadingErrorWrapperProps> = (props) => {\n  const { children, onPress, text } = props;\n\n  const {\n    theme: {\n      colors: { accent_red },\n      loadingErrorIndicator: { container, errorText },\n    },\n  } = useTheme();\n\n  return (\n    <TouchableOpacity onPress={onPress} style={[styles.container, container]}>\n      <Text style={[styles.errorText, { color: accent_red }, errorText]} testID='loading-error'>\n        {text}\n      </Text>\n      {children}\n    </TouchableOpacity>\n  );\n};\n\nexport type LoadingErrorProps = {\n  error?: boolean | Error;\n  listType?: 'channel' | 'message' | 'default';\n  loadNextPage?: () => Promise<void>;\n  retry?: () => void;\n};\n\nexport const LoadingErrorIndicator: React.FC<LoadingErrorProps> = (props) => {\n  const { listType, retry = () => null } = props;\n\n  const {\n    theme: {\n      colors: { black },\n      loadingErrorIndicator: { retryText },\n    },\n  } = useTheme();\n  const { t } = useTranslationContext();\n\n  switch (listType) {\n    case 'channel':\n      return (\n        <LoadingErrorWrapper onPress={retry} text={t('Error loading channel list...')}>\n          <Text style={[styles.retryText, { color: black }, retryText]}>‚ü≥</Text>\n        </LoadingErrorWrapper>\n      );\n    case 'message':\n      return (\n        <LoadingErrorWrapper\n          onPress={retry}\n          text={t('Error loading messages for this channel...')}\n        />\n      );\n    default:\n      return <LoadingErrorWrapper text={t('Error loading')} />;\n  }\n};\n\nLoadingErrorIndicator.displayName = 'LoadingErrorIndicator{loadingErrorIndicator}';\n"]}