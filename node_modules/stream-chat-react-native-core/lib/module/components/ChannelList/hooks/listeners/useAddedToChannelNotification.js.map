{"version":3,"sources":["useAddedToChannelNotification.ts"],"names":["useAddedToChannelNotification","onAddedToChannel","setChannels","client","handleEvent","event","channel","id","type","channels","on","off"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAIA;;AAGA;;AAWO,IAAMA,6BAA6B,GAAG,SAAhCA,6BAAgC,OAKP;AAAA,MAFpCC,gBAEoC,QAFpCA,gBAEoC;AAAA,MADpCC,WACoC,QADpCA,WACoC;;AACpC,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,wBAAU,YAAM;AACd,QAAMC,WAAW;AAAA,kFAAG,iBAAOC,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACd,OAAOJ,gBAAP,KAA4B,UADd;AAAA;AAAA;AAAA;;AAEhBA,gBAAAA,gBAAgB,CAACC,WAAD,EAAcG,KAAd,CAAhB;AAFgB;AAAA;;AAAA;AAAA,sBAIZ,kBAAAA,KAAK,CAACC,OAAN,4BAAeC,EAAf,uBAAqBF,KAAK,CAACC,OAA3B,aAAqB,gBAAeE,IAJxB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKQ,uBAA+B;AACnDL,kBAAAA,MAAM,EAANA,MADmD;AAEnDI,kBAAAA,EAAE,EAAEF,KAAK,CAACC,OAAN,CAAcC,EAFiC;AAGnDC,kBAAAA,IAAI,EAAEH,KAAK,CAACC,OAAN,CAAcE;AAH+B,iBAA/B,CALR;;AAAA;AAKRF,gBAAAA,OALQ;AAUdJ,gBAAAA,WAAW,CAAC,UAACO,QAAD;AAAA,yBAAc,yBAAQH,OAAR,6CAAoBG,QAApB,IAA+B,KAA/B,CAAd;AAAA,iBAAD,CAAX;;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAXL,WAAW;AAAA;AAAA;AAAA,OAAjB;;AAeAD,IAAAA,MAAM,CAACO,EAAP,CAAU,+BAAV,EAA2CN,WAA3C;AACA,WAAO;AAAA,aAAMD,MAAM,CAACQ,GAAP,CAAW,+BAAX,EAA4CP,WAA5C,CAAN;AAAA,KAAP;AACD,GAlBD,EAkBG,EAlBH;AAmBD,CA3BM","sourcesContent":["import { useEffect } from 'react';\n\nimport uniqBy from 'lodash/uniqBy';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\nimport { getChannel } from '../../utils';\n\ntype Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  {\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>;\n    onAddedToChannel?: (\n      setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n      event: Event<StreamChatGenerics>,\n    ) => void;\n  };\n\nexport const useAddedToChannelNotification = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  onAddedToChannel,\n  setChannels,\n}: Parameters<StreamChatGenerics>) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  useEffect(() => {\n    const handleEvent = async (event: Event<StreamChatGenerics>) => {\n      if (typeof onAddedToChannel === 'function') {\n        onAddedToChannel(setChannels, event);\n      } else {\n        if (event.channel?.id && event.channel?.type) {\n          const channel = await getChannel<StreamChatGenerics>({\n            client,\n            id: event.channel.id,\n            type: event.channel.type,\n          });\n          setChannels((channels) => uniqBy([channel, ...channels], 'cid'));\n        }\n      }\n    };\n\n    client.on('notification.added_to_channel', handleEvent);\n    return () => client.off('notification.added_to_channel', handleEvent);\n  }, []);\n};\n"]}