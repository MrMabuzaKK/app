{"version":3,"sources":["useChannelHidden.ts"],"names":["useChannelHidden","onChannelHidden","setChannels","client","handleEvent","event","channels","index","findIndex","channel","cid","splice","on","off"],"mappings":";;;;;;;;;AAAA;;AAIA;;AAaO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,OAKM;AAAA,MAFpCC,eAEoC,QAFpCA,eAEoC;AAAA,MADpCC,WACoC,QADpCA,WACoC;;AACpC,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,wBAAU,YAAM;AACd,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAsC;AACxD,UAAI,OAAOJ,eAAP,KAA2B,UAA/B,EAA2C;AACzCA,QAAAA,eAAe,CAACC,WAAD,EAAcG,KAAd,CAAf;AACD,OAFD,MAEO;AACLH,QAAAA,WAAW,CAAC,UAACI,QAAD,EAAc;AACxB,cAAMC,KAAK,GAAGD,QAAQ,CAACE,SAAT,CACZ,UAACC,OAAD;AAAA;;AAAA,mBAAaA,OAAO,CAACC,GAAR,MAAiBL,KAAK,CAACK,GAAN,uBAAaL,KAAK,CAACI,OAAnB,qBAAa,eAAeC,GAA5B,CAAjB,CAAb;AAAA,WADY,CAAd;;AAGA,cAAIH,KAAK,IAAI,CAAb,EAAgB;AACdD,YAAAA,QAAQ,CAACK,MAAT,CAAgBJ,KAAhB,EAAuB,CAAvB;AACD;;AACD,qDAAWD,QAAX;AACD,SARU,CAAX;AASD;AACF,KAdD;;AAgBAH,IAAAA,MAAM,CAACS,EAAP,CAAU,gBAAV,EAA4BR,WAA5B;AACA,WAAO;AAAA,aAAMD,MAAM,CAACU,GAAP,CAAW,gBAAX,EAA6BT,WAA7B,CAAN;AAAA,KAAP;AACD,GAnBD,EAmBG,EAnBH;AAoBD,CA5BM","sourcesContent":["import { useEffect } from 'react';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\n\ntype Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  {\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>;\n    onChannelHidden?: (\n      setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n      event: Event<StreamChatGenerics>,\n    ) => void;\n  };\n\nexport const useChannelHidden = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  onChannelHidden,\n  setChannels,\n}: Parameters<StreamChatGenerics>) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<StreamChatGenerics>) => {\n      if (typeof onChannelHidden === 'function') {\n        onChannelHidden(setChannels, event);\n      } else {\n        setChannels((channels) => {\n          const index = channels.findIndex(\n            (channel) => channel.cid === (event.cid || event.channel?.cid),\n          );\n          if (index >= 0) {\n            channels.splice(index, 1);\n          }\n          return [...channels];\n        });\n      }\n    };\n\n    client.on('channel.hidden', handleEvent);\n    return () => client.off('channel.hidden', handleEvent);\n  }, []);\n};\n"]}