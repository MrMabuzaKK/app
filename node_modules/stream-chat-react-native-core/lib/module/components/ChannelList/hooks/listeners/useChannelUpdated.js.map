{"version":3,"sources":["useChannelUpdated.ts"],"names":["useChannelUpdated","onChannelUpdated","setChannels","client","handleEvent","event","channels","index","findIndex","channel","cid","data","hidden","own_capabilities","on","off"],"mappings":";;;;;;;;;;;AAAA;;AAIA;;AAaO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,OAKK;AAAA,MAFpCC,gBAEoC,QAFpCA,gBAEoC;AAAA,MADpCC,WACoC,QADpCA,WACoC;;AACpC,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,wBAAU,YAAM;AACd,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAsC;AACxD,UAAI,OAAOJ,gBAAP,KAA4B,UAAhC,EAA4C;AAC1CA,QAAAA,gBAAgB,CAACC,WAAD,EAAcG,KAAd,CAAhB;AACD,OAFD,MAEO;AACLH,QAAAA,WAAW,CAAC,UAACI,QAAD,EAAc;AACxB,cAAMC,KAAK,GAAGD,QAAQ,CAACE,SAAT,CACZ,UAACC,OAAD;AAAA;;AAAA,mBAAaA,OAAO,CAACC,GAAR,MAAiBL,KAAK,CAACK,GAAN,uBAAaL,KAAK,CAACI,OAAnB,qBAAa,eAAeC,GAA5B,CAAjB,CAAb;AAAA,WADY,CAAd;;AAGA,cAAIH,KAAK,IAAI,CAAT,IAAcF,KAAK,CAACI,OAAxB,EAAiC;AAAA;;AAC/BH,YAAAA,QAAQ,CAACC,KAAD,CAAR,CAAgBI,IAAhB,iCACKN,KAAK,CAACI,OADX;AAEEG,cAAAA,MAAM,8CAAEP,KAAK,CAACI,OAAR,qBAAE,gBAAeG,MAAjB,4DAA2BN,QAAQ,CAACC,KAAD,CAAR,CAAgBI,IAA3C,qBAA2B,qBAAsBC,MAFzD;AAGEC,cAAAA,gBAAgB,8CACdR,KAAK,CAACI,OADQ,qBACd,gBAAeI,gBADD,6DACqBP,QAAQ,CAACC,KAAD,CAAR,CAAgBI,IADrC,qBACqB,sBAAsBE;AAJ7D;AAMD;;AAED,qDAAWP,QAAX;AACD,SAdU,CAAX;AAeD;AACF,KApBD;;AAsBAH,IAAAA,MAAM,CAACW,EAAP,CAAU,iBAAV,EAA6BV,WAA7B;AACA,WAAO;AAAA,aAAMD,MAAM,CAACY,GAAP,CAAW,iBAAX,EAA8BX,WAA9B,CAAN;AAAA,KAAP;AACD,GAzBD,EAyBG,EAzBH;AA0BD,CAlCM","sourcesContent":["import { useEffect } from 'react';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\n\ntype Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  {\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>;\n    onChannelUpdated?: (\n      setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>,\n      event: Event<StreamChatGenerics>,\n    ) => void;\n  };\n\nexport const useChannelUpdated = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  onChannelUpdated,\n  setChannels,\n}: Parameters<StreamChatGenerics>) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<StreamChatGenerics>) => {\n      if (typeof onChannelUpdated === 'function') {\n        onChannelUpdated(setChannels, event);\n      } else {\n        setChannels((channels) => {\n          const index = channels.findIndex(\n            (channel) => channel.cid === (event.cid || event.channel?.cid),\n          );\n          if (index >= 0 && event.channel) {\n            channels[index].data = {\n              ...event.channel,\n              hidden: event.channel?.hidden ?? channels[index].data?.hidden,\n              own_capabilities:\n                event.channel?.own_capabilities ?? channels[index].data?.own_capabilities,\n            };\n          }\n\n          return [...channels];\n        });\n      }\n    };\n\n    client.on('channel.updated', handleEvent);\n    return () => client.off('channel.updated', handleEvent);\n  }, []);\n};\n"]}