{"version":3,"sources":["useUserPresence.ts"],"names":["useUserPresence","setChannels","client","handleEvent","event","channels","newChannels","map","channel","user","id","state","members","on","off"],"mappings":";;;;;;;;;AAAA;;AAIA;;AASO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAIO;AAAA,MADpCC,WACoC,QADpCA,WACoC;;AACpC,wBAAmB,kCAAnB;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AAEA,wBAAU,YAAM;AACd,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAsC;AACxDH,MAAAA,WAAW,CAAC,UAACI,QAAD,EAAc;AACxB,YAAMC,WAAW,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAACC,OAAD,EAAa;AAAA;;AAC5C,cAAI,iBAACJ,KAAK,CAACK,IAAP,aAAC,YAAYC,EAAb,KAAmB,CAACF,OAAO,CAACG,KAAR,CAAcC,OAAd,CAAsBR,KAAK,CAACK,IAAN,CAAWC,EAAjC,CAAxB,EAA8D;AAC5D,mBAAOF,OAAP;AACD;;AACDA,UAAAA,OAAO,CAACG,KAAR,CAAcC,OAAd,CAAsBR,KAAK,CAACK,IAAN,CAAWC,EAAjC,EAAqCD,IAArC,GAA4CL,KAAK,CAACK,IAAlD;AACA,iBAAOD,OAAP;AACD,SANmB,CAApB;AAQA,mDAAWF,WAAX;AACD,OAVU,CAAX;AAWD,KAZD;;AAcAJ,IAAAA,MAAM,CAACW,EAAP,CAAU,uBAAV,EAAmCV,WAAnC;AACAD,IAAAA,MAAM,CAACW,EAAP,CAAU,cAAV,EAA0BV,WAA1B;AAEA,WAAO,YAAM;AACXD,MAAAA,MAAM,CAACY,GAAP,CAAW,uBAAX,EAAoCX,WAApC;AACAD,MAAAA,MAAM,CAACY,GAAP,CAAW,cAAX,EAA2BX,WAA3B;AACD,KAHD;AAID,GAtBD,EAsBG,EAtBH;AAuBD,CA9BM","sourcesContent":["import { useEffect } from 'react';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\n\ntype Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  {\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[]>>;\n  };\n\nexport const useUserPresence = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  setChannels,\n}: Parameters<StreamChatGenerics>) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<StreamChatGenerics>) => {\n      setChannels((channels) => {\n        const newChannels = channels.map((channel) => {\n          if (!event.user?.id || !channel.state.members[event.user.id]) {\n            return channel;\n          }\n          channel.state.members[event.user.id].user = event.user;\n          return channel;\n        });\n\n        return [...newChannels];\n      });\n    };\n\n    client.on('user.presence.changed', handleEvent);\n    client.on('user.updated', handleEvent);\n\n    return () => {\n      client.off('user.presence.changed', handleEvent);\n      client.off('user.updated', handleEvent);\n    };\n  }, []);\n};\n"]}