{"version":3,"sources":["Skeleton.tsx"],"names":["paddingLarge","paddingMedium","paddingSmall","styles","StyleSheet","create","background","height","position","width","container","borderBottomWidth","flexDirection","Skeleton","startOffset","theme","channelListSkeleton","animationTime","gradientStart","gradientStop","maskFillColor","colors","border","grey_gainsboro","white_snow","value","duration","easing","Easing","linear","animatedStyle","transform","translateX","d","useableHeight","boneHeight","boneRadius","circleRadius","avatarBoneWidth","detailsBonesWidth","borderBottomColor","backgroundColor","displayName"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { StyleSheet, useWindowDimensions, View } from 'react-native';\nimport Animated, {\n  Easing,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withRepeat,\n  withTiming,\n} from 'react-native-reanimated';\nimport { Defs, LinearGradient, Path, Rect, Stop, Svg } from 'react-native-svg';\n\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\n\nconst paddingLarge = 16;\nconst paddingMedium = 12;\nconst paddingSmall = 8;\n\nconst styles = StyleSheet.create({\n  background: {\n    height: 64,\n    position: 'absolute',\n    width: '100%',\n  },\n  container: {\n    borderBottomWidth: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport const Skeleton: React.FC = () => {\n  const width = useWindowDimensions().width;\n  const startOffset = useSharedValue(-width);\n\n  const {\n    theme: {\n      channelListSkeleton: {\n        animationTime = 1800,\n        background,\n        container,\n        gradientStart,\n        gradientStop,\n        height = 64,\n        maskFillColor,\n      },\n      colors: { border, grey_gainsboro, white_snow },\n    },\n  } = useTheme();\n\n  useEffect(() => {\n    startOffset.value = withRepeat(\n      withTiming(width, {\n        duration: animationTime,\n        easing: Easing.linear,\n      }),\n      -1,\n    );\n  }, []);\n\n  const animatedStyle = useAnimatedStyle(\n    () => ({\n      transform: [{ translateX: startOffset.value }],\n    }),\n    [],\n  );\n\n  const d = useDerivedValue(() => {\n    const useableHeight = height - paddingMedium * 2;\n    const boneHeight = (useableHeight - 8) / 2;\n    const boneRadius = boneHeight / 2;\n    const circleRadius = useableHeight / 2;\n    const avatarBoneWidth = circleRadius * 2 + paddingSmall * 2;\n    const detailsBonesWidth = width - avatarBoneWidth;\n\n    return `M0 0 h${width} v${height} h-${width}z M${paddingSmall} ${\n      height / 2\n    } a${circleRadius} ${circleRadius} 0 1 0 ${\n      circleRadius * 2\n    } 0 a${circleRadius} ${circleRadius} 0 1 0 -${circleRadius * 2} 0z M${\n      avatarBoneWidth + boneRadius\n    } ${paddingMedium} a${boneRadius} ${boneRadius} 0 1 0 0 ${boneHeight}z M${\n      avatarBoneWidth - boneRadius + detailsBonesWidth * 0.25\n    } ${paddingMedium} h-${detailsBonesWidth * 0.25 - boneRadius * 2} v${boneHeight} h${\n      detailsBonesWidth * 0.25 - boneRadius * 2\n    }z M${avatarBoneWidth - boneRadius + detailsBonesWidth * 0.25} ${\n      paddingMedium + boneHeight\n    } a${boneRadius} ${boneRadius} 0 1 0 0 -${boneHeight}z M${avatarBoneWidth + boneRadius} ${\n      paddingMedium + boneHeight + paddingSmall\n    } a${boneRadius} ${boneRadius} 0 1 0 0 ${boneHeight}z M${\n      avatarBoneWidth + detailsBonesWidth * 0.8 - boneRadius\n    } ${paddingMedium + boneHeight + paddingSmall} h-${\n      detailsBonesWidth * 0.8 - boneRadius * 2\n    } v${boneHeight} h${detailsBonesWidth * 0.8 - boneRadius * 2}z M${\n      avatarBoneWidth + detailsBonesWidth * 0.8 - boneRadius\n    } ${height - paddingMedium} a${boneRadius} ${boneRadius} 0 1 0 0 -${boneHeight}z M${\n      avatarBoneWidth + detailsBonesWidth * 0.8 + boneRadius + paddingLarge\n    } ${\n      paddingMedium + boneHeight + paddingSmall\n    } a${boneRadius} ${boneRadius} 0 1 0 0 ${boneHeight}z M${width - paddingSmall - boneRadius} ${\n      paddingMedium + boneHeight + paddingSmall\n    } h-${\n      width -\n      paddingSmall -\n      boneRadius -\n      (avatarBoneWidth + detailsBonesWidth * 0.8 + boneRadius + paddingLarge)\n    } v${boneHeight} h${\n      width -\n      paddingSmall -\n      boneRadius -\n      (avatarBoneWidth + detailsBonesWidth * 0.8 + boneRadius + paddingLarge)\n    }z M${width - paddingSmall * 2} ${\n      height - paddingMedium\n    } a${boneRadius} ${boneRadius} 0 1 0 0 -${boneHeight}z`;\n  }, []);\n\n  return (\n    <View\n      style={[styles.container, { borderBottomColor: border }, container]}\n      testID='channel-preview-skeleton'\n    >\n      <View style={[styles.background, { backgroundColor: white_snow }, background]} />\n      <Animated.View style={[animatedStyle, styles.background]}>\n        <Svg height={height} width={width}>\n          <Rect fill='url(#gradient)' height={height} width={width} x={0} y={0} />\n          <Defs>\n            <LinearGradient\n              gradientUnits='userSpaceOnUse'\n              id='gradient'\n              x1={0}\n              x2={width}\n              y1={0}\n              y2={0}\n            >\n              <Stop offset={1} stopColor={grey_gainsboro} {...gradientStart} />\n              <Stop offset={0.5} stopColor={grey_gainsboro} {...gradientStop} />\n              <Stop offset={0} stopColor={grey_gainsboro} {...gradientStart} />\n            </LinearGradient>\n          </Defs>\n        </Svg>\n      </Animated.View>\n      <Svg height={height} width={width}>\n        <Path d={d.value} fill={maskFillColor || white_snow} />\n      </Svg>\n    </View>\n  );\n};\n\nSkeleton.displayName = 'Skeleton{channelListSkeleton}';\n"]}