{"version":3,"sources":["useMessageActionHandlers.ts"],"names":["useMessageActionHandlers","channel","client","enforceUniqueReaction","message","removeMessage","retrySendMessage","setEditingState","setQuotedMessageState","supportedReactions","updateMessage","handleResendMessage","handleQuotedReplyMessage","isMuted","mutedUsers","some","mute","user","id","userID","target","handleDeleteMessage","status","MessageStatusTypes","FAILED","deleteMessage","data","handleToggleMuteUser","unmuteUser","muteUser","handleToggleBanUser","messageUser","banned","unbanUser","banUser","handleTogglePinMessage","MessagePinnedHeaderStatus","pinned","pinMessage","unpinMessage","handleEditMessage","clientId","isMessageTypeDeleted","type","hasReactions","latest_reactions","length","reactions","reduce","acc","cur","reactionType","reactionsOfReactionType","filter","reaction","hasOwnReaction","user_id","push","own","handleToggleReaction","messageId","ownReaction","find","deleteReaction","sendReaction","enforce_unique","console","log"],"mappings":"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","sourcesContent":["import type { MessageResponse, Reaction } from 'stream-chat';\n\nimport type { ChannelContextValue } from '../../../contexts/channelContext/ChannelContext';\nimport type { ChatContextValue } from '../../../contexts/chatContext/ChatContext';\nimport type {\n  MessageContextValue,\n  Reactions,\n} from '../../../contexts/messageContext/MessageContext';\nimport type { MessagesContextValue } from '../../../contexts/messagesContext/MessagesContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\nimport { MessageStatusTypes } from '../../../utils/utils';\n\nexport const useMessageActionHandlers = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  channel,\n  client,\n  enforceUniqueReaction,\n  message,\n  removeMessage,\n  retrySendMessage,\n  setEditingState,\n  setQuotedMessageState,\n  supportedReactions,\n  updateMessage,\n}: Pick<\n  MessagesContextValue<StreamChatGenerics>,\n  | 'removeMessage'\n  | 'retrySendMessage'\n  | 'setEditingState'\n  | 'setQuotedMessageState'\n  | 'supportedReactions'\n  | 'updateMessage'\n> &\n  Pick<ChannelContextValue<StreamChatGenerics>, 'channel' | 'enforceUniqueReaction'> &\n  Pick<ChatContextValue<StreamChatGenerics>, 'client'> &\n  Pick<MessageContextValue<StreamChatGenerics>, 'message'>) => {\n  const handleResendMessage = () =>\n    retrySendMessage(message as MessageResponse<StreamChatGenerics>);\n\n  const handleQuotedReplyMessage = () => {\n    setQuotedMessageState(message);\n  };\n\n  const isMuted = (client.mutedUsers || []).some(\n    (mute) => mute.user.id === client.userID && mute.target.id === message.user?.id,\n  );\n\n  const handleDeleteMessage = async () => {\n    if (message.status === MessageStatusTypes.FAILED) {\n      removeMessage(message);\n    } else {\n      const data = await client.deleteMessage(message.id);\n      updateMessage(data.message);\n    }\n  };\n\n  const handleToggleMuteUser = async () => {\n    if (!message.user?.id) {\n      return;\n    }\n\n    if (isMuted) {\n      await client.unmuteUser(message.user.id);\n    } else {\n      await client.muteUser(message.user.id);\n    }\n  };\n\n  const handleToggleBanUser = async () => {\n    const messageUser = message.user;\n    if (!messageUser) {\n      return;\n    }\n\n    if (messageUser.banned) {\n      await client.unbanUser(messageUser.id);\n    } else {\n      await client.banUser(messageUser.id);\n    }\n  };\n\n  const handleTogglePinMessage = async () => {\n    const MessagePinnedHeaderStatus = message.pinned;\n    if (!MessagePinnedHeaderStatus) {\n      await client.pinMessage(message, null);\n    } else {\n      await client.unpinMessage(message);\n    }\n  };\n\n  const handleEditMessage = () => {\n    setEditingState(message);\n  };\n\n  const clientId = client.userID;\n  const isMessageTypeDeleted = message.type === 'deleted';\n\n  const hasReactions =\n    !isMessageTypeDeleted && !!message.latest_reactions && message.latest_reactions.length > 0;\n\n  const reactions = hasReactions\n    ? supportedReactions.reduce((acc, cur) => {\n        const reactionType = cur.type;\n        const reactionsOfReactionType = message.latest_reactions?.filter(\n          (reaction) => reaction.type === reactionType,\n        );\n\n        if (reactionsOfReactionType?.length) {\n          const hasOwnReaction = reactionsOfReactionType.some(\n            (reaction) => reaction.user_id === clientId,\n          );\n          acc.push({ own: hasOwnReaction, type: reactionType });\n        }\n\n        return acc;\n      }, [] as Reactions)\n    : [];\n\n  const handleToggleReaction = async (reactionType: string) => {\n    const messageId = message.id;\n    const ownReaction = !!reactions.find(\n      (reaction) => reaction.own && reaction.type === reactionType,\n    );\n\n    // Change reaction in local state, make API call in background, revert to old message if fails\n    try {\n      if (channel && messageId) {\n        if (ownReaction) {\n          await channel.deleteReaction(messageId, reactionType);\n        } else {\n          await channel.sendReaction(\n            messageId,\n            {\n              type: reactionType,\n            } as Reaction<StreamChatGenerics>,\n            { enforce_unique: enforceUniqueReaction },\n          );\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return {\n    handleDeleteMessage,\n    handleEditMessage,\n    handleQuotedReplyMessage,\n    handleResendMessage,\n    handleToggleBanUser,\n    handleToggleMuteUser,\n    handleTogglePinMessage,\n    handleToggleReaction,\n  };\n};\n"]}