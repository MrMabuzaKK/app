{"version":3,"sources":["MessageAvatar.tsx"],"names":["MessageAvatarWithContext","props","alignment","lastGroupMessage","message","showAvatar","size","theme","BASE_AVATAR_SIZE","avatar","messageSimple","avatarWrapper","container","leftAlign","rightAlign","spacer","visible","user","image","name","id","areEqual","prevProps","nextProps","prevLastGroupMessage","prevMessage","nextLastGroupMessage","nextMessage","lastGroupMessageEqual","userEqual","MemoizedMessageAvatar","React","memo","MessageAvatar","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\n\nimport {\n  MessageContextValue,\n  useMessageContext,\n} from '../../../contexts/messageContext/MessageContext';\nimport { useTheme } from '../../../contexts/themeContext/ThemeContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\nimport { Avatar, AvatarProps } from '../../Avatar/Avatar';\n\nexport type MessageAvatarPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<\n  MessageContextValue<StreamChatGenerics>,\n  'alignment' | 'lastGroupMessage' | 'message' | 'showAvatar'\n> &\n  Partial<Pick<AvatarProps, 'size'>>;\n\nconst MessageAvatarWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageAvatarPropsWithContext<StreamChatGenerics>,\n) => {\n  const { alignment, lastGroupMessage, message, showAvatar, size } = props;\n  const {\n    theme: {\n      avatar: { BASE_AVATAR_SIZE },\n      messageSimple: {\n        avatarWrapper: { container, leftAlign, rightAlign, spacer },\n      },\n    },\n  } = useTheme();\n\n  const visible = typeof showAvatar === 'boolean' ? showAvatar : lastGroupMessage;\n\n  return (\n    <View\n      style={[alignment === 'left' ? leftAlign : rightAlign, container]}\n      testID='message-avatar'\n    >\n      {visible ? (\n        <Avatar\n          image={message.user?.image}\n          name={message.user?.name || message.user?.id}\n          size={size || BASE_AVATAR_SIZE}\n        />\n      ) : (\n        <View style={spacer} testID='spacer' />\n      )}\n    </View>\n  );\n};\n\nconst areEqual = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  prevProps: MessageAvatarPropsWithContext<StreamChatGenerics>,\n  nextProps: MessageAvatarPropsWithContext<StreamChatGenerics>,\n) => {\n  const { lastGroupMessage: prevLastGroupMessage, message: prevMessage } = prevProps;\n  const { lastGroupMessage: nextLastGroupMessage, message: nextMessage } = nextProps;\n\n  const lastGroupMessageEqual = prevLastGroupMessage === nextLastGroupMessage;\n  if (!lastGroupMessageEqual) return false;\n\n  const userEqual =\n    prevMessage.user?.image === nextMessage.user?.image &&\n    prevMessage.user?.name === nextMessage.user?.name &&\n    prevMessage.user?.id === nextMessage.user?.id;\n  if (!userEqual) return false;\n\n  return true;\n};\n\nconst MemoizedMessageAvatar = React.memo(\n  MessageAvatarWithContext,\n  areEqual,\n) as typeof MessageAvatarWithContext;\n\nexport type MessageAvatarProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<MessageAvatarPropsWithContext<StreamChatGenerics>>;\n\nexport const MessageAvatar = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageAvatarProps<StreamChatGenerics>,\n) => {\n  const { alignment, lastGroupMessage, message, showAvatar } =\n    useMessageContext<StreamChatGenerics>();\n\n  return (\n    <MemoizedMessageAvatar\n      {...{\n        alignment,\n        lastGroupMessage,\n        message,\n        showAvatar,\n      }}\n      {...props}\n    />\n  );\n};\n\nMessageAvatar.displayName = 'MessageAvatar{messageSimple{avatarWrapper}}';\n"]}