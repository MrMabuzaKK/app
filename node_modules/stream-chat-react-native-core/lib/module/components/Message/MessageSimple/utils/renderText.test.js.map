{"version":3,"sources":["renderText.test.tsx"],"names":["describe","createNode","amount","ordered","start","items","Array","from","keys","type","mockOutput","node","MockText","output","state","it","container","textInstances","children","forEach","instance","index","text","expect","getByText","toBeTruthy"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\n\nimport type { ReactTestInstance } from 'react-test-renderer';\n\nimport { render, waitFor, within } from '@testing-library/react-native';\n\n// @ts-ignore\nimport { ASTNode, SingleASTNode } from 'simple-markdown';\n\nimport { ListOutput, ListOutputProps } from './renderText';\n\ndescribe('list', () => {\n  const createNode = ({\n    amount,\n    ordered = false,\n    start = 1,\n  }: {\n    amount: number;\n    ordered?: boolean;\n    start?: number;\n  }): SingleASTNode => ({\n    items: Array.from(Array(amount).keys()),\n    ordered,\n    start,\n    type: 'text',\n  });\n\n  const mockOutput = (node: ASTNode) => <Text>{node}</Text>;\n  const MockText = ({ node, output, state }: ListOutputProps) => (\n    <>\n      <ListOutput node={node} output={output} state={state} styles={{}} />\n    </>\n  );\n\n  it('renders numbered items', () => {\n    const node = createNode({ amount: 3, ordered: true, start: 1 });\n    const { container } = render(<MockText node={node} output={mockOutput} state={{}} />);\n    const textInstances = container.children as ReactTestInstance[];\n    textInstances.forEach(async (instance, index) => {\n      const text = `${index + node.start}. `; // 1. , 2. ...\n      await waitFor(() => expect(within(instance).getByText(text)).toBeTruthy());\n    });\n  });\n\n  it('renders numbered items from a start index', () => {\n    const node = createNode({ amount: 3, ordered: true, start: 3 });\n    const { container } = render(<MockText node={node} output={mockOutput} state={{}} />);\n    const textInstances = container.children as ReactTestInstance[];\n    textInstances.forEach(async (instance, index) => {\n      const text = `${index + node.start}. `; // 3. , 4. ...\n      await waitFor(() => expect(within(instance).getByText(text)).toBeTruthy());\n    });\n  });\n\n  it('does not throw an error if an item is empty', () => {\n    const node = {\n      ...createNode({ amount: 3, ordered: true }),\n      items: ['Not empty', null, 'Not empty'],\n    };\n    const { container } = render(<MockText node={node} output={mockOutput} state={{}} />);\n    const textInstances = container.children as ReactTestInstance[];\n    textInstances.forEach(async (instance, index) => {\n      const text = `${index + 1}. `; // 1. , 2. ...\n      await waitFor(() => expect(within(instance).getByText(text)).toBeTruthy());\n    });\n  });\n\n  it('renders an unordered list', () => {\n    const node = createNode({ amount: 3 });\n    const { container } = render(<MockText node={node} output={mockOutput} state={{}} />);\n    const textInstances = container.children as ReactTestInstance[];\n    textInstances.forEach(async (instance) => {\n      await waitFor(() => expect(within(instance).getByText('\\u2022 ')).toBeTruthy());\n    });\n  });\n});\n"]}