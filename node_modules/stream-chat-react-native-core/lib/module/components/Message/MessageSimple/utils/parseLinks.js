var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseLinksFromText = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var emailUserName = '[\\w+\\.~$_-]+';
var schema = "(\\w{2,15}:\\/\\/)";
var domain = "((?:\\w+\\.[a-zA-Z]+)+(?:[^:\\/\\s]+)|(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}))";
var port = "(:[0-9]{1,5})";
var path = "((?:\\/)?[^?#\\s]+)";
var queryString = "(\\?[^#\\s]+)";
var fragment = "(#[\\w_-]+)";
var emailPattern = "(mailto:)?((?:" + emailUserName + ")@(?:" + domain + "))";
var schemePrefixedLinkPattern = schema + "(\\S+)";
var fqdnLinkPattern = schema + "?" + domain + port + "?" + path + "?" + queryString + "?" + fragment + "?";

var removeMarkdownLinksFromText = function removeMarkdownLinksFromText(input) {
  return input.replace(/\[[\w\s]+\]\(.*\)/g, '');
};

var parseLinksFromText = function parseLinksFromText(input) {
  var matches;
  var inputWithoutMarkdownLinks = removeMarkdownLinksFromText(input);
  var results = [];
  var emailRegExp = new RegExp(emailPattern, 'gi');

  while ((matches = emailRegExp.exec(input)) !== null) {
    var _matches = matches,
        _matches2 = (0, _slicedToArray2["default"])(_matches, 3),
        raw = _matches2[0],
        _matches2$ = _matches2[1],
        scheme = _matches2$ === void 0 ? 'mailto:' : _matches2$,
        displayValue = _matches2[2];

    results.push({
      encoded: encodeURI(displayValue),
      raw: raw,
      scheme: scheme
    });
  }

  var linkRegex = new RegExp(fqdnLinkPattern + "|" + schemePrefixedLinkPattern, 'gi');

  while ((matches = linkRegex.exec(inputWithoutMarkdownLinks)) !== null) {
    var _matches3 = matches,
        _matches4 = (0, _slicedToArray2["default"])(_matches3, 9),
        _raw = _matches4[0],
        _matches4$ = _matches4[1],
        fqdnScheme = _matches4$ === void 0 ? '' : _matches4$,
        _matches4$2 = _matches4[2],
        fqdnDomainName = _matches4$2 === void 0 ? '' : _matches4$2,
        _matches4$3 = _matches4[3],
        fqdnPort = _matches4$3 === void 0 ? '' : _matches4$3,
        _matches4$4 = _matches4[4],
        fqdnPath = _matches4$4 === void 0 ? '' : _matches4$4,
        _matches4$5 = _matches4[5],
        fqdnQueryStraing = _matches4$5 === void 0 ? '' : _matches4$5,
        _matches4$6 = _matches4[6],
        fqdnFragment = _matches4$6 === void 0 ? '' : _matches4$6,
        _matches4$7 = _matches4[7],
        schemePrefixedScheme = _matches4$7 === void 0 ? '' : _matches4$7,
        _matches4$8 = _matches4[8],
        schemePrefixedPath = _matches4$8 === void 0 ? '' : _matches4$8;

    if (schemePrefixedScheme !== '') {
      results.push({
        encoded: encodeURI(schemePrefixedPath),
        raw: _raw,
        scheme: schemePrefixedScheme
      });
      continue;
    }

    results.push({
      encoded: encodeURI([fqdnDomainName, fqdnPort, fqdnPath, fqdnQueryStraing, fqdnFragment].join('')),
      raw: _raw,
      scheme: fqdnScheme
    });
  }

  return results;
};

exports.parseLinksFromText = parseLinksFromText;
//# sourceMappingURL=parseLinks.js.map