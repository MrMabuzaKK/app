{"version":3,"sources":["useChannelState.ts"],"names":["useStateManager","initialValue","cid","key","setState","state","memoizedInitialValue","value","setValue","useChannelState","channel","threadId","id","decreaseSubscriberCount","increaseSubscriberCount","members","setMembers","messages","setMessages","read","setRead","typing","setTyping","watcherCount","setWatcherCount","watchers","setWatchers","threads","threadMessages","setThreadMessages"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo } from 'react';\n\nimport type { Channel as ChannelType } from 'stream-chat';\n\nimport { useChannelsStateContext } from './ChannelsStateContext';\n\nimport type { ChannelsStateContextValue, ChannelState, Keys } from './ChannelsStateContext';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\ntype StateManagerParams<\n  Key extends Keys,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Omit<\n  ChannelsStateContextValue<StreamChatGenerics>,\n  'increaseSubscriberCount' | 'decreaseSubscriberCount'\n> & {\n  cid: string;\n  key: Key;\n};\n\n/* \n  This hook takes care of creating a useState-like interface which can be used later to call\n  updates to the ChannelsStateContext reducer. It receives the cid and key which it wants to update\n  and perform the state updates. Also supports a initialState.\n*/\nfunction useStateManager<\n  Key extends Keys,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  {\n    cid,\n    key,\n    setState,\n    state,\n  }: Omit<\n    StateManagerParams<Key, StreamChatGenerics>,\n    'increaseSubscriberCount' | 'decreaseSubscriberCount'\n  >,\n  initialValue?: ChannelState<StreamChatGenerics>[Key],\n) {\n  const memoizedInitialValue = useMemo(() => initialValue, []);\n  const value =\n    state[cid]?.[key] || (memoizedInitialValue as ChannelState<StreamChatGenerics>[Key]);\n\n  const setValue = useCallback(\n    (value: ChannelState<StreamChatGenerics>[Key]) => setState({ cid, key, value }),\n    [cid, key],\n  );\n\n  return [value, setValue] as const;\n}\n\nexport type UseChannelStateValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  members: ChannelState<StreamChatGenerics>['members'];\n  messages: ChannelState<StreamChatGenerics>['messages'];\n  read: ChannelState<StreamChatGenerics>['read'];\n  setMembers: (value: ChannelState<StreamChatGenerics>['members']) => void;\n  setMessages: (value: ChannelState<StreamChatGenerics>['messages']) => void;\n  setRead: (value: ChannelState<StreamChatGenerics>['read']) => void;\n  setThreadMessages: (value: ChannelState<StreamChatGenerics>['threadMessages']) => void;\n  setTyping: (value: ChannelState<StreamChatGenerics>['typing']) => void;\n  setWatcherCount: (value: ChannelState<StreamChatGenerics>['watcherCount']) => void;\n  setWatchers: (value: ChannelState<StreamChatGenerics>['watchers']) => void;\n  threadMessages: ChannelState<StreamChatGenerics>['threadMessages'];\n  typing: ChannelState<StreamChatGenerics>['typing'];\n  watcherCount: ChannelState<StreamChatGenerics>['watcherCount'];\n  watchers: ChannelState<StreamChatGenerics>['watchers'];\n};\n\nexport function useChannelState<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: ChannelType<StreamChatGenerics> | undefined,\n  threadId?: string,\n): UseChannelStateValue<StreamChatGenerics> {\n  const cid = channel?.id || 'id'; // in case channel is not initialized, use generic id string for indexing\n  const { decreaseSubscriberCount, increaseSubscriberCount, setState, state } =\n    useChannelsStateContext<StreamChatGenerics>();\n\n  // Keeps track of how many Channel components are subscribed to this Channel state (Channel vs Thread concurrency)\n  useEffect(() => {\n    increaseSubscriberCount({ cid });\n    return () => {\n      decreaseSubscriberCount({ cid });\n    };\n  }, []);\n\n  const [members, setMembers] = useStateManager(\n    {\n      cid,\n      key: 'members',\n      setState,\n      state,\n    },\n    {},\n  );\n\n  const [messages, setMessages] = useStateManager(\n    {\n      cid,\n      key: 'messages',\n      setState,\n      state,\n    },\n    channel?.state?.messages || [],\n  );\n\n  const [read, setRead] = useStateManager(\n    {\n      cid,\n      key: 'read',\n      setState,\n      state,\n    },\n    {},\n  );\n\n  const [typing, setTyping] = useStateManager(\n    {\n      cid,\n      key: 'typing',\n      setState,\n      state,\n    },\n    {},\n  );\n\n  const [watcherCount, setWatcherCount] = useStateManager({\n    cid,\n    key: 'watcherCount',\n    setState,\n    state,\n  });\n\n  const [watchers, setWatchers] = useStateManager(\n    {\n      cid,\n      key: 'watchers',\n      setState,\n      state,\n    },\n    {},\n  );\n\n  const [threadMessages, setThreadMessages] = useStateManager(\n    {\n      cid,\n      key: 'threadMessages',\n      setState,\n      state,\n    },\n    (threadId && channel?.state?.threads?.[threadId]) || [],\n  );\n\n  return {\n    members,\n    messages,\n    read,\n    setMembers,\n    setMessages,\n    setRead,\n    setThreadMessages,\n    setTyping,\n    setWatcherCount,\n    setWatchers,\n    threadMessages,\n    typing,\n    watcherCount,\n    watchers,\n  };\n}\n"]}