{"version":3,"sources":["ChannelsContext.tsx"],"names":["ChannelsContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","ChannelsProvider","children","value","useChannelsContext","contextValue","Error","withChannelsContext","Component","WithChannelsContextComponent","props","channelsContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAqBA;;AAEA;;AACA;;;;;;;;;AA4LO,IAAMA,eAAe,GAAGC,kBAAMC,aAAN,CAC7BC,mDAD6B,CAAxB;;;;AAIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAG9BC,QAH8B,QAG9BA,QAH8B;AAAA,MAI9BC,KAJ8B,QAI9BA,KAJ8B;AAAA,SAQ9B,gCAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEA,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAR8B;AAAA,CAAzB;;;;AAaA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,GAE3B;AACL,MAAMC,YAAY,GAAG,uBACnBR,eADmB,CAArB;;AAIA,MAAIQ,YAAY,KAAKL,mDAAjB,IAA+C,CAAC,2CAApD,EAAyE;AACvE,UAAM,IAAIM,KAAJ,yOAAN;AAGD;;AAED,SAAOD,YAAP;AACD,CAdM;;;;AAoBA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAIjCC,SAJiC,EAKqC;AACtE,MAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CACnCC,KADmC,EAEhC;AACH,QAAMC,eAAe,GAAGP,kBAAkB,EAA1C;AAEA,WAAO,gCAAC,SAAD,gCAAgBM,KAAhB,EAAiCC,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,4BAA4B,CAACG,WAA7B,2BAAiE,oCAAeJ,SAAf,CAAjE;AACA,SAAOC,4BAAP;AACD,CAfM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport type { FlatListProps } from 'react-native';\nimport type { FlatList } from 'react-native-gesture-handler';\n\nimport type { ChannelPreviewMutedStatusProps } from 'src/components/ChannelPreview/ChannelPreviewMutedStatus';\n\nimport type { Channel } from 'stream-chat';\n\nimport type { HeaderErrorProps } from '../../components/ChannelList/ChannelListHeaderErrorIndicator';\nimport type { QueryChannels } from '../../components/ChannelList/hooks/usePaginatedChannels';\nimport type { ChannelAvatarProps } from '../../components/ChannelPreview/ChannelAvatar';\nimport type { ChannelPreviewMessageProps } from '../../components/ChannelPreview/ChannelPreviewMessage';\nimport type { ChannelPreviewMessengerProps } from '../../components/ChannelPreview/ChannelPreviewMessenger';\nimport type { ChannelPreviewStatusProps } from '../../components/ChannelPreview/ChannelPreviewStatus';\nimport type { ChannelPreviewTitleProps } from '../../components/ChannelPreview/ChannelPreviewTitle';\nimport type { ChannelPreviewUnreadCountProps } from '../../components/ChannelPreview/ChannelPreviewUnreadCount';\nimport type { EmptyStateProps } from '../../components/Indicators/EmptyStateIndicator';\nimport type { LoadingErrorProps } from '../../components/Indicators/LoadingErrorIndicator';\nimport type { LoadingProps } from '../../components/Indicators/LoadingIndicator';\nimport type { DefaultStreamChatGenerics, UnknownType } from '../../types/types';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\nimport { isTestEnvironment } from '../utils/isTestEnvironment';\n\nexport type ChannelsContextValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  /**\n   * Besides the existing default behavior of the ChannelListMessenger component, you can attach\n   * additional props to the underlying React Native FlatList.\n   *\n   * You can find list of all the available FlatList props here - https://facebook.github.io/react-native/docs/flatlist#props\n   *\n   * **EXAMPLE:**\n   *\n   * ```\n   * <ChannelListMessenger\n   *  channels={channels}\n   *  additionalFlatListProps={{ bounces: true }}\n   * />\n   * ```\n   *\n   * **Note:** Don't use `additionalFlatListProps` to access the FlatList ref, use `setFlatListRef`\n   */\n  additionalFlatListProps: Partial<FlatListProps<Channel<StreamChatGenerics>>>;\n  /**\n   * Channels can be either an array of channels or a promise which resolves to an array of channels\n   */\n  channels: Channel<StreamChatGenerics>[];\n  /**\n   * Custom indicator to use when channel list is empty\n   *\n   * Default: [EmptyStateIndicator](https://getstream.io/chat/docs/sdk/reactnative/core-components/channel/#emptystateindicator)\n   * */\n  EmptyStateIndicator: React.ComponentType<EmptyStateProps>;\n  /**\n   * Custom loading indicator to display at bottom of the list, while loading further pages\n   *\n   * Default: [ChannelListFooterLoadingIndicator](https://getstream.io/chat/docs/sdk/reactnative/contexts/channels-context/#footerloadingindicator)\n   */\n  FooterLoadingIndicator: React.ComponentType;\n  /**\n   * Incremental number change to force update the FlatList\n   */\n  forceUpdate: number;\n  /**\n   * Whether or not the FlatList has another page to render\n   */\n  hasNextPage: boolean;\n  /**\n   * Custom indicator to display error at top of list, if loading/pagination error occurs\n   *\n   * Default: [ChannelListHeaderErrorIndicator](https://getstream.io/chat/docs/sdk/reactnative/contexts/channels-context/#headererrorindicator)\n   */\n  HeaderErrorIndicator: React.ComponentType<HeaderErrorProps>;\n  /**\n   * Custom indicator to display network-down error at top of list, if there is connectivity issue\n   *\n   * Default: [ChannelListHeaderNetworkDownIndicator](https://getstream.io/chat/docs/sdk/reactnative/contexts/channels-context/#headernetworkdownindicator)\n   */\n  HeaderNetworkDownIndicator: React.ComponentType;\n  /**\n   * Initial channels query loading state, triggers the LoadingIndicator\n   */\n  loadingChannels: boolean;\n  /**\n   * Custom indicator to use when there is error in fetching channels\n   *\n   * Default: [LoadingErrorIndicator](https://getstream.io/chat/docs/sdk/reactnative/contexts/channels-context/#loadingerrorindicator)\n   * */\n  LoadingErrorIndicator: React.ComponentType<LoadingErrorProps>;\n  /**\n   * Custom loading indicator to use on Channel List\n   *\n   * */\n  LoadingIndicator: React.ComponentType<Pick<LoadingProps, 'listType'>>;\n  /**\n   * Whether or not additional channels are being loaded, triggers the FooterLoadingIndicator\n   */\n  loadingNextPage: boolean;\n  /**\n   * The React Native FlatList threshold to fetch more data\n   * @see See loadMoreThreshold [doc](https://facebook.github.io/react-native/docs/flatlist#onendreachedthreshold)\n   * */\n  loadMoreThreshold: number;\n  /**\n   * Loads the next page of `channels`, which is present as a required prop\n   */\n  loadNextPage: QueryChannels | undefined;\n  /**\n   * Max number to display within notification badge. Default: 255 and it cannot be higher than that for now due to backend limitations\n   */\n  maxUnreadCount: number;\n  /**\n   * Number of skeletons that should show when loading. Default: 6\n   */\n  numberOfSkeletons: number;\n  /**\n   * Custom UI component to display individual channel list items\n   *\n   * Default: [ChannelPreviewMessenger](https://getstream.io/chat/docs/sdk/reactnative/ui-components/channel-preview-messenger/)\n   */\n  Preview: React.ComponentType<ChannelPreviewMessengerProps<StreamChatGenerics>>;\n  /**\n   * Triggered when the channel list is refreshing, displays a loading spinner at the top of the list\n   */\n  refreshing: boolean;\n  /**\n   * Function to refresh the channel list that is similar to `reloadList`, but it doesn't wipe out existing channels\n   * from UI before loading the new ones\n   */\n  refreshList: () => void | Promise<void>;\n  /**\n   * Removes all the existing channels from UI and loads fresh channels\n   * */\n  reloadList: () => Promise<void>;\n  // /**\n  //  * Function to set the currently active channel, acts as a bridge between ChannelList and Channel components\n  //  *\n  //  * @param channel A channel object\n  //  */\n  // setActiveChannel?: (channel: Channel<StreamChatGenerics>) => void;\n  /**\n   * Function to gain access to the inner FlatList ref\n   *\n   * **Example:**\n   *\n   * ```\n   * <ChannelListMessenger\n   *  setFlatListRef={(ref) => {\n   *    // Use ref for your own good\n   *  }}\n   * ```\n   */\n  setFlatListRef: (ref: FlatList<Channel<StreamChatGenerics>> | null) => void;\n  /**\n   * Custom UI component to display loading channel skeletons\n   *\n   * Default: [Skeleton](https://getstream.io/chat/docs/sdk/reactnative/contexts/channels-context/#skeleton)\n   */\n  Skeleton: React.ComponentType;\n  /**\n   * Error in channels query, if any\n   */\n  error?: Error;\n  ListHeaderComponent?: React.ComponentType;\n  /**\n   * Function to set the currently active channel, acts as a bridge between ChannelList and Channel components\n   *\n   * @param channel A channel object\n   */\n  onSelect?: (channel: Channel<StreamChatGenerics>) => void;\n  /**\n   * Custom UI component to render preview avatar.\n   *\n   * **Default** [ChannelAvatar](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/ChannelPreview/ChannelAvatar.tsx)\n   */\n  PreviewAvatar?: React.ComponentType<ChannelAvatarProps<StreamChatGenerics>>;\n  /**\n   * Custom UI component to render preview of latest message on channel.\n   *\n   * **Default** [ChannelPreviewMessage](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/ChannelPreview/ChannelPreviewMessage.tsx)\n   */\n  PreviewMessage?: React.ComponentType<ChannelPreviewMessageProps<StreamChatGenerics>>;\n  /**\n   * Custom UI component to render muted status.\n   *\n   * **Default** [ChannelMutedStatus](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/ChannelPreview/ChannelPreviewMutedStatus.tsx)\n   */\n  PreviewMutedStatus?: React.ComponentType<ChannelPreviewMutedStatusProps<StreamChatGenerics>>;\n  /**\n   * Custom UI component to render preview avatar.\n   *\n   * **Default** [ChannelPreviewStatus](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/ChannelPreview/ChannelPreviewStatus.tsx)\n   */\n  PreviewStatus?: React.ComponentType<ChannelPreviewStatusProps<StreamChatGenerics>>;\n  /**\n   * Custom UI component to render preview avatar.\n   *\n   * **Default** [ChannelPreviewTitle](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/ChannelPreview/ChannelPreviewTitle.tsx)\n   */\n  PreviewTitle?: React.ComponentType<ChannelPreviewTitleProps<StreamChatGenerics>>;\n  /**\n   * Custom UI component to render preview avatar.\n   *\n   * **Default** [ChannelPreviewUnreadCount](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/ChannelPreview/ChannelPreviewUnreadCount.tsx)\n   */\n  PreviewUnreadCount?: React.ComponentType<ChannelPreviewUnreadCountProps<StreamChatGenerics>>;\n};\n\nexport const ChannelsContext = React.createContext(\n  DEFAULT_BASE_CONTEXT_VALUE as ChannelsContextValue,\n);\n\nexport const ChannelsProvider = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value: ChannelsContextValue<StreamChatGenerics>;\n}>) => (\n  <ChannelsContext.Provider value={value as unknown as ChannelsContextValue}>\n    {children}\n  </ChannelsContext.Provider>\n);\n\nexport const useChannelsContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const contextValue = useContext(\n    ChannelsContext,\n  ) as unknown as ChannelsContextValue<StreamChatGenerics>;\n\n  if (contextValue === DEFAULT_BASE_CONTEXT_VALUE && !isTestEnvironment()) {\n    throw new Error(\n      `The useChannelsContext hook was called outside of the ChannelsContext provider. Make sure you have configured ChannelList component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#channel-list`,\n    );\n  }\n\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChannelContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withChannelsContext = <\n  P extends UnknownType,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof ChannelsContextValue<StreamChatGenerics>>> => {\n  const WithChannelsContextComponent = (\n    props: Omit<P, keyof ChannelsContextValue<StreamChatGenerics>>,\n  ) => {\n    const channelsContext = useChannelsContext<StreamChatGenerics>();\n\n    return <Component {...(props as P)} {...channelsContext} />;\n  };\n  WithChannelsContextComponent.displayName = `WithChannelsContext${getDisplayName(Component)}`;\n  return WithChannelsContextComponent;\n};\n"]}