{"version":3,"sources":["ThemeContext.tsx"],"names":["mergeThemes","params","style","theme","finalTheme","Object","keys","length","JSON","parse","stringify","defaultTheme","ThemeContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","ThemeProvider","props","children","mergedStyle","modifiedTheme","useTheme","Error"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AACA;;;;;;;;;AAoBO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAgC;AACzD,MAAQC,KAAR,GAAyBD,MAAzB,CAAQC,KAAR;AAAA,MAAeC,KAAf,GAAyBF,MAAzB,CAAeE,KAAf;AACA,MAAMC,UAAU,GACd,CAACD,KAAD,IAAUE,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,MAAnB,KAA8B,CAAxC,GACIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeC,mBAAf,CAAX,CADJ,GAEIH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,KAAf,CAAX,CAHN;;AAMA,MAAID,KAAJ,EAAW;AACT,2BAAME,UAAN,EAAkBF,KAAlB;AACD;;AAED,SAAOE,UAAP;AACD,CAbM;;;;AAeA,IAAMQ,YAAY,GAAGC,kBAAMC,aAAN,CAAoBC,mDAApB,CAArB;;;;AAEA,IAAMC,aAEZ,GAAG,SAFSA,aAET,CAACC,KAAD,EAAW;AACb,MAAQC,QAAR,GAAgDD,KAAhD,CAAQC,QAAR;AAAA,MAAkBC,WAAlB,GAAgDF,KAAhD,CAAkBE,WAAlB;AAAA,MAA+BjB,KAA/B,GAAgDe,KAAhD,CAA+Bf,KAA/B;AAAA,MAAsCC,KAAtC,GAAgDc,KAAhD,CAAsCd,KAAtC;AAEA,MAAMiB,aAAa,GAAG,oBAAQ,YAAM;AAClC,QAAID,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD;;AAED,WAAOnB,WAAW,CAAC;AAAEE,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,KAAK,EAALA;AAAT,KAAD,CAAlB;AACD,GANqB,EAMnB,CAACgB,WAAD,EAAcjB,KAAd,EAAqBC,KAArB,CANmB,CAAtB;AAQA,SAAO,gCAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEiB,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CF,QAA9C,CAAP;AACD,CAdM;;;;AAgBA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC5B,MAAMlB,KAAK,GAAG,uBAAWS,YAAX,CAAd;;AAEA,MAAIT,KAAK,KAAKY,mDAAV,IAAwC,CAAC,2CAA7C,EAAkE;AAChE,UAAM,IAAIO,KAAJ,wOAAN;AAGD;;AACD,SAAO;AAAEnB,IAAAA,KAAK,EAALA;AAAF,GAAP;AACD,CATM","sourcesContent":["import React, { PropsWithChildren, useContext, useMemo } from 'react';\n\nimport merge from 'lodash/merge';\n\nimport { defaultTheme, Theme } from './utils/theme';\n\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\nimport { isTestEnvironment } from '../utils/isTestEnvironment';\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: DeepPartial<T[P]>;\n};\n\nexport type ThemeProviderInputValue = {\n  mergedStyle?: Theme;\n  style?: DeepPartial<Theme>;\n};\n\nexport type MergedThemesParams = {\n  style?: DeepPartial<Theme>;\n  theme?: Theme;\n};\n\nexport type ThemeContextValue = {\n  theme: Theme;\n};\n\nexport const mergeThemes = (params: MergedThemesParams) => {\n  const { style, theme } = params;\n  const finalTheme = (\n    !theme || Object.keys(theme).length === 0\n      ? JSON.parse(JSON.stringify(defaultTheme))\n      : JSON.parse(JSON.stringify(theme))\n  ) as Theme;\n\n  if (style) {\n    merge(finalTheme, style);\n  }\n\n  return finalTheme;\n};\n\nexport const ThemeContext = React.createContext(DEFAULT_BASE_CONTEXT_VALUE as Theme);\n\nexport const ThemeProvider: React.FC<\n  PropsWithChildren<ThemeProviderInputValue & Partial<ThemeContextValue>>\n> = (props) => {\n  const { children, mergedStyle, style, theme } = props;\n\n  const modifiedTheme = useMemo(() => {\n    if (mergedStyle) {\n      return mergedStyle;\n    }\n\n    return mergeThemes({ style, theme });\n  }, [mergedStyle, style, theme]);\n\n  return <ThemeContext.Provider value={modifiedTheme}>{children}</ThemeContext.Provider>;\n};\n\nexport const useTheme = () => {\n  const theme = useContext(ThemeContext);\n\n  if (theme === DEFAULT_BASE_CONTEXT_VALUE && !isTestEnvironment()) {\n    throw new Error(\n      `The useThemeContext hook was called outside the ThemeContext Provider. Make sure you have configured OverlayProvider component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#overlay-provider`,\n    );\n  }\n  return { theme };\n};\n"]}