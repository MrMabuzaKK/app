{"version":3,"sources":["SuggestionsContext.tsx"],"names":["isSuggestionCommand","suggestion","isSuggestionEmoji","isSuggestionUser","SuggestionsContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","SuggestionsProvider","children","value","triggerType","setTriggerType","suggestions","setSuggestions","suggestionsViewActive","setSuggestionsViewActive","openSuggestions","component","updateSuggestions","newSuggestions","closeSuggestions","undefined","suggestionsContext","useSuggestionsContext","contextValue","Error","withSuggestionsContext","Component","WithSuggestionsContextComponent","props","displayName"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren, useContext, useState } from 'react';\n\nimport type { CommandResponse, UserResponse } from 'stream-chat';\n\nimport type { AutoCompleteSuggestionHeaderProps } from '../../components/AutoCompleteInput/AutoCompleteSuggestionHeader';\nimport type { AutoCompleteSuggestionItemProps } from '../../components/AutoCompleteInput/AutoCompleteSuggestionItem';\nimport type { AutoCompleteSuggestionListProps } from '../../components/AutoCompleteInput/AutoCompleteSuggestionList';\nimport type { Emoji } from '../../emoji-data/compiled';\nimport type { DefaultStreamChatGenerics, UnknownType } from '../../types/types';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\nimport { isTestEnvironment } from '../utils/isTestEnvironment';\n\nexport type SuggestionComponentType = 'command' | 'emoji' | 'mention';\n\nexport const isSuggestionCommand = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  suggestion: Suggestion<StreamChatGenerics>,\n): suggestion is SuggestionCommand<StreamChatGenerics> => 'args' in suggestion;\n\nexport const isSuggestionEmoji = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  suggestion: Suggestion<StreamChatGenerics>,\n): suggestion is Emoji => 'unicode' in suggestion;\n\nexport const isSuggestionUser = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  suggestion: Suggestion<StreamChatGenerics>,\n): suggestion is SuggestionUser<StreamChatGenerics> => 'id' in suggestion;\n\nexport type Suggestion<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Emoji | SuggestionCommand<StreamChatGenerics> | SuggestionUser<StreamChatGenerics>;\n\nexport type SuggestionCommand<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = CommandResponse<StreamChatGenerics>;\nexport type SuggestionUser<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = UserResponse<StreamChatGenerics>;\n\nexport type Suggestions<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  data: Suggestion<StreamChatGenerics>[];\n  onSelect: (item: Suggestion<StreamChatGenerics>) => void;\n  queryText?: string;\n};\n\nexport type SuggestionsContextValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  AutoCompleteSuggestionHeader: React.ComponentType<AutoCompleteSuggestionHeaderProps>;\n  AutoCompleteSuggestionItem: React.ComponentType<\n    AutoCompleteSuggestionItemProps<StreamChatGenerics>\n  >;\n  AutoCompleteSuggestionList: React.ComponentType<\n    AutoCompleteSuggestionListProps<StreamChatGenerics>\n  >;\n  /** Override handler for closing suggestions (mentions, command autocomplete etc) */\n  closeSuggestions: () => void;\n  /**\n   * Override handler for opening suggestions (mentions, command autocomplete etc)\n   *\n   * @param component {Component|element} UI Component for suggestion item.\n   * @overrideType Function\n   */\n  openSuggestions: (component: SuggestionComponentType) => Promise<void>;\n  suggestions: Suggestions<StreamChatGenerics>;\n  triggerType: SuggestionComponentType;\n  /**\n   * Override handler for updating suggestions (mentions, command autocomplete etc)\n   *\n   * @param newSuggestions {Component|element} UI Component for suggestion item.\n   * @overrideType Function\n   */\n  updateSuggestions: (newSuggestions: Suggestions<StreamChatGenerics>) => void;\n  queryText?: string;\n  suggestionsViewActive?: boolean;\n};\n\nexport const SuggestionsContext = React.createContext(\n  DEFAULT_BASE_CONTEXT_VALUE as SuggestionsContextValue,\n);\n\n/**\n * This provider component exposes the properties stored within the SuggestionsContext.\n */\nexport const SuggestionsProvider = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  children,\n  value,\n}: PropsWithChildren<{ value?: Partial<SuggestionsContextValue<StreamChatGenerics>> }>) => {\n  const [triggerType, setTriggerType] = useState<SuggestionComponentType | null>(null);\n  const [suggestions, setSuggestions] = useState<Suggestions<StreamChatGenerics>>();\n  const [suggestionsViewActive, setSuggestionsViewActive] = useState(false);\n\n  const openSuggestions = (component: SuggestionComponentType) => {\n    setTriggerType(component);\n    setSuggestionsViewActive(true);\n  };\n\n  const updateSuggestions = (newSuggestions: Suggestions<StreamChatGenerics>) => {\n    setSuggestions(newSuggestions);\n    setSuggestionsViewActive(!!triggerType);\n  };\n\n  const closeSuggestions = () => {\n    setTriggerType(null);\n    setSuggestions(undefined);\n    setSuggestionsViewActive(false);\n  };\n\n  const suggestionsContext = {\n    ...value,\n    closeSuggestions,\n    openSuggestions,\n    suggestions,\n    suggestionsViewActive,\n    triggerType,\n    updateSuggestions,\n  };\n\n  return (\n    <SuggestionsContext.Provider value={suggestionsContext as unknown as SuggestionsContextValue}>\n      {children}\n    </SuggestionsContext.Provider>\n  );\n};\n\nexport const useSuggestionsContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const contextValue = useContext(\n    SuggestionsContext,\n  ) as unknown as SuggestionsContextValue<StreamChatGenerics>;\n\n  if (contextValue === DEFAULT_BASE_CONTEXT_VALUE && !isTestEnvironment()) {\n    throw new Error(\n      `The useSuggestionsContext hook was called outside of the SuggestionsContext provider. Make sure you have configured Channel component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#channel`,\n    );\n  }\n\n  return contextValue;\n};\n\nexport const withSuggestionsContext = <\n  P extends UnknownType,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof SuggestionsContextValue<StreamChatGenerics>>> => {\n  const WithSuggestionsContextComponent = (\n    props: Omit<P, keyof SuggestionsContextValue<StreamChatGenerics>>,\n  ) => {\n    const suggestionsContext = useSuggestionsContext<StreamChatGenerics>();\n\n    return <Component {...(props as P)} {...suggestionsContext} />;\n  };\n  WithSuggestionsContextComponent.displayName = `WithSuggestionsContext${getDisplayName(\n    Component,\n  )}`;\n  return WithSuggestionsContextComponent;\n};\n"]}