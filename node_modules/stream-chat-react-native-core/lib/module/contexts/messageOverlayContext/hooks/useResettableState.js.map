{"version":3,"sources":["useResettableState.ts"],"names":["useResettableState","values","data","setData","isMounted","reset","current"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAQO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAAIC,MAAJ,EAAkB;AAClD,kBAAwB,qBAASA,MAAT,CAAxB;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,SAAS,GAAG,uCAAlB;;AAEA,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,QAAID,SAAS,CAACE,OAAd,EAAuB;AACrBH,MAAAA,OAAO,CAACF,MAAD,CAAP;AACD;AACF,GAJD;;AAMA,SAAO;AAAEC,IAAAA,IAAI,EAAJA,IAAF;AAAQG,IAAAA,KAAK,EAALA,KAAR;AAAeF,IAAAA,OAAO,EAAPA;AAAf,GAAP;AACD,CAXM","sourcesContent":["import { useState } from 'react';\n\nimport { useIsMountedRef } from '../../../hooks/useIsMountedRef';\n\n/**\n * Wrapper around useState that provides a `reset`\n * function to reset the state to its initial value.\n *\n * Will not set state after being unmounted.\n * */\nexport const useResettableState = <T>(values: T) => {\n  const [data, setData] = useState(values);\n  const isMounted = useIsMountedRef();\n\n  const reset = () => {\n    if (isMounted.current) {\n      setData(values);\n    }\n  };\n\n  return { data, reset, setData };\n};\n"]}