{"version":3,"sources":["useIsMountedRef.ts"],"names":["useIsMountedRef","isMounted","current"],"mappings":";;;;;AAAA;;AAoBO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAKnC,MAAMC,SAAS,GAAG,mBAAO,IAAP,CAAlB;AAEA,wBACE;AAAA,WAAM,YAAM;AACVA,MAAAA,SAAS,CAACC,OAAV,GAAoB,KAApB;AACD,KAFD;AAAA,GADF,EAIE,EAJF;AAOA,SAAOD,SAAP;AACD,CAfM","sourcesContent":["import { useEffect, useRef } from 'react';\n\n/**\n * Returns mount status of component. This hook can be used for purpose of avoiding any\n * setState calls (within async operation) after component gets unmounted.\n *\n * @example\n * ```\n * const isMounted = useIsMountedRef();\n * const [dummyValue, setDummyValue] = useState(false);\n *\n * useEffect(() => {\n *  someAsyncOperation().then(() => {\n *    if (isMounted.current) setDummyValue(true);\n *  })\n * })\n * ```\n *\n * @returns isMounted {Object} Mount status ref for the component.\n */\nexport const useIsMountedRef = () => {\n  // Initial value has been set to true, since this hook exist only for sole purpose of\n  // avoiding any setState calls (within async operation) after component gets unmounted.\n  // Basically we don't need to know about state change from component being initialized -> mounted.\n  // We only need a state change from initialized or mounted state -> unmounted state.\n  const isMounted = useRef(true);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    [],\n  );\n\n  return isMounted;\n};\n"]}